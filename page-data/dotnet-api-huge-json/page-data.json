{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-api-huge-json/","result":{"data":{"remark":{"fields":{"path":"dotnet-api-huge-json"},"meta":{"title":""},"headings":[{"value":"dotnet api dealing with huge json"}],"html":"<h1>dotnet api dealing with huge json</h1>\n<p>Imagine that you need to parse huge file - solution will be easy - read and process it line by line.</p>\n<p>What about HTTP calls?</p>\n<p>Lets pretend we have single endpoint that accepts some JSON, what will happen if request size is 1Tb? (pretending it won't timeout and no network issues will appear)</p>\n<p>The simplest possible way here is to do the same approach as with files - grab request body stream and just \"read it line by line\"</p>\n<p>But here is the catch - if in case of text files it is easy, then how it can be done with JSON?</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> json <span class=\"token operator\">=</span> JsonDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEndAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>RootElement<span class=\"token punctuation\">.</span>ValueKind <span class=\"token operator\">!=</span> JsonValueKind<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status400BadRequest<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> element <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">.</span>RootElement<span class=\"token punctuation\">.</span><span class=\"token function\">EnumerateArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">GetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movie <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">GetRawText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received movie: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Title</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Year</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">+</span> <span class=\"token string\">\", line: \"</span> <span class=\"token operator\">+</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">GetRawText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status200OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So with this approach we can do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST localhost:5000/demo <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> @movies.json</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Shawshank Redemption\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1994</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Godfather\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1972</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac was here\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The Dark Knight\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2008</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISBN1\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Lord of the Rings\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1954</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Godfather: Part II\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1974</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The beauty of this approach is that we are technically working with usual json, just reading it piece by piece</p>\n<h2>new line delimited json</h2>\n<p>Another possible approach will be to use ndjson as an input, here is example of how it may look like</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ndjson\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status200OK<span class=\"token punctuation\">;</span>\n    response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentType <span class=\"token operator\">=</span> <span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chrome likes that more than \"application/x-ndjson\" and display results as they appear</span>\n    <span class=\"token comment\">// response.Headers.TransferEncoding = \"chunked\"; // dotnet do not like that, response will be empty</span>\n\n    <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>BodyReader<span class=\"token punctuation\">.</span><span class=\"token function\">AsStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLineAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> line<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movie <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received movie: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Title</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Year</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">?.</span>Id<span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"OK\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvalidOperationException: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">+</span> <span class=\"token string\">\", Line: \"</span> <span class=\"token operator\">+</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">,</span> line <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>Chrome do like <code class=\"language-text\">text/event-stream</code> content type more than <code class=\"language-text\">application/x-ndjson</code> and will display results as they appear</li>\n<li>If you will try to pass <code class=\"language-text\">chunked</code> transfer endcoding - everything will broke and your responses will be empty - dotnet specific deep inside</li>\n</ul>\n<p>And now we can test it</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST localhost:5000/ndjson <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/x-ndjson'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{ \"id\": 1, \"title\": \"The Shawshank Redemption\", \"year\": 1994 }\n{\"id\": 2, \"title\": \"The Godfather\", \"year\": 1972}\n{ \"title\": \"Hello World\", \"body\": \"mac was here\" }\n{ \"id\": 3, \"title\" : \"The Dark Knight\", \"year\": 2008 }\n{ \"id\": \"ISBN1\", \"title\": \"The Lord of the Rings\", \"year\": 1954 }\n{\"id\": 4, \"title\": \"The Godfather: Part II\", \"year\": 1974}\n'</span></code></pre></div>\n<p>and our response will be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token operator\">{</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"OK\"</span><span class=\"token operator\">}</span>\n<span class=\"token operator\">{</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"OK\"</span><span class=\"token operator\">}</span>\n<span class=\"token operator\">{</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"OK\"</span><span class=\"token operator\">}</span>\n<span class=\"token operator\">{</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"OK\"</span><span class=\"token operator\">}</span>\n<span class=\"token operator\">{</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"The JSON value could not be converted to System.Int32. Path: $.id | LineNumber: 0 | BytePositionInLine: 15.\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"line\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"{ \\u0022id\\u0022: \\u0022ISBN1\\u0022, \\u0022title\\u0022: \\u0022The Lord of the Rings\\u0022, \\u0022year\\u0022: 1954 }\"</span><span class=\"token operator\">}</span>\n<span class=\"token operator\">{</span><span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"OK\"</span><span class=\"token operator\">}</span></code></pre></div>\n<p>to see the beauty of this, just put some sleep delays in while loop</p>\n<p>Here is full example of what I have ended up with</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\ncurl -s -X POST localhost:5000/demo -H 'Content-Type: application/json' -d @movies.json\n*/</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> json <span class=\"token operator\">=</span> JsonDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEndAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>RootElement<span class=\"token punctuation\">.</span>ValueKind <span class=\"token operator\">!=</span> JsonValueKind<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status400BadRequest<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> element <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">.</span>RootElement<span class=\"token punctuation\">.</span><span class=\"token function\">EnumerateArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">GetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movie <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">GetRawText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received movie: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Title</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Year</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyNotFoundException</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KeyNotFoundException: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">GetRawText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidOperationException</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvalidOperationException: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">GetRawText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status200OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/second\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> json <span class=\"token operator\">=</span> JsonDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEndAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> element <span class=\"token keyword\">in</span> json<span class=\"token punctuation\">.</span>RootElement<span class=\"token punctuation\">.</span><span class=\"token function\">EnumerateArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> idProperty<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            element<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> titleProperty<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            element<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> yearProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token operator\">=</span> idProperty<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> title <span class=\"token operator\">=</span> titleProperty<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> year <span class=\"token operator\">=</span> yearProperty<span class=\"token punctuation\">.</span><span class=\"token function\">GetInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received movie: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">title</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">year</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error processing movie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\ncurl -s -X POST localhost:5000/ndjson -H 'Content-Type: application/x-ndjson' -d '{ \"id\": 1, \"title\": \"The Shawshank Redemption\", \"year\": 1994 }\n{\"id\": 2, \"title\": \"The Godfather\", \"year\": 1972}\n{ \"title\": \"Hello World\", \"body\": \"mac was here\" }\n{ \"id\": 3, \"title\" : \"The Dark Knight\", \"year\": 2008 }\n{ \"id\": \"ISBN1\", \"title\": \"The Lord of the Rings\", \"year\": 1954 }\n{\"id\": 4, \"title\": \"The Godfather: Part II\", \"year\": 1974}\n'\n*/</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ndjson\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status200OK<span class=\"token punctuation\">;</span>\n    response<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentType <span class=\"token operator\">=</span> <span class=\"token string\">\"text/event-stream\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chrome likes that more than \"application/x-ndjson\" and display results as they appear</span>\n    <span class=\"token comment\">// response.Headers.TransferEncoding = \"chunked\"; // dotnet do not like that, response will be empty</span>\n\n    <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>BodyReader<span class=\"token punctuation\">.</span><span class=\"token function\">AsStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLineAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> line<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movie <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Received movie: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Title</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">movie<span class=\"token punctuation\">?.</span>Year</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">?.</span>Id<span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"OK\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonException</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InvalidOperationException: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span>Message <span class=\"token operator\">+</span> <span class=\"token string\">\", Line: \"</span> <span class=\"token operator\">+</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">,</span> line <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\r\\n\"</span></span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">JsonPropertyName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">JsonPropertyName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Title <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">JsonPropertyName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Year <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>"}},"pageContext":{"id":"288dc316-8861-54b6-af02-8c0bad22960b"}},"staticQueryHashes":[],"slicesMap":{}}