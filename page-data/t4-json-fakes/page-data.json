{"componentChunkName":"component---src-templates-note-js","path":"/t4-json-fakes/","result":{"data":{"remark":{"fields":{"path":"t4-json-fakes"},"meta":{"title":""},"headings":[{"value":"Using T4 for JSON fakes"}],"html":"<h1>Using T4 for JSON fakes</h1>\n<p>Imagine that you are writing unit tests that heavily depends on json fakes.</p>\n<p>Usually what you will do is save json files in your solution and read them as needed.</p>\n<p>So everywhere in your tests you will have something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TestMethod</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestResponseMappingStarterKit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fakeResponse <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../Fakes/Json/FakeResponse.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What I do not like about this is: Whenever you rename and or move your file things will brake, and there is no way you may fix/refactor tests except dummy find and replace which may brake other things.</p>\n<p>There is alternative way - T4.</p>\n<p><strong>Json.tt</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token operator\">&lt;</span>#@ <span class=\"token class-name\">template</span> debug<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span> hostspecific<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> language<span class=\"token operator\">=</span><span class=\"token string\">\"C#\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token operator\">&lt;</span>#@ <span class=\"token class-name\">assembly</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"System.Core\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token operator\">&lt;</span>#@ import <span class=\"token keyword\">namespace</span><span class=\"token operator\">=</span><span class=\"token string\">\"System.Linq\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token operator\">&lt;</span>#@ import <span class=\"token keyword\">namespace</span><span class=\"token operator\">=</span><span class=\"token string\">\"System.Text\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token operator\">&lt;</span>#@ import <span class=\"token keyword\">namespace</span><span class=\"token operator\">=</span><span class=\"token string\">\"System.Collections.Generic\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token operator\">&lt;</span>#@ import <span class=\"token keyword\">namespace</span><span class=\"token operator\">=</span><span class=\"token string\">\"System.IO\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token operator\">&lt;</span>#@ <span class=\"token class-name\">output</span> extension<span class=\"token operator\">=</span><span class=\"token string\">\".cs\"</span> <span class=\"token preprocessor property\">#></span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Tests<span class=\"token punctuation\">.</span>Fakes</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Json</span>\n    <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">&lt;</span># <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> file <span class=\"token keyword\">in</span> Directory<span class=\"token punctuation\">.</span><span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span>Host<span class=\"token punctuation\">.</span><span class=\"token function\">ResolvePath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.json\"</span><span class=\"token punctuation\">,</span> SearchOption<span class=\"token punctuation\">.</span>AllDirectories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> #<span class=\"token operator\">></span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// &lt;#= file.Replace(Host.ResolvePath(\"\"), \"\").Trim('\\\\') #></span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token operator\">&lt;</span>#<span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetFileNameWithoutExtension</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> #<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">@\"&lt;#= File.ReadAllText(file).Replace(\"</span>\\\"<span class=\"token string\">\", \"</span>\\\"\\\"<span class=\"token string\">\") #>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span># <span class=\"token punctuation\">}</span> #<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So from now on you will have your static <code class=\"language-text\">Json</code> class which contains all fakes, it will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Tests<span class=\"token punctuation\">.</span>Fakes</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Json</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// &lt;summary></span>\n        <span class=\"token comment\">/// Json\\FakeResponse.json</span>\n        <span class=\"token comment\">/// &lt;/summary></span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> FakeResponse\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">@\"{\"\"foo\"\": \"\"bar\"\"}\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and your tests will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TestMethod</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">TestResponseMappingStarterKit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fakeResponse <span class=\"token operator\">=</span> Fakes<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>FakeResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now imagine how much confident you fill be after renaming your fake files. Your tests just wont compile, and you will be able to fix things with build in refactor tools.</p>\n<p>BTW there is few more ways achieving this. One of them is to add files as resources. But I personally do not like it, just because I do need add files manually, after removing/renaming them I must reproduce same steps in resources - it does not worth it.</p>"}},"pageContext":{"id":"11c9c8a5-fa76-55df-a42e-6b3b91f9ad6e"}},"staticQueryHashes":[],"slicesMap":{}}