{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-redis-distributed-cache-with-in-memory-fallback","result":{"data":{"remark":{"fields":{"path":"dotnet-redis-distributed-cache-with-in-memory-fallback"},"meta":{"title":""},"headings":[{"value":"dotnet distributed redis cache with in memory fallback"}],"html":"<h1>dotnet distributed redis cache with in memory fallback</h1>\n<p>Usually whenever we are talking about distributed cache we are talking about <a href=\"https://redis.io/\">redis</a> and this <a href=\"https://github.com/dotnet/aspnetcore/tree/main/src/Caching/StackExchangeRedis/src\">implementation</a></p>\n<p>Imagine that you have two instances of your app and single instance of redis</p>\n<p>Then it will be rather single point of failure rather than distributed cache</p>\n<p>How about having local in memory fallback, so in case if Redis is down, application still may work</p>\n<p>In general idea is following (pseudocode):</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cache</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _local<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">Set</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _local<span class=\"token punctuation\">.</span>Set<span class=\"token return-type class-name\"><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span></span>\n        _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _local<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Where <code class=\"language-text\">_remote</code> is our redis and <code class=\"language-text\">_local</code> is our in memory cache.</p>\n<p>With such approach our app may survive even if whole redis cluster will be down</p>\n<h2>Prerequisite Redis notifications</h2>\n<blockquote>\n<p>There is only two real problems: how to name things and how to invalidate caches</p>\n</blockquote>\n<p>Redis has build in notification mechanism no notify its clients about changes in database</p>\n<p>For it to work you should provide <code class=\"language-text\">notify-keyspace-events</code> with some value, in our case it will be <code class=\"language-text\">AKE</code>, more detail can be found <a href=\"https://redis.io/docs/manual/keyspace-notifications/\">here</a></p>\n<p>Here is an sample of how it works</p>\n<p>Start redis:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>redis <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 redis --notify-keyspace-events AKE</code></pre></div>\n<p>Listen for changes:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> redis redis-cli psubscribe <span class=\"token string\">'__key*__:*'</span></code></pre></div>\n<p>Perform some actions:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> redis redis-cli <span class=\"token builtin class-name\">set</span> foo bar EX <span class=\"token number\">2</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> redis redis-cli <span class=\"token builtin class-name\">set</span> acme <span class=\"token number\">42</span> EX <span class=\"token number\">2</span></code></pre></div>\n<p>In subscriber you should receive events like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1) \"pmessage\"\n2) \"__key*__:*\"\n3) \"__keyevent@0__:expired\"\n4) \"acme\"</code></pre></div>\n<p>So redis will may notify us whenever something is expired, changed or removed</p>\n<p>It is important for us, because imagine the following situation:</p>\n<ul>\n<li>app instance 1 caches data and stores it in local memory and redis</li>\n<li>app instance 2 also has local and remote cache</li>\n<li>app 2 decides to invalidate cache and did remove it from local and remote caches</li>\n<li>but app 1 still has it in local cache and will serve it</li>\n</ul>\n<p>To fix this issue we may utilise built in redis subscriber, here is pseudo code of how it works:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisSubscriber</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMemoryCache</span> _local<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RedisSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IConnectionMultiplexer</span> connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IMemoryCache</span> cache<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> subscriber <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">GetSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__keyevent@0__:expired\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _local<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__keyevent@0__:del\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _local<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__keyevent@0__:set\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _local<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we are now syncing changes between all instances and whenever any app decide to invalidate cache it will be propagated to everyone</p>\n<h2>Drop in replacement</h2>\n<p>Here is challange and real fun, what if our implementation will be a drop in replacement for distributed cache, so can be easily swapped</p>\n<p>To do so we need to pretend like we are yet another provider, but underneath instantiate both in memory and redis caches</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>Distributed</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>StackExchangeRedis</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">StackExchangeRedisWithFallback</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisDistributedCache</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDistributedCache</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">RedisCache</span> _remote<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMemoryCache</span> _local<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RedisDistributedCache</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisCache</span> remote<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IMemoryCache</span> local<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _local <span class=\"token operator\">=</span> local<span class=\"token punctuation\">;</span>\n        _remote <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// CONSIDER: if wound in remote cache - save to local?</span>\n        <span class=\"token keyword\">return</span> _local<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// CONSIDER: if wound in remote cache - save to local?</span>\n        <span class=\"token keyword\">return</span> _local<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token keyword\">await</span> _remote<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DistributedCacheEntryOptions</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _local<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">SetAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DistributedCacheEntryOptions</span> options<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _local<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> _remote<span class=\"token punctuation\">.</span><span class=\"token function\">SetAsync</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Refresh</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Refresh</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">RefreshAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> _remote<span class=\"token punctuation\">.</span><span class=\"token function\">RefreshAsync</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _local<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _remote<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">RemoveAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _local<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> _remote<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAsync</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// CONSIDER: add some jitter to timespan so local cache will be 0..30 percents lower than remote</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MemoryCacheEntryOptions</span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DistributedCacheEntryOptions</span> options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> AbsoluteExpiration <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>AbsoluteExpiration<span class=\"token punctuation\">,</span> AbsoluteExpirationRelativeToNow <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>AbsoluteExpirationRelativeToNow<span class=\"token punctuation\">,</span> SlidingExpiration <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>SlidingExpiration <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Nothing fancy here the real fun begins now:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>Distributed</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>StackExchangeRedis</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>DependencyInjection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Options</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">StackExchange<span class=\"token punctuation\">.</span>Redis</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">StackExchangeRedisWithFallback</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributedCacheExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddStackExchangeRedisCacheWithFallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>RedisCacheOptions<span class=\"token punctuation\">></span></span> setupAction<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will be used as fallback</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>setupAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token function\">Connection</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IOptions<span class=\"token punctuation\">&lt;</span>RedisCacheOptions<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>RedisCache<span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddStackExchangeRedisCache</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReuseConnection</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> setupAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDistributedCache<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the trick, we are instantiating Redis cache in its own service collection and adding it to our app as RedisCache instead of IDistributedCache</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDistributedCache<span class=\"token punctuation\">,</span> RedisDistributedCache<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// whenever IDistributedCache is requested we will give our implementation instead of RedisCache one</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>RedisSubscriber<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddHostedService</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>RedisSubscriber<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Subscribe to Redis notifications to invalidate local cache</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// Get connection from given options</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"options\">&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n    <span class=\"token comment\">/// &lt;exception cref=\"ArgumentNullException\">Throws if no connection options awailable&lt;/exception></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IConnectionMultiplexer</span> <span class=\"token function\">Connection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisCacheOptions</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>ConnectionMultiplexerFactory <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">ConnectionMultiplexerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetAwaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>ConfigurationOptions <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ConnectionMultiplexer<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>ConfigurationOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>Configuration <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ConnectionMultiplexer<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"All connection options are null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// The trick to reuse existing connection in our and RedisCache implementations</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token comment\">/// &lt;param name=\"serviceProvider\">&lt;/param></span>\n    <span class=\"token comment\">/// &lt;param name=\"setupAction\">&lt;/param></span>\n    <span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Action<span class=\"token punctuation\">&lt;</span>RedisCacheOptions<span class=\"token punctuation\">></span></span> <span class=\"token function\">ReuseConnection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>RedisCacheOptions<span class=\"token punctuation\">></span></span> setupAction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> options <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setupAction</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>Configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>ConfigurationOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>ConnectionMultiplexerFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>serviceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConnectionMultiplexer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Note how we are hiding redis implementation in its own service provider and how we are reusing redis connection, that probably the only important things here</p>\n<p>And for invalidation we are using:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Hosting</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Logging</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">StackExchange<span class=\"token punctuation\">.</span>Redis</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">StackExchangeRedisWithFallback</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisSubscriber</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BackgroundService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IConnectionMultiplexer</span> _connection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMemoryCache</span> _cache<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>RedisSubscriber<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RedisSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IConnectionMultiplexer</span> connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IMemoryCache</span> cache<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>RedisSubscriber<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _connection <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">;</span>\n        _cache <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">;</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisChannel</span> channel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisValue</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>IsNullOrEmpty<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Removing '{Key}' from local cache because of '{Channel}'\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        _cache<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> stoppingToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token function\">GetDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notify-keyspace-events\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notify-keyspace-events\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> notifyKeyspaceEvents<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span> notifyKeyspaceEvents <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> notifyKeyspaceEvents<span class=\"token punctuation\">.</span>IsNull <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AKE\"</span><span class=\"token punctuation\">,</span> notifyKeyspaceEvents<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentOutOfRangeException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>notifyKeyspaceEvents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> notifyKeyspaceEvents<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Redis is not configured to notify about changes, expected 'notify-keyspace-events' to be 'AKE', make sure you added '--notify-keyspace-events AKE'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> subscriber <span class=\"token operator\">=</span> _connection<span class=\"token punctuation\">.</span><span class=\"token function\">GetSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__keyevent@0__:expired\"</span><span class=\"token punctuation\">,</span> Handler<span class=\"token punctuation\">,</span> CommandFlags<span class=\"token punctuation\">.</span>FireAndForget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__keyevent@0__:del\"</span><span class=\"token punctuation\">,</span> Handler<span class=\"token punctuation\">,</span> CommandFlags<span class=\"token punctuation\">.</span>FireAndForget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">SubscribeAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__keyevent@0__:set\"</span><span class=\"token punctuation\">,</span> Handler<span class=\"token punctuation\">,</span> CommandFlags<span class=\"token punctuation\">.</span>FireAndForget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Subscribed to notifications from Redis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Having all that in our app we may just replace <code class=\"language-text\">AddStackExchangeRedisCache</code> with <code class=\"language-text\">AddStackExchangeRedisCacheWithFallback</code> and suddently everything will wire up, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">builder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddStackExchangeRedisCacheWithFallback</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> <span class=\"token comment\">// drop in replacement for \"builder.Services.AddStackExchangeRedisCache\"</span>\n<span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>Configuration <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>InstanceName <span class=\"token operator\">=</span> <span class=\"token string\">\"Api\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The cool thing is that nothing changed from perspective of consumers, no matter which realization you are using you code will stay the same, aka:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Caching<span class=\"token punctuation\">.</span>Distributed</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Api<span class=\"token punctuation\">.</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ApiController</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"[controller]\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherForecastController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ControllerBase</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Summaries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Freezing\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bracing\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chilly\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cool\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mild\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Warm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Balmy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sweltering\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Scorching\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>WeatherForecastController<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDistributedCache</span> _cache<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">WeatherForecastController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>WeatherForecastController<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDistributedCache</span> cache<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n        _cache <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpGet</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Name <span class=\"token operator\">=</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>GetWeatherForecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">></span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetWeatherForecast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> _cache<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreate</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>GetWeatherForecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            PretendWeAreDoingDatabaseCall<span class=\"token punctuation\">,</span>\n            TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            token\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">></span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">PretendWeAreDoingDatabaseCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> actual <span class=\"token operator\">=</span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WeatherForecast</span> <span class=\"token punctuation\">{</span> Date <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">AddDays</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TemperatureC <span class=\"token operator\">=</span> Random<span class=\"token punctuation\">.</span>Shared<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Summary <span class=\"token operator\">=</span> Summaries<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span>Shared<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>Summaries<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache MISS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>And if you will make your app setting somethin like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Logging\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"LogLevel\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Default\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Information\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Microsoft.AspNetCore\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Warning\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"StackExchangeRedisWithFallback\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Debug\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"AllowedHosts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And run your endpoing, after a while you will see in logs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dbug: StackExchangeRedisWithFallback.RedisSubscriber[0]\n      Removing 'ApiGetWeatherForecast' from local cache because of '__keyevent@0__:expired'</code></pre></div>\n<p>Which tells you that inside redis, our <code class=\"language-text\">ApiGetWeatherForecast</code> was expired and we removed it from local cache as well - profit</p>\n<p>Note: indeed, race conditions are possible here, but if you are not building banking system and eventual consistency is fine you should not care</p>"}},"pageContext":{"id":"727adb40-fa4f-5b6d-9aa9-d911a0d76863"}},"staticQueryHashes":[]}