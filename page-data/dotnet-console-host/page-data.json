{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-console-host/","result":{"data":{"remark":{"fields":{"path":"dotnet-console-host"},"meta":{"title":""},"headings":[{"value":"dotnet preconfigured console application"}],"html":"<h1>dotnet preconfigured console application</h1>\n<p>For simple console apps there is no need for anything fancy</p>\n<p>But as soon as you need logging, dependency injection and other things you will probably end up with something manualy configured</p>\n<p>How about instead of doing everything by hands to use defaults from an web application</p>\n<p>To do so we are going to change project sdk to \"Microsoft.NET.Sdk.Web\" from simple \"Microsoft.NET.Sdk\" it will give us access to usual builders we have in web apps</p>\n<p>And our app may look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Foo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// var builder = WebApplication.CreateBuilder(args); // instead pass environment name as Development in Debug mode, it will make both \"Run\" command from JetBrains Rider and \"dotnet run\" in shell commands behave the same way</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplicationOptions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> DEBUG</span>\n    EnvironmentName <span class=\"token operator\">=</span> <span class=\"token string\">\"Development\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n    Args <span class=\"token operator\">=</span> args\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// now we have preconfigured logging, app settings, environments, etc and may register our services as usual</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IWorker<span class=\"token punctuation\">,</span> Worker<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// app.Run(); // instead of running the app we will require our worker from DI container and run it, for logger and other services to recognize the flow we manually calling start/stop routines for app, otherwise logger is not fast enough to print messages (they are buffered behind the scene)</span>\n<span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IWorker<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">StopAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// some dummy sample worker, wrapped in a namespace just to check if logging levels from app settings will take effect</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Foo</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IWorker</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IWorker</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>Worker<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>Worker<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WORKING\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The benefits are:</p>\n<ul>\n<li>app is preconfigured the same way we expect it to be, all logging and other stuff is added by default, environment variables and handled, etc</li>\n<li>in case of need it will be dramatically easy to switch to web</li>\n</ul>\n<p>The same way as we do it for web apps we may have launch settings but there is even better way which will make running app from rider and shell consistent</p>\n<p>Having all that reduces boiler plate code of console apps dramatically, usually it is all possible vairations of cronjob</p>\n<p>Also I do like this approach because can move code pieces between projects without being aware if that is web or console app</p>"}},"pageContext":{"id":"29a869b1-45f4-57a5-bd3b-246ec045952f"}},"staticQueryHashes":[],"slicesMap":{}}