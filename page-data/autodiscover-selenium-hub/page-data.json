{"componentChunkName":"component---src-templates-note-js","path":"/autodiscover-selenium-hub/","result":{"data":{"remark":{"fields":{"path":"autodiscover-selenium-hub"},"meta":{"title":""},"headings":[{"value":"Autodiscover Selenium Hub with UDP broadcast messages"}],"html":"<h1>Autodiscover Selenium Hub with UDP broadcast messages</h1>\n<p>Here is how we implement autodiscover of selenium hub with udp broad cast messages.</p>\n<p>We are starting not only selenium hub on master machine but also small echo udp server, wich listening for udp messages on 4444 port.</p>\n<p>Now before starting selenium nodes all we need to do is to send broadcast message on 4444 port and catch IP from master answer message, after that we know hub ip and can easily register our new node.</p>\n<p>In my case, server is running under windows, here is files:</p>\n<p><strong>Server.cmd</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">@ECHO OFF\nSTART powershell <span class=\"token parameter variable\">-ExecutionPolicy</span> Bypass <span class=\"token parameter variable\">-File</span> <span class=\"token string\">\"%~dp0Scripts\\UdpServer.ps1\"</span>\n<span class=\"token string\">\"%~dp0Portables\\jre<span class=\"token entity\" title=\"\\b\">\\b</span>in\\java.exe\"</span> <span class=\"token parameter variable\">-jar</span> <span class=\"token string\">\"%~dp0Portables\\selenium-server-standalone.jar\"</span> <span class=\"token parameter variable\">-role</span> hub</code></pre></div>\n<p><strong>Scripts\\UdpServer.ps1</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$IPAddress</span> = <span class=\"token function\">Get-NetIPAddress</span> <span class=\"token operator\">-</span>AddressFamily IPv4 <span class=\"token operator\">-</span>AddressState Preferred <span class=\"token punctuation\">|</span> ?<span class=\"token punctuation\">{</span> <span class=\"token operator\">-not</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>IPAddress <span class=\"token operator\">-eq</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">select</span> <span class=\"token operator\">-</span>First 1 IPAddress <span class=\"token operator\">-</span>ExpandProperty IPAddress\n<span class=\"token variable\">$Port</span>=4444\n\n<span class=\"token variable\">$Client</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets<span class=\"token punctuation\">.</span>UdpClient <span class=\"token variable\">$Port</span>\n<span class=\"token variable\">$ListenEndpoint</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>IPEndPoint<span class=\"token punctuation\">(</span><span class=\"token namespace\">[IPAddress]</span>::Any<span class=\"token punctuation\">,</span> <span class=\"token variable\">$Port</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$IPAddress</span><span class=\"token punctuation\">)</span></span>:<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$Port</span><span class=\"token punctuation\">)</span></span> - LISTENING\"</span> <span class=\"token operator\">-</span>ForegroundColor Green\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">$True</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$Client</span><span class=\"token punctuation\">.</span>Receive<span class=\"token punctuation\">(</span><span class=\"token namespace\">[ref]</span><span class=\"token variable\">$ListenEndpoint</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$IP</span> = <span class=\"token variable\">$ListenEndpoint</span><span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>ToString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-not</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$IPAddress</span> <span class=\"token operator\">-eq</span> <span class=\"token variable\">$IP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">&lt;#\n        Start-Sleep -Milliseconds 100\n        $Temp = New-Object System.Net.Sockets.UdpClient\n        $ResponseEndpoint = New-Object System.Net.IPEndPoint ([IPAddress]::Parse($IP), $Port)\n        $BytesSent = $Temp.Send(@(), 0, $ResponseEndpoint)\n        $Temp.Close()\n        #></span>\n\n        <span class=\"token variable\">$job</span> = <span class=\"token function\">Start-Job</span> <span class=\"token operator\">-</span>ScriptBlock <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Start-Sleep</span> <span class=\"token operator\">-</span>Milliseconds 100\n            <span class=\"token variable\">$Temp</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets<span class=\"token punctuation\">.</span>UdpClient\n            <span class=\"token variable\">$ResponseEndpoint</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>IPEndPoint <span class=\"token punctuation\">(</span><span class=\"token namespace\">[IPAddress]</span>::Parse<span class=\"token punctuation\">(</span><span class=\"token variable\">$args</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$args</span><span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token variable\">$BytesSent</span> = <span class=\"token variable\">$Temp</span><span class=\"token punctuation\">.</span>Send<span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> <span class=\"token variable\">$ResponseEndpoint</span><span class=\"token punctuation\">)</span>\n            <span class=\"token variable\">$Temp</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span>ArgumentList <span class=\"token variable\">$IP</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$Port</span>\n\n        <span class=\"token function\">Write-Host</span> <span class=\"token variable\">$IP</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here is worker files:</p>\n<p><strong>Worker.cmd</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">@ECHO OFF\nFOR /F %%i IN <span class=\"token punctuation\">(</span><span class=\"token string\">'powershell -ExecutionPolicy Bypass -File \"%~dp0Scripts\\HubDiscover.ps1\"'</span><span class=\"token punctuation\">)</span> DO SET <span class=\"token assign-left variable\">SELENIUM_HUB_IP</span><span class=\"token operator\">=</span>%%i\n<span class=\"token string\">\"%~dp0Portables\\jre<span class=\"token entity\" title=\"\\b\">\\b</span>in\\java\"</span> <span class=\"token parameter variable\">-jar</span> <span class=\"token string\">\"%~dp0Portables\\selenium-server-standalone.jar\"</span> <span class=\"token parameter variable\">-role</span> <span class=\"token function\">node</span> <span class=\"token parameter variable\">-hub</span> http://%SELENIUM_HUB_IP%:4444/grid/register <span class=\"token parameter variable\">-browser</span> <span class=\"token string\">\"browserName=firefox, firefox_binary=%~dp0Portables\\Firefox<span class=\"token entity\" title=\"\\f\">\\f</span>irefox.exe, maxInstances=2\"</span></code></pre></div>\n<p><strong>Scripts\\HubDiscover.ps1</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$Port</span> = 4444\n\n<span class=\"token variable\">$EndPoint</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>IPEndPoint <span class=\"token punctuation\">(</span><span class=\"token namespace\">[IPAddress]</span>::Broadcast<span class=\"token punctuation\">,</span> <span class=\"token variable\">$Port</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$Client</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets<span class=\"token punctuation\">.</span>UdpClient\n<span class=\"token variable\">$BytesSent</span> = <span class=\"token variable\">$Client</span><span class=\"token punctuation\">.</span>Send<span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span><span class=\"token variable\">$EndPoint</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$Client</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token variable\">$EndPoint</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>IPEndPoint <span class=\"token punctuation\">(</span><span class=\"token namespace\">[IPAddress]</span>::Any<span class=\"token punctuation\">,</span> <span class=\"token variable\">$Port</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$Client</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets<span class=\"token punctuation\">.</span>UdpClient <span class=\"token variable\">$Port</span>\n<span class=\"token variable\">$Content</span> = <span class=\"token variable\">$Client</span><span class=\"token punctuation\">.</span>Receive<span class=\"token punctuation\">(</span><span class=\"token namespace\">[ref]</span><span class=\"token variable\">$EndPoint</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$IP</span> = <span class=\"token variable\">$EndPoint</span><span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>ToString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$Client</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">Write-Host</span> <span class=\"token variable\">$IP</span></code></pre></div>\n<p>Now you can run Selenium Grid from any machine in your local network and all nodes started after will automatically connect to it.</p>\n<p>There is SSDP (Simple Service Discovery Protocol) built into Windows, wich works in same way, so probably udp messages can be somehow adopted for it.</p>\n<p>Also think of udp servers on nodes, that can accept command messages and restart nodes - it will be awesome addition.</p>\n<p>Here is linux part:</p>\n<p>Vagrant file creating multiple machines</p>\n<p><strong>Vagrantfile</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">Vagrant<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"2\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n    config<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>box <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"hashicorp/precise64\"</span></span>\n    config<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>provision <span class=\"token string-literal\"><span class=\"token string\">\"shell\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">path</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scripts/Provision.sh\"</span></span>\n    config<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>provision <span class=\"token string-literal\"><span class=\"token string\">\"shell\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">path</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Scripts/Worker.sh\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">run</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"always\"</span></span>\n\n    <span class=\"token number\">1.</span><span class=\"token number\">.4</span><span class=\"token punctuation\">.</span>times <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>index<span class=\"token operator\">|</span>\n    config<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>define <span class=\"token string-literal\"><span class=\"token string\">\"node</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">index</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>node<span class=\"token operator\">|</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>You should add public network to vm definition if you are using virtualbox, but for hyper-v there is no need to do it.</p>\n<p><strong>Scripts/Provision.sh</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token comment\"># Force Ubuntu use closest mirrors</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/apt/sources.list\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/apt/sources.list\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/apt/sources.list\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/apt/sources.list\n\n<span class=\"token comment\"># Install required software</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openjdk-7-jre firefox xvfb x-ttcidfont-conf xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic xserver-xorg-core\n<span class=\"token function\">wget</span> <span class=\"token string\">\"http://selenium-release.storage.googleapis.com/2.42/selenium-server-standalone-2.42.2.jar\"</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> selenium-server-standalone-2.42.2.jar /usr/local/bin/selenium-server-standalone.jar</code></pre></div>\n<p><strong>Scripts/Worker.sh</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">DISPLAY</span></span><span class=\"token operator\">=</span>:0\nXvfb :0 <span class=\"token parameter variable\">-screen</span> <span class=\"token number\">0</span> 1024x768x24 <span class=\"token parameter variable\">-ac</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">></span>/dev/null <span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">SELENIUM_HUB_IP</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>python /vagrant/Scripts/HubDiscover.py<span class=\"token variable\">`</span></span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> /usr/local/bin/selenium-server-standalone.jar <span class=\"token parameter variable\">-role</span> <span class=\"token function\">node</span> <span class=\"token parameter variable\">-hub</span> http://<span class=\"token variable\">$SELENIUM_HUB_IP</span>:4444/grid/register <span class=\"token parameter variable\">-browser</span> <span class=\"token string\">\"browserName=firefox, maxInstances=2\"</span> <span class=\"token operator\">&amp;</span></code></pre></div>\n<p><strong>Scripts/HubDiscover.py</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\n\n<span class=\"token comment\"># Send broadcast message</span>\nclient <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_BROADCAST<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;broadcast>'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">4444</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># Catch response</span>\nclient <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_BROADCAST<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4444</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmessage <span class=\"token punctuation\">,</span> address <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">4444</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span> address<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>"}},"pageContext":{"id":"fb6b03df-6725-5cb7-bd0e-3d0a7e29e2ce"}},"staticQueryHashes":[],"slicesMap":{}}