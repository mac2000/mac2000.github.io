{"componentChunkName":"component---src-templates-note-js","path":"/git-patch-for-notes/","result":{"data":{"remark":{"fields":{"path":"git-patch-for-notes"},"meta":{"title":""},"headings":[{"value":"Git patch for notes"}],"html":"<h1>Git patch for notes</h1>\n<p>Lets assume that we are playing with something and want it to be saved for later use.</p>\n<p>There is many options, from simples - copying files and saving them, to using git patches.</p>\n<p>Here is what it looks like:</p>\n<ol>\n<li>Setup your environment</li>\n<li>Init git repository on it and commit all files</li>\n<li>Switch to a new branch</li>\n<li>Develop your sample code</li>\n<li>Create path</li>\n</ol>\n<p>From now, you have patch that will allow you to reproduce all changes on new installation.</p>\n<p>Suppose you are configured your environment, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">composer</span> create-project laravel/laravel lara\n<span class=\"token builtin class-name\">cd</span> lara</code></pre></div>\n<p>Configure database, application etc, and:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'init'</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature</code></pre></div>\n<p>Make your changes</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'init'</span></code></pre></div>\n<p>Now you can export your changes to patch:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> format-patch master <span class=\"token parameter variable\">--stdout</span> <span class=\"token parameter variable\">--shortstat</span> --ignore-space-at-eol --ignore-space-change --ignore-all-space --ignore-blank-lines <span class=\"token operator\">></span> <span class=\"token punctuation\">..</span>/auth.patch</code></pre></div>\n<p>On other hand to apply patch you can run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> apply --ignore-space-change --ignore-whitespace <span class=\"token punctuation\">..</span>/auth.patch</code></pre></div>\n<p>Add <code class=\"language-text\">--check</code> option to see is it possible to apply patch at all.</p>\n<p>Here salme of patch file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">From 954554382f091fdbe10834edc6c28264fb516ff6 Mon Sep 17 00:00:00 2001\nFrom: Marchenko Alexandr &lt;marchenko.alexandr@gmail.com>\nDate: Fri, 20 Jun 2014 15:41:26 +0300\nSubject: [PATCH] init\n\n\n    8 files changed, 222 insertions(+), 2 deletions(-)\n\ndiff --git a/app/database/migrations/2014_06_19_124526_create_users_table.php b/app/database/migrations/2014_06_19_124526_create_users_table.php\nnew file mode 100644\nindex 0000000..8f695f3\n--- /dev/null\n+++ b/app/database/migrations/2014_06_19_124526_create_users_table.php\n@@ -0,0 +1,23 @@\n+&lt;?php\n+\n+use Illuminate\\Database\\Schema\\Blueprint;\n+use Illuminate\\Database\\Migrations\\Migration;\n+\n+class CreateUsersTable extends Migration\n+{\n+    public function up()\n+    {\n+        Schema::create('users', function(Blueprint $table){\n+            $table->increments('id');\n+            $table->string('email')->unique();\n+            $table->string('password');\n+            $table->string('remember_token', 100)->nullable();\n+            $table->timestamps();\n+        });\n+    }\n+\n+    public function down()\n+    {\n+        Schema::drop('users');\n+    }\n+}\ndiff --git a/app/database/seeds/DatabaseSeeder.php b/app/database/seeds/DatabaseSeeder.php\nindex 1989252..01cc3fd 100644\n--- a/app/database/seeds/DatabaseSeeder.php\n+++ b/app/database/seeds/DatabaseSeeder.php\n@@ -11,7 +11,8 @@ class DatabaseSeeder extends Seeder {\n        {\n            Eloquent::unguard();\n\n-       // $this->call('UserTableSeeder');\n+        $this->call('UserTableSeeder');\n+        $this->command->info('User table seeded!');\n        }\n\n    }\ndiff --git a/app/database/seeds/UserTableSeeder.php b/app/database/seeds/UserTableSeeder.php\nnew file mode 100644\nindex 0000000..43816a1\n--- /dev/null\n+++ b/app/database/seeds/UserTableSeeder.php\n@@ -0,0 +1,11 @@\n+&lt;?php\n+\n+class UserTableSeeder extends Seeder\n+{\n+    public function run()\n+    {\n+        DB::table('users')->delete();\n+\n+        User::create(['email' => 'admin@example.com', 'password' => Hash::make('admin')]);\n+    }\n+}\ndiff --git a/app/routes.php b/app/routes.php\nindex 3e10dcf..c27e168 100644\n--- a/app/routes.php\n+++ b/app/routes.php\n@@ -13,5 +13,66 @@\n\n    Route::get('/', function()\n    {\n-   return View::make('hello');\n+    return View::make('home');\n+});\n+\n+Route::get('login', function()\n+{\n+    return View::make('login');\n+});\n+\n+Route::post('login', function()\n+{\n+    $credentials = ['email' => Input::get('email'), 'password'=>Input::get('password')];\n+\n+    if (Auth::attempt($credentials, Input::get('remember', false))) {\n+        return Redirect::to('/')->with('message', 'You are now logged in!');\n+    } else {\n+        return Redirect::to('login')->with('message', 'Your username/password combination was incorrect')->withInput();\n+    }\n+});\n+\n+Route::get('logout', function()\n+{\n+    Auth::logout();\n+    return Redirect::to('/')->with('message', 'Your are now logged out!');\n+});\n+\n+Route::post('logout', function()\n+{\n+    Auth::logout();\n+    return Redirect::to('/')->with('message', 'Your are now logged out!');\n+});\n+\n+Route::get('register', function()\n+{\n+    return View::make('register');\n+});\n+\n+Route::post('register', function()\n+{\n+    $rules = [\n+    'email' => 'required|email|unique:users',\n+    'password' => 'required|alpha_num|between:1,255|confirmed',\n+    'password_confirmation' => 'required|alpha_num|between:1,255'\n+    ];\n+\n+    $validator = Validator::make(Input::all(), $rules);\n+\n+    if($validator->passes()) {\n+        $user = new User;\n+\n+        $user->email = Input::get('email');\n+        $user->password = Hash::make(Input::get('password'));\n+\n+        $user->save();\n+\n+        //return Redirect::to('login')->with('message', 'Thanks for registering!');\n+\n+        Auth::loginUsingId($user->id);\n+        return Redirect::to('/')->with('message', 'Thanks for registering!');\n+\n+    } else {\n+        return Redirect::to('register')->with('message', 'The following errors occurred')->withErrors($validator)->withInput();\n+    }\n    });\ndiff --git a/app/tests/AuthTest.php b/app/tests/AuthTest.php\nnew file mode 100644\nindex 0000000..1871600\n--- /dev/null\n+++ b/app/tests/AuthTest.php\n@@ -0,0 +1,66 @@\n+&lt;?php\n+\n+class AuthTest extends TestCase\n+{\n+    public function setUp()\n+    {\n+        parent::setUp();\n+        Artisan::call('migrate');\n+        $this->seed();\n+    }\n+\n+    public function testNotAuthorizedUserShouldSeeLoginButton()\n+    {\n+        $crawler = $this->client->request('GET', '/');\n+\n+        $this->assertResponseOk();\n+        $this->assertCount(1, $crawler->filter('a:contains(\"Login\")'));\n+    }\n+\n+    public function testAuthorizedUserShouldSeeLogoutButton()\n+    {\n+        $user = new User;\n+        $user->email = 'admin@example.com';\n+        $this->be($user);\n+\n+        $crawler = $this->client->request('GET', '/');\n+\n+        $this->assertResponseOk();\n+        $this->assertCount(1, $crawler->filter('a:contains(\"Logout\")'));\n+    }\n+\n+    public function testLoginFormValidation()\n+    {\n+        $this->call('POST', 'login', ['email' => '', 'password' => '']);\n+\n+        $this->assertRedirectedTo('login');\n+        $this->assertSessionHas('message');\n+    }\n+\n+    public function testRegisterFormValidation()\n+    {\n+        $this->call('POST', 'register', ['email' => '', 'password' => '', 'password_confirmation' => '']);\n+\n+        $this->assertRedirectedTo('register');\n+        $this->assertSessionHas('message');\n+        $this->assertSessionHasErrors();\n+    }\n+\n+    public function testRegistration()\n+    {\n+        $this->call('POST', 'register', ['email' => 'temp@temp.com', 'password' => '123', 'password_confirmation' => '123']);\n+\n+        $this->assertRedirectedTo('/');\n+        $this->assertSessionHas('message');\n+    }\n+\n+    public function testLogin()\n+    {\n+        User::create(['email' => 'user@example.com', 'password' => Hash::make('user')]);\n+\n+        $this->call('POST', 'login', ['email' => 'user@example.com', 'password' => 'user']);\n+\n+        $this->assertRedirectedTo('/');\n+        $this->assertSessionHas('message');\n+    }\n+}\ndiff --git a/app/views/home.blade.php b/app/views/home.blade.php\nnew file mode 100644\nindex 0000000..9157953\n--- /dev/null\n+++ b/app/views/home.blade.php\n@@ -0,0 +1,17 @@\n+@if(Session::has('message'))\n+&lt;p>{{ Session::get('message') }}&lt;/p>\n+@endif\n+\n+&lt;p>\n+    @if(!Auth::check())\n+    {{ HTML::link('register', 'Register') }}\n+    {{ HTML::link('login', 'Login') }}\n+    @else\n+    {{ HTML::link('logout', 'Logout') }}\n+\n+    {{ Form::open(['url' => 'logout', 'method' => 'post']) }}\n+    {{ Form::submit('Logout') }}\n+    {{ Form::close() }}\n+\n+    @endif\n+&lt;/p>\ndiff --git a/app/views/login.blade.php b/app/views/login.blade.php\nnew file mode 100644\nindex 0000000..5472a5e\n--- /dev/null\n+++ b/app/views/login.blade.php\n@@ -0,0 +1,17 @@\n+@if(Session::has('message'))\n+&lt;p>{{ Session::get('message') }}&lt;/p>\n+@endif\n+\n+{{ Form::open(['url' => 'login', 'method' => 'post']) }}\n+\n+{{ Form::label('email', 'Email') }}\n+{{ Form::email('email', Input::old('email')) }}\n+\n+{{ Form::label('password', 'Password') }}\n+{{ Form::password('password') }}\n+\n+{{ Form::checkbox('remember', true, Input::old('remember', true)) }}\n+\n+{{ Form::submit('Submit') }}\n+\n+{{ Form::close() }}\ndiff --git a/app/views/register.blade.php b/app/views/register.blade.php\nnew file mode 100644\nindex 0000000..ff93c1f\n--- /dev/null\n+++ b/app/views/register.blade.php\n@@ -0,0 +1,24 @@\n+@if(Session::has('message'))\n+&lt;p>{{ Session::get('message') }}&lt;/p>\n+@endif\n+\n+&lt;ul>\n+    @foreach($errors->all() as $error)\n+    &lt;li>{{ $error }}&lt;/li>\n+    @endforeach\n+&lt;/ul>\n+\n+{{ Form::open(['url' => 'register', 'method' => 'post']) }}\n+\n+{{ Form::label('email', 'Email') }}\n+{{ Form::email('email', Input::old('email')) }}\n+\n+{{ Form::label('password', 'Password') }}\n+{{ Form::password('password') }}\n+\n+{{ Form::label('password_confirmation', 'Password confirmation') }}\n+{{ Form::password('password_confirmation') }}\n+\n+{{ Form::submit('Submit') }}\n+\n+{{ Form::close() }}\n--\n1.9.2.msysgit.0</code></pre></div>\n<p>What is cool about this, is that you can write some kind of tool that will generate html from this...</p>"}},"pageContext":{"id":"995758b4-6d92-5ae6-be59-37896736ebe4"}},"staticQueryHashes":[],"slicesMap":{}}