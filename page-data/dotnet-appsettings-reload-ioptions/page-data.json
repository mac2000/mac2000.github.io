{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-appsettings-reload-ioptions/","result":{"data":{"remark":{"fields":{"path":"dotnet-appsettings-reload-ioptions"},"meta":{"title":""},"headings":[{"value":"dotnet appsettings reload"}],"html":"<h1>dotnet appsettings reload</h1>\n<p>following demo shows how appsettings properties can be reloaded</p>\n<p>the important thing here is that settings them selves are not something critical</p>\n<p>the question is what to do with all singletones that may depend on them and even worthe those registered dynamicaly</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Options</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// i'm here only for demo purposes to create separate file, it might be something like appsettings.foo.json instead</span>\nFile<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo.json\"</span><span class=\"token punctuation\">,</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> demo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Demo</span> <span class=\"token punctuation\">{</span> Number <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add one more configuration file side by side with appsettings.json</span>\nbuilder<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">optional</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">reloadOnChange</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// how we are usualy registering settings</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Demo<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConfiguration<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Demo<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// alternative approach, it can live side by side with previous one, it does not registers `Demo` but instead adds IOptions, IOptionsSnapshot and IOptionsMonitor</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Demo<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// how we are usualy working with configs</span>\n<span class=\"token comment\">// i wont be refreshed</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/singleton\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">Demo</span> demo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// curl localhost:5000/singleton</span>\n<span class=\"token comment\">// {\"number\":42}</span>\n\n<span class=\"token comment\">// alternative approach with IOptions</span>\n<span class=\"token comment\">// technicaly works same way as previous and wont be refreshed</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/options\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IOptions<span class=\"token punctuation\">&lt;</span>Demo<span class=\"token punctuation\">></span></span> demo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> demo<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// curl localhost:5000/options</span>\n<span class=\"token comment\">// {\"number\":42}</span>\n\n<span class=\"token comment\">// alternative approach with IOptionsSnapshot</span>\n<span class=\"token comment\">// i will be refreshed, BUT i will add some perf because computing on each request</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/snapshot\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IOptionsSnapshot<span class=\"token punctuation\">&lt;</span>Demo<span class=\"token punctuation\">></span></span> demo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> demo<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// curl localhost:5000/snapshot</span>\n<span class=\"token comment\">// {\"number\":42}</span>\n\n<span class=\"token comment\">// alternative approach with IOptionsSnapshot</span>\n<span class=\"token comment\">// i will be refreshed</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/monitor\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IOptionsMonitor<span class=\"token punctuation\">&lt;</span>Demo<span class=\"token punctuation\">></span></span> demo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> demo<span class=\"token punctuation\">.</span>CurrentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// curl localhost:5000/monitor</span>\n<span class=\"token comment\">// {\"number\":42}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\ncurl -s localhost:5000/singleton | jq\ncurl -s localhost:5000/options | jq\ncurl -s localhost:5000/snapshot | jq\ncurl -s localhost:5000/monitor | jq\n\necho -n '{\"demo\":{\"Number\":5}}' > demo.json\n\n# last two will be updated\n# https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options\n*/</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Number <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>after running this program we can check that all endpoints return expected response</p>\n<p>and then change settings file and see what and how endpoints responses will be changed</p>\n<p>all this was done on top of <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options\">options</a> documentation</p>"}},"pageContext":{"id":"d5b51873-1ba9-5593-837e-eeb33091b0da"}},"staticQueryHashes":[],"slicesMap":{}}