{"componentChunkName":"component---src-templates-note-js","path":"/c-split-list-to-equal-parts/","result":{"data":{"remark":{"fields":{"path":"c-split-list-to-equal-parts"},"meta":{"title":""},"headings":[{"value":"C# split list to equal parts"}],"html":"<h1>C# split list to equal parts</h1>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">/// &lt;summary></span>\n\n<span class=\"token comment\">/// Split any list to equal partitions</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token comment\">/// &lt;typeparam name=\"T\">&lt;/typeparam></span>\n<span class=\"token comment\">/// &lt;param name=\"list\">&lt;/param></span>\n<span class=\"token comment\">/// &lt;param name=\"totalPartitions\">&lt;/param></span>\n<span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token generic-method\"><span class=\"token function\">Partition</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> totalPartitions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalPartitions <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentOutOfRangeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalPartitions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> partitions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span>totalPartitions<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">Ceiling</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>totalPartitions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> partitions<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        partitions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">+</span> maxSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> list<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            partitions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        k <span class=\"token operator\">+=</span> maxSize<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> partitions<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"pageContext":{"id":"f92831c3-e294-528f-8a69-6b5f651631cf"}},"staticQueryHashes":[],"slicesMap":{}}