{"componentChunkName":"component---src-templates-note-js","path":"/go-oidc-verifier-azure-github/","result":{"data":{"remark":{"fields":{"path":"go-oidc-verifier-azure-github"},"meta":{"title":""},"headings":[{"value":"Golang OIDC verifier for Azure and Github Actions"}],"html":"<h1>Golang OIDC verifier for Azure and Github Actions</h1>\n<p><strong>Challenge:</strong> imagine you have some small rest api which you want to protect by requiring some kind of auth</p>\n<p>aka as simple as:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"curl localhost:8080\"</span><span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsecret <span class=\"token operator\">:=</span> <span class=\"token function\">retrieveSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">retrieveSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"I'm some secret we want to protect\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>The simples possible way is to add some check for secret being passed in header</p>\n<p>But it will require us to remember about it, rotate it, hide it, ...</p>\n<p>Instead we are going to protect this api with oidc</p>\n<p>For providers we are going to use Azure and GitHub</p>\n<p>In both cases we do not want to register any apps or doing something fancy, everything should just work out of the box without any specifics or configurations</p>\n<h2>Azure</h2>\n<p>For Azure our service should accept user access token that may be received like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">az account get-access-token <span class=\"token parameter variable\">--query</span> accessToken <span class=\"token parameter variable\">-o</span> tsv</code></pre></div>\n<p>Token will be something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://management.core.windows.net/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://sts.windows.net/695e0000-0000-0000-0000-000000000c41/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1710251613</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"nbf\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1710251613</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1710256394</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"acr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"aio\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AVQAq/...\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"amr\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mfa\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"appid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"04b07795-8ddb-461a-bbee-02f9e1bf7b46\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"appidacr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"family_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Marchenko\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"given_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alexandr\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"groups\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"00000000-0000-0000-0000-000000000001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000002\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000003\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"idtyp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alexandr Marchenko\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"oid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"57400000-0000-0000-0000-00000000c607\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"onprem_sid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"S-1-5-21-1282360863-452469976-1639649100-2204\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"puid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10037FFEAE2D019E\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rh\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.AR8AtWReaRMtqE67Eab9otYMQUZIf3kAutdPukPawfj2MBOFAJw.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user_impersonation\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8_1Al2XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEqa8\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"695e0000-0000-0000-0000-000000000c41\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"unique_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AlexandrM@example.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"upn\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AlexandrM@example.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"uti\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VqWW-xxxxxxxx_hhhhJ2AA\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ver\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"wids\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"62e90000-0000-0000-0000-000000005e10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b79f0000-0000-0000-0000-000000005509\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"xms_cae\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"xms_cc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CP1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"xms_filter_index\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"31\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"xms_rd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.42LlYBRilAcA\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"xms_ssm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"xms_tcdt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1528879851</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What is important here:</p>\n<ul>\n<li><code class=\"language-text\">iss</code> - issuer - who signed the token, will contain our tenant id - so if we were able to validate token we can be sure it is our user</li>\n<li><code class=\"language-text\">groups</code> - claim containing active directory groups user belongs to - can be used to restrict access even further</li>\n</ul>\n<p>Everything else in this concrete example does not matter</p>\n<p>Here is an example of verifying such token</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\n\toidc <span class=\"token string\">\"github.com/coreos/go-oidc\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttenantID <span class=\"token operator\">:=</span> <span class=\"token string\">\"695e0000-0000-0000-0000-000000000c41\"</span>\n\tctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ttoken <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> token <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No token provided\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tprovider<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> oidc<span class=\"token punctuation\">.</span><span class=\"token function\">NewProvider</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://sts.windows.net/\"</span><span class=\"token operator\">+</span>tenantID<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error creating OIDC provider:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tverifier <span class=\"token operator\">:=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">Verifier</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oidc<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>SkipClientIDCheck<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tidToken<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error verifying ID token:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Verified ID token: \"</span><span class=\"token punctuation\">,</span> idToken<span class=\"token punctuation\">.</span>Subject<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> claims <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\tGroups <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"groups\"`</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> idToken<span class=\"token punctuation\">.</span><span class=\"token function\">Claims</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\twanted <span class=\"token operator\">:=</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000001\"</span>\n\tfound <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> group <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> claims<span class=\"token punctuation\">.</span>Groups <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> group <span class=\"token operator\">==</span> wanted <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User is in group\"</span><span class=\"token punctuation\">,</span> wanted<span class=\"token punctuation\">)</span>\n\t\t\tfound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> found <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User is not in group\"</span><span class=\"token punctuation\">,</span> wanted<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Just replace <code class=\"language-text\">tenantID</code> and <code class=\"language-text\">wanted</code> identifiers and run it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>az account get-access-token <span class=\"token parameter variable\">--query</span> accessToken <span class=\"token parameter variable\">-o</span> tsv<span class=\"token variable\">)</span></span> go run azure/main.go</code></pre></div>\n<p>And if everything fine you will see an output like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Verified ID token:  8_1Al2....\nUser is in group 00000000-0000-0000-0000-000000000001\nOK</code></pre></div>\n<p>Things to note:</p>\n<ul>\n<li>We do not need to register any apps, for app to work we need to pass <code class=\"language-text\">SkipClientIDCheck</code> flag</li>\n<li>We can perform as complex checks as we want agains this token - main job ob verifying signature is done with help of <a href=\"https://github.com/coreos/go-oidc\">go-oidc</a></li>\n<li>This snippet can be easily copy pasted into our web service</li>\n</ul>\n<p>So ideally in future we will do something like</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>az account get-access-token <span class=\"token parameter variable\">--query</span> accessToken <span class=\"token parameter variable\">-o</span> tsv<span class=\"token variable\">)</span></span>\n<span class=\"token function\">curl</span> http://localhost:8000 <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span></code></pre></div>\n<h2>GitHub</h2>\n<p>From GitHub side we may want to call our service from withing GitHub actions</p>\n<p>While there is a way to authorize against Azure in Github actions we may want to stick with its tokens, once again to not register any apps and to not configure anything</p>\n<p>Here is an sample github action yaml that you may use to generate github token:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sample\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span> read\n  <span class=\"token comment\"># this one is required</span>\n  <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">sample</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/github<span class=\"token punctuation\">-</span>script@v6\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            core.getIDToken('HelloWorld').then(token => {\n              // just for demo purposes we are printing it as hex, otherwise github will mask the token\n              console.log(Buffer.from(token, 'utf8').toString('hex'))\n            })\n            //.then(token => {\n            //  core.setSecret(token)\n            //  core.setOutput('token', token)\n            //})</span></code></pre></div>\n<p>For demo purposes we are printing the token in hex format so we can copy it from logs, and decode with following snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hex <span class=\"token operator\">=</span> <span class=\"token string\">'65794a306....'</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">,</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></code></pre></div>\n<p>And the token will be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"jti\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8b780000-0000-0000-0000-00000000efa2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"repo:mac2000/mactemp:ref:refs/heads/main\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"refs/heads/main\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"185b51481a2a3e50f96a504a7e957bec7b1ec471\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000/mactemp\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_owner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_owner_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20000080\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"run_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8250335905\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"run_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"run_attempt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"private\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"73000094\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"actor_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"800008\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"actor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workflow\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sample\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"head_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"event_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"workflow_dispatch\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ref_protected\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ref_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"branch\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workflow_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000/mactemp/.github/workflows/sample.yml@refs/heads/main\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workflow_sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"185b51481a2a3e50f96a504a7e957bec7b1ec471\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"job_workflow_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000/mactemp/.github/workflows/sample.yml@refs/heads/main\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"job_workflow_sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"185b51481a2a3e50f96a504a7e957bec7b1ec471\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"runner_environment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"github-hosted\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://token.actions.githubusercontent.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"nbf\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1710252203</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1710253103</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1710252803</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Previously I already did something similar for token exchanger <a href=\"https://mac-blog.org.ua/github-token-exchanger/\">here</a></p>\n<p>So our goal now to do something similar we did for Azure, e.g.:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\n\toidc <span class=\"token string\">\"github.com/coreos/go-oidc\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttoken <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> token <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No token provided\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tprovider<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> oidc<span class=\"token punctuation\">.</span><span class=\"token function\">NewProvider</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://token.actions.githubusercontent.com\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error creating OIDC provider:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tverifier <span class=\"token operator\">:=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">Verifier</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oidc<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>SkipClientIDCheck<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tidToken<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error verifying ID token:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Verified ID token: \"</span><span class=\"token punctuation\">,</span> idToken<span class=\"token punctuation\">.</span>Subject<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>idToken<span class=\"token punctuation\">.</span>Subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"repo:mac2000/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not a repo:mac2000/* token\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfound <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> audience <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> idToken<span class=\"token punctuation\">.</span>Audience <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> audience <span class=\"token operator\">==</span> <span class=\"token string\">\"HelloWorld\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tfound <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> found <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid audience\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>To run this app - first we need to create an github action, receive hex encoded token, decode it, expose it as environment variable and only then run our app:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token string\">'xxxxxxx'</span>\ngo run github/main.go</code></pre></div>\n<p>output will be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Verified ID token:  repo:mac2000/mactemp:ref:refs/heads/main\nOK</code></pre></div>\n<p>Things to note:</p>\n<ul>\n<li>We use <code class=\"language-text\">HelloWorld</code> audience as a first level check, but everyone can create such token</li>\n<li>So as a second level check we are checking subject that is sticked to repository and restricts access to only us</li>\n<li>If everything passes we can be sure it is our repo and is signed by Github</li>\n</ul>\n<p>Later, it may be used in github something like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">core\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getIDToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">'acr'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://our-secret-service.mac-blog.org.ua'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Authorization</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">secret</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    core<span class=\"token punctuation\">.</span><span class=\"token function\">setSecret</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span>\n    core<span class=\"token punctuation\">.</span><span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'secret'</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So now the last part - put everthing together which should not be challenging at all, just extract functions and try to check incomming token against both providers, aka:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"errors\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\n\toidc <span class=\"token string\">\"github.com/coreos/go-oidc\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// this is our interface - aka token is valid or not</span>\n<span class=\"token keyword\">type</span> TokenVerifier <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> token <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// azure impl</span>\n<span class=\"token keyword\">type</span> AzureVerifier <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tprovider       <span class=\"token operator\">*</span>oidc<span class=\"token punctuation\">.</span>Provider\n\tallowedGroupID <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewAzureVerifier</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> tenantID <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> allowedGroupID <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>AzureVerifier<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tprovider<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> oidc<span class=\"token punctuation\">.</span><span class=\"token function\">NewProvider</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://login.microsoftonline.com/\"</span><span class=\"token operator\">+</span>tenantID<span class=\"token operator\">+</span><span class=\"token string\">\"/v2.0\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>AzureVerifier<span class=\"token punctuation\">{</span>provider<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">,</span> allowedGroupID<span class=\"token punctuation\">:</span> allowedGroupID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>AzureVerifier<span class=\"token punctuation\">)</span> <span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> token <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tverifier <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">Verifier</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oidc<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>SkipClientIDCheck<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tidToken<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> claims <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\tGroups <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"groups\"`</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> idToken<span class=\"token punctuation\">.</span><span class=\"token function\">Claims</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> group <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> claims<span class=\"token punctuation\">.</span>Groups <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> group <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>allowedGroupID <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not allowed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// github impl</span>\n<span class=\"token keyword\">type</span> GithubVerifier <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tprovider <span class=\"token operator\">*</span>oidc<span class=\"token punctuation\">.</span>Provider\n\towner    <span class=\"token builtin\">string</span>\n\taudience <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewGithubVerifier</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> owner <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> audience <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>GithubVerifier<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tprovider<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> oidc<span class=\"token punctuation\">.</span><span class=\"token function\">NewProvider</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://token.actions.githubusercontent.com\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>GithubVerifier<span class=\"token punctuation\">{</span>provider<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">:</span> owner<span class=\"token punctuation\">,</span> audience<span class=\"token punctuation\">:</span> audience<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>GithubVerifier<span class=\"token punctuation\">)</span> <span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> token <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tverifier <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">Verifier</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oidc<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>SkipClientIDCheck<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tidToken<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>idToken<span class=\"token punctuation\">.</span>Subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\"repo:\"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>owner<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not a repo:%s/* token\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> audience <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> idToken<span class=\"token punctuation\">.</span>Audience <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> audience <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>audience <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid audience\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getVerifiers</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>TokenVerifier<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tazure<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">NewAzureVerifier</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"695e0000-0000-0000-0000-000000000c41\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"00000000-0000-0000-0000-000000000001\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\tgithub<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">NewGithubVerifier</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mac2000\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>TokenVerifier<span class=\"token punctuation\">{</span>azure<span class=\"token punctuation\">,</span> github<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// our service</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tverifiers<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">getVerifiers</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"curl localhost:8080\"</span><span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// before responding with secret - check auth</span>\n\t\tauthorization <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">{</span>\n\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unauthorized\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusUnauthorized<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tverified <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> verifier <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> verifiers <span class=\"token punctuation\">{</span>\n\t\t\terr <span class=\"token operator\">=</span> verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> authorization<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tverified <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>verified <span class=\"token punctuation\">{</span>\n\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Forbidden\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusForbidden<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tsecret <span class=\"token operator\">:=</span> <span class=\"token function\">retrieveSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">retrieveSecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"I'm some secret we want to protect\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Obviously this one is not ideal and is not ment to be copy pasted but rather as an example for further ideas</p>\n<p>e.g. you may put it into dedicated packages, create dedicated verifier struct on top of it, hidding iteration, use wait groups to verify tokens simultaneosly and etc</p>\n<p>In my case main function takes almost half a minute to respond, that's why I do not care at all and leaving this for future.</p>"}},"pageContext":{"id":"57cd88af-e0b5-5580-bac1-1a60d4a2b067"}},"staticQueryHashes":[],"slicesMap":{}}