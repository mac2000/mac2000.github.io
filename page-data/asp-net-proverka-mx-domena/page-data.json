{"componentChunkName":"component---src-templates-note-js","path":"/asp-net-proverka-mx-domena/","result":{"data":{"remark":{"fields":{"path":"asp-net-proverka-mx-domena"},"meta":{"title":""},"headings":[{"value":"Asp.Net проверка MX домена"}],"html":"<h1>Asp.Net проверка MX домена</h1>\n<p>Частенько в при создании мало мальски больших веб приложений, приходиться возиться с пользователями, в частности с регистрацией, и отсеиванием всякого рода ботов. Поступила задача проверки MX записей домена, email которого пользователь выдает за свой.Да конечно можно отсылать email для подтверждения регистрации – но мы ведь никогда не ищем простых путей.</p>\n<p>Дале сам пример:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email <span class=\"token operator\">=</span> txtEmail<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> parts <span class=\"token operator\">=</span> email<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemail <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span>parts<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> command <span class=\"token operator\">=</span> <span class=\"token string\">\"nslookup -type=MX \"</span> <span class=\"token operator\">+</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>ProcessStartInfo</span> procStartInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>ProcessStartInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c \"</span> <span class=\"token operator\">+</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    procStartInfo<span class=\"token punctuation\">.</span>RedirectStandardOutput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    procStartInfo<span class=\"token punctuation\">.</span>UseShellExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    procStartInfo<span class=\"token punctuation\">.</span>CreateNoWindow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span> proc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    proc<span class=\"token punctuation\">.</span>StartInfo <span class=\"token operator\">=</span> procStartInfo<span class=\"token punctuation\">;</span>\n    proc<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>StandardOutput<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> resparts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"\\r\\n\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> StringSplitOptions<span class=\"token punctuation\">.</span>RemoveEmptyEntries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resparts<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> resparts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server: \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> resparts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> lblRes<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Domain not exists\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-existent domain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> lblRes<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Domain not exists\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DNS request timed out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> lblRes<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Timeout\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> lblRes<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n\n    lblRes<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;br />&lt;br />\"</span> <span class=\"token operator\">+</span> command<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> objException<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    lblRes<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> objException<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Естественно, код \"грязный\" и требует доработки – но может стать отправной точкой для более изящных решений.</p>"}},"pageContext":{"id":"56d80e09-7070-54e5-a8e1-5258e16e9db4"}},"staticQueryHashes":[],"slicesMap":{}}