{"componentChunkName":"component---src-templates-note-js","path":"/sql-sp-xml/","result":{"data":{"remark":{"fields":{"path":"sql-sp-xml"},"meta":{"title":""},"headings":[{"value":"XML as Stored Procedure parameter in SQL Server"}],"html":"<h1>XML as Stored Procedure parameter in SQL Server</h1>\n<p>Did you ever tried to pass arrays into stored procedures or may be complex types or just tried to convert types and join lines?</p>\n<p>SQL Server starting from 2005 has support for XML which will allow you to make things happen.</p>\n<p>Here is few examples.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">IF</span> OBJECT_ID<span class=\"token punctuation\">(</span><span class=\"token string\">'spXmlSampleSimple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> spXmlSampleSimple\nGO\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> spXmlSampleSimple<span class=\"token punctuation\">(</span><span class=\"token variable\">@Order</span> XML<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">AS</span>\n\n<span class=\"token comment\">-- Retrive single values</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@OrderID</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@ManagerID</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@OrderID</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@Order.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/Order[1]/OrderID[1]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@ManagerID</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@Order.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/Order[1]/Manager[1]/ManagerID[1]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@OrderID</span> <span class=\"token keyword\">AS</span> OrderID<span class=\"token punctuation\">,</span> <span class=\"token variable\">@ManagerID</span> <span class=\"token keyword\">AS</span> ManagerID<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Arrays</span>\n<span class=\"token keyword\">SELECT</span> Phones<span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'NVARCHAR(20)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> CustomerPhones <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@Order.nodes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//Phone'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Phones<span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Arrays into table</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@Phones</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">(</span>Phones NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@Phones</span><span class=\"token punctuation\">(</span>Phones<span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> Phones<span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'NVARCHAR(20)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@Order.nodes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//Phone'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Phones<span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@Phones</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Aggregations</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@ItemsCount</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@ItemsCount</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@Order.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count(/Order/Items/Item)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@ItemsCount</span> <span class=\"token keyword\">AS</span> ItemsCount<span class=\"token punctuation\">;</span>\nGO\n\n<span class=\"token keyword\">EXEC</span> spXmlSampleSimple <span class=\"token variable\">@Order</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\n&lt;Order>\n    &lt;OrderID>123&lt;/OrderID>\n    &lt;Manager>\n        &lt;ManagerID>1&lt;/ManagerID>\n        &lt;Email>sales@rabota.ua&lt;/Email>\n    &lt;/Manager>\n    &lt;Customer>\n        &lt;Phones>\n            &lt;Phone>0919315555&lt;/Phone>\n            &lt;Phone>0445340940&lt;/Phone>\n        &lt;/Phones>\n    &lt;/Customer>\n    &lt;Items>\n        &lt;Item>\n            &lt;ItemID>2&lt;/ItemID>\n            &lt;Quantity>1&lt;/Quantity>\n        &lt;/Item>\n        &lt;Item>\n            &lt;ItemID>3&lt;/ItemID>\n            &lt;Quantity>2&lt;/Quantity>\n        &lt;/Item>\n    &lt;/Items>\n&lt;/Order>\n'</span></code></pre></div>\n<p>This is simple domanstration of how can you pass xml serialized C# object right into stored procedure, and what is most important from now on you may not sync parameters and convert types by hand.</p>\n<p>And here is even more complex example demonstrating xml schema which will validate input xml before doing anything</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">IF</span> OBJECT_ID<span class=\"token punctuation\">(</span><span class=\"token string\">'spXmlSampleComplex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'P'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> spXmlSampleComplex\nGO\n\n<span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sys<span class=\"token punctuation\">.</span>xml_schema_collections <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'OrderSchema'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DROP</span> XML <span class=\"token keyword\">SCHEMA</span> COLLECTION OrderSchema\nGO\n\n<span class=\"token keyword\">CREATE</span> XML <span class=\"token keyword\">SCHEMA</span> COLLECTION OrderSchema <span class=\"token keyword\">AS</span> <span class=\"token string\">'&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n    &lt;xs:element name=\"Order\">\n        &lt;xs:complexType>\n            &lt;xs:sequence>\n                &lt;xs:element name=\"OrderID\" minOccurs=\"1\" maxOccurs=\"1\"  type=\"xs:positiveInteger\" />\n\n                &lt;xs:element name=\"Manager\" minOccurs=\"1\" maxOccurs=\"1\">\n                    &lt;xs:complexType>\n                        &lt;xs:all>\n                            &lt;xs:element name=\"ManagerID\" minOccurs=\"1\" maxOccurs=\"1\"  type=\"xs:positiveInteger\" />\n                            &lt;xs:element name=\"Email\" type=\"EmailAddress\" minOccurs=\"1\" maxOccurs=\"1\"/>\n                        &lt;/xs:all>\n                    &lt;/xs:complexType>\n                &lt;/xs:element>\n\n                &lt;xs:element name=\"Customer\" minOccurs=\"1\" maxOccurs=\"1\">\n                    &lt;xs:complexType>\n                        &lt;xs:all>\n                            &lt;xs:element name=\"Phones\" minOccurs=\"1\" maxOccurs=\"1\">\n                                &lt;xs:complexType>\n                                    &lt;xs:sequence>\n                                        &lt;xs:element name=\"Phone\" type=\"PhoneString\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n                                    &lt;/xs:sequence>\n                                &lt;/xs:complexType>\n                            &lt;/xs:element>\n                        &lt;/xs:all>\n                    &lt;/xs:complexType>\n                &lt;/xs:element>\n\n                &lt;xs:element name=\"Items\" minOccurs=\"1\" maxOccurs=\"1\">\n                    &lt;xs:complexType>\n                        &lt;xs:sequence>\n                            &lt;xs:element name=\"Item\" minOccurs=\"1\" maxOccurs=\"unbounded\">\n                                &lt;xs:complexType>\n                                    &lt;xs:all>\n                                        &lt;xs:element name=\"ItemID\" minOccurs=\"1\" maxOccurs=\"1\"  type=\"xs:positiveInteger\" />\n                                        &lt;xs:element name=\"Quantity\" minOccurs=\"1\" maxOccurs=\"1\"  type=\"xs:positiveInteger\" />\n                                    &lt;/xs:all>\n                                &lt;/xs:complexType>\n                            &lt;/xs:element>\n                        &lt;/xs:sequence>\n                    &lt;/xs:complexType>\n                &lt;/xs:element>\n\n            &lt;/xs:sequence>\n        &lt;/xs:complexType>\n    &lt;/xs:element>\n    &lt;xs:simpleType name=\"positiveDecimal\">\n        &lt;xs:restriction base=\"xs:decimal\">\n            &lt;xs:minExclusive value=\"0\"/>\n            &lt;xs:fractionDigits value=\"2\"/>\n        &lt;/xs:restriction>\n    &lt;/xs:simpleType>\n    &lt;xs:simpleType name=\"NonEmptyString\">\n        &lt;!-- we can describe our types separately to reuse them later -->\n        &lt;xs:restriction base=\"xs:string\">\n            &lt;xs:minLength value=\"1\" />\n            &lt;xs:pattern value=\".*[^\\s].*\" />\n        &lt;/xs:restriction>\n    &lt;/xs:simpleType>\n    &lt;xs:simpleType name=\"EmailAddress\">\n        &lt;xs:restriction base=\"xs:string\">\n            &lt;xs:pattern value=\"[^@]+@[^\\.]+\\..+\"/>\n        &lt;/xs:restriction>\n    &lt;/xs:simpleType>\n    &lt;xs:simpleType name=\"PhoneString\">\n        &lt;xs:restriction base=\"xs:string\">\n            &lt;xs:pattern value=\"[0-9]{10}\"/>\n        &lt;/xs:restriction>\n    &lt;/xs:simpleType>\n&lt;/xs:schema>'</span>\nGO\n\n\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@xml</span> XML<span class=\"token punctuation\">(</span>OrderSchema<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@xml</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;Order>\n    &lt;OrderID>123&lt;/OrderID>\n    &lt;Manager>\n        &lt;ManagerID>1&lt;/ManagerID>\n        &lt;Email>sales@rabota.ua&lt;/Email>\n    &lt;/Manager>\n    &lt;Customer>\n        &lt;Phones>\n            &lt;Phone>0919315555&lt;/Phone>\n            &lt;Phone>0445340940&lt;/Phone>\n        &lt;/Phones>\n    &lt;/Customer>\n    &lt;Items>\n        &lt;Item>\n            &lt;ItemID>2&lt;/ItemID>\n            &lt;Quantity>1&lt;/Quantity>\n        &lt;/Item>\n        &lt;Item>\n            &lt;ItemID>3&lt;/ItemID>\n            &lt;Quantity>2&lt;/Quantity>\n        &lt;/Item>\n    &lt;/Items>\n&lt;/Order>\n'</span>\n\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@xml.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/Order[1]/Items[1]/Item[1]/ItemID[1]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGO\n\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> spXmlSampleComplex<span class=\"token punctuation\">(</span><span class=\"token variable\">@Order</span> XML<span class=\"token punctuation\">(</span>OrderSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">AS</span>\n\n<span class=\"token comment\">-- Retrive single values</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@OrderID</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@ManagerID</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@OrderID</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@Order.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/Order[1]/OrderID[1]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@ManagerID</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@Order.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/Order[1]/Manager[1]/ManagerID[1]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@OrderID</span> <span class=\"token keyword\">AS</span> OrderID<span class=\"token punctuation\">,</span> <span class=\"token variable\">@ManagerID</span> <span class=\"token keyword\">AS</span> ManagerID<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Arrays</span>\n<span class=\"token keyword\">SELECT</span> Phones<span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'NVARCHAR(20)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> CustomerPhones <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@Order.nodes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//Phone'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Phones<span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Arrays into table</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@Phones</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">(</span>Phones NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@Phones</span><span class=\"token punctuation\">(</span>Phones<span class=\"token punctuation\">)</span> <span class=\"token keyword\">SELECT</span> Phones<span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'NVARCHAR(20)'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@Order.nodes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//Phone'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Phones<span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@Phones</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Aggregations</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@ItemsCount</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@ItemsCount</span> <span class=\"token operator\">=</span> <span class=\"token variable\">@Order.value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count(/Order/Items/Item)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'INT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@ItemsCount</span> <span class=\"token keyword\">AS</span> ItemsCount<span class=\"token punctuation\">;</span>\nGO\n\n<span class=\"token keyword\">EXEC</span> spXmlSampleComplex <span class=\"token variable\">@Order</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\n&lt;Order>\n    &lt;OrderID>123&lt;/OrderID>\n    &lt;Manager>\n        &lt;ManagerID>1&lt;/ManagerID>\n        &lt;Email>sales@rabota.ua&lt;/Email>\n    &lt;/Manager>\n    &lt;Customer>\n        &lt;Phones>\n            &lt;Phone>0919315555&lt;/Phone>\n            &lt;Phone>0445340940&lt;/Phone>\n        &lt;/Phones>\n    &lt;/Customer>\n    &lt;Items>\n        &lt;Item>\n            &lt;ItemID>2&lt;/ItemID>\n            &lt;Quantity>1&lt;/Quantity>\n        &lt;/Item>\n        &lt;Item>\n            &lt;ItemID>3&lt;/ItemID>\n            &lt;Quantity>2&lt;/Quantity>\n        &lt;/Item>\n    &lt;/Items>\n&lt;/Order>\n'</span></code></pre></div>\n<p>From a C# perspective code will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Newtonsoft<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>SqlClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Xml</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Xml<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">XmlSample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> OrderID <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Manager</span> Manager <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Customer</span> Customer <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Item<span class=\"token punctuation\">></span></span> Items <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ManagerID <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Email <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">XmlArrayItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Phone\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> Phones <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ItemID <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Quantity <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Order</span>\n            <span class=\"token punctuation\">{</span>\n                OrderID <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n                Manager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Manager</span>\n                <span class=\"token punctuation\">{</span>\n                    ManagerID <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    Email <span class=\"token operator\">=</span> <span class=\"token string\">\"sales@rabota.ua\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                Customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Customer</span>\n                <span class=\"token punctuation\">{</span>\n                    Phones <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token string\">\"0919315555\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"0445340940\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                Items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Item<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Item</span>\n                    <span class=\"token punctuation\">{</span>\n                        ItemID <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                        Quantity <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Item</span>\n                    <span class=\"token punctuation\">{</span>\n                        ItemID <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n                        Quantity <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INPUT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OUTPUT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dataSet <span class=\"token operator\">=</span> <span class=\"token function\">spXmlSampleComplex</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>JsonConvert<span class=\"token punctuation\">.</span><span class=\"token function\">SerializeObject</span><span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">,</span> Newtonsoft<span class=\"token punctuation\">.</span>Json<span class=\"token punctuation\">.</span>Formatting<span class=\"token punctuation\">.</span>Indented<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> xmlSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Order</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> xmlWriter <span class=\"token operator\">=</span> XmlWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlWriterSettings</span> <span class=\"token punctuation\">{</span> Indent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                xmlSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>xmlWriter<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">DataSet</span> <span class=\"token function\">spXmlSampleComplex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">DataSet</span> dataSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnectionStringBuilder</span> <span class=\"token punctuation\">{</span> InitialCatalog <span class=\"token operator\">=</span> <span class=\"token string\">\"Play\"</span><span class=\"token punctuation\">,</span> IntegratedSecurity <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spXmlSampleComplex\"</span><span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> CommandType <span class=\"token operator\">=</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    command<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@Order\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">SqlDataAdapter</span> dataAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlDataAdapter</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    dataAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> dataSet<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which will output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INPUT\n-------------------------------------\n&lt;?xml version=\"1.0\" encoding=\"utf-16\"?>\n&lt;Order xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    &lt;OrderID>123&lt;/OrderID>\n    &lt;Manager>\n    &lt;ManagerID>1&lt;/ManagerID>\n    &lt;Email>sales@rabota.ua&lt;/Email>\n    &lt;/Manager>\n    &lt;Customer>\n    &lt;Phones>\n        &lt;Phone>0919315555&lt;/Phone>\n        &lt;Phone>0445340940&lt;/Phone>\n    &lt;/Phones>\n    &lt;/Customer>\n    &lt;Items>\n    &lt;Item>\n        &lt;ItemID>2&lt;/ItemID>\n        &lt;Quantity>1&lt;/Quantity>\n    &lt;/Item>\n    &lt;Item>\n        &lt;ItemID>3&lt;/ItemID>\n        &lt;Quantity>2&lt;/Quantity>\n    &lt;/Item>\n    &lt;/Items>\n&lt;/Order>\n\n\nOUTPUT\n-------------------------------------\n{\n    \"Table\": [\n    {\n        \"OrderID\": 123,\n        \"ManagerID\": 1\n    }\n    ],\n    \"Table1\": [\n    {\n        \"CustomerPhones\": \"0919315555\"\n    },\n    {\n        \"CustomerPhones\": \"0445340940\"\n    }\n    ],\n    \"Table2\": [\n    {\n        \"Phones\": \"0919315555\"\n    },\n    {\n        \"Phones\": \"0445340940\"\n    }\n    ],\n    \"Table3\": [\n    {\n        \"ItemsCount\": 2\n    }\n    ]\n}</code></pre></div>\n<p>Just checked this froks from SQL 2005 up to SQL 2016.</p>\n<p>You can even try to implement some crazy stuff like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoredProcedure<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> input<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> xmlSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> xmlWriter <span class=\"token operator\">=</span> XmlWriter<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlWriterSettings</span> <span class=\"token punctuation\">{</span> Indent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            xmlSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>xmlWriter<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">DataSet</span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> input<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CallerMemberName</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> storedProcedure <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> storedProcedurePrefix <span class=\"token operator\">=</span> <span class=\"token string\">\"sp\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DataSet</span> dataSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnectionStringBuilder</span> <span class=\"token punctuation\">{</span> InitialCatalog <span class=\"token operator\">=</span> <span class=\"token string\">\"Play\"</span><span class=\"token punctuation\">,</span> IntegratedSecurity <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlCommand</span><span class=\"token punctuation\">(</span>storedProcedurePrefix <span class=\"token operator\">+</span> storedProcedure<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> CommandType <span class=\"token operator\">=</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                command<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">SqlDataAdapter</span> dataAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlDataAdapter</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dataAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dataSet<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StoredProcedure</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">DataSet</span> <span class=\"token function\">XmlSampleSimple</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> StoredProcedure<span class=\"token operator\">&lt;</span>Order<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">DataSet</span> <span class=\"token function\">XmlSampleComplex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> StoredProcedure<span class=\"token operator\">&lt;</span>Order<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now your call will be as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dataSet1 <span class=\"token operator\">=</span> StoredProcedure<span class=\"token punctuation\">.</span><span class=\"token function\">XmlSampleSimple</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dataSet2 <span class=\"token operator\">=</span> StoredProcedure<span class=\"token punctuation\">.</span><span class=\"token function\">XmlSampleComplex</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And if your stored procedure will retrieve XML also magic can happen :)</p>"}},"pageContext":{"id":"2dbf8cd3-fa74-59d1-ba48-40fbc0dafcae"}},"staticQueryHashes":[],"slicesMap":{}}