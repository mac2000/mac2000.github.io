{"componentChunkName":"component---src-templates-note-js","path":"/github-app-jwt/","result":{"data":{"remark":{"fields":{"path":"github-app-jwt"},"meta":{"title":""},"headings":[{"value":"GitHub App generating JWT"}],"html":"<h1>GitHub App generating JWT</h1>\n<p>Some of GitHub API like <a href=\"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks#types-of-status-checks-on-github\">status checks</a> requires GitHub App</p>\n<p>In general it is almost the same as using REST API but there is one caveat - generating an access token - it is like a night mare</p>\n<p>Things becomes worse because it is needed not often and each time become pain</p>\n<p>That's why going to put some notes after yet another time going thru seven rounds of hell trying to figure out hot it should be done</p>\n<p>Let's pretend he have created and installend an app, as well as granted required permissions to it</p>\n<p>We should have following info (in all next examples we expect this is accessible as environment variables)</p>\n<ul>\n<li><code class=\"language-text\">APP_ID</code> - can be found at url like this: <code class=\"language-text\">https://github.com/organizations/{ORG}/settings/apps/{APP_NAME}</code></li>\n<li><code class=\"language-text\">INSTALLATION_ID</code> - can be found at installations page <code class=\"language-text\">https://github.com/organizations/{ORG}/settings/apps/{APP_NAME}/installations</code>, just navigate to intallation and grab your id from an url</li>\n<li><code class=\"language-text\">PRIVATE_KEY</code> - path to downloaded private key, it will have name like <code class=\"language-text\">my-awesome-app.2023-12-14.private-key.pem</code> and conctent like <code class=\"language-text\">-----BEGIN RSA PRIVATE KEY-----.......</code></li>\n</ul>\n<h2>Example: Using Python to generate a JWT</h2>\n<p>Before doing anything else we need an baseline to check if things works at all</p>\n<p>So I am taking an example from docs for python</p>\n<p>Here is an script:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> jwt\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> requests\n\nprivate_key <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>jwk_from_pem<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"PRIVATE_KEY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp_id <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"APP_ID\"</span><span class=\"token punctuation\">)</span>\ninstallation_id <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"INSTALLATION_ID\"</span><span class=\"token punctuation\">)</span>\n\npayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'iat'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'exp'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'iss'</span><span class=\"token punctuation\">:</span> app_id\n<span class=\"token punctuation\">}</span>\n\nencoder <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>JWT<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nencoded <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> private_key<span class=\"token punctuation\">,</span> alg<span class=\"token operator\">=</span><span class=\"token string\">'RS256'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jwt:'</span><span class=\"token punctuation\">,</span> encoded<span class=\"token punctuation\">)</span>\n\ntoken <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"https://api.github.com/app/installations/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>installation_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">/access_tokens\"</span></span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Bearer </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encoded<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token:'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n\nmeta <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/meta\"</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Bearer </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>token<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'meta:'</span><span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span></code></pre></div></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python3 <span class=\"token parameter variable\">-m</span> venv\n<span class=\"token builtin class-name\">source</span> ./venv/bin/activate\npip <span class=\"token function\">install</span> jwt\npython sample.py\n<span class=\"token assign-left variable\">APP_ID</span><span class=\"token operator\">=</span><span class=\"token number\">123</span> <span class=\"token assign-left variable\">INSTALLATION_ID</span><span class=\"token operator\">=</span><span class=\"token number\">456</span> <span class=\"token assign-left variable\">PRIVATE_KEY</span><span class=\"token operator\">=</span>privatekey.pem python sample.py</code></pre></div>\n<p>If everything fine, output should be:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">jwt:</span> <span class=\"token operator\">&lt;</span>token signed by private key<span class=\"token operator\">></span>\n<span class=\"token property\">token:</span> <span class=\"token operator\">&lt;</span>exchanged access token<span class=\"token operator\">></span>\n<span class=\"token property\">meta:</span> <span class=\"token number\">200</span></code></pre></div>\n<blockquote>\n<p>Note that <code class=\"language-text\">https://api.github.com/meta</code> is accessible by anonymous users, but if you will try to access it with wrong token you will receive an bad credentials error</p>\n</blockquote>\n<h2>Example: Using JavaScript to generate a JWT</h2>\n<p>Not it become little bit easy, here is an notjs example of the same test</p>\n<p><div class=\"gatsby-highlight\" data-language=\"mjs\"><pre class=\"language-mjs\"><code class=\"language-mjs\">import crypto from &#39;crypto&#39;\nimport fs from &#39;fs&#39;\n\nvar app_id = process.env.APP_ID\nvar installation_id = process.env.INSTALLATION_ID\nvar private_key = process.env.PRIVATE_KEY\n\nvar header = Buffer.from(\n  JSON.stringify({\n    typ: &#39;JWT&#39;,\n    alg: &#39;RS256&#39;,\n  })\n).toString(&#39;base64url&#39;)\n\nvar payload = Buffer.from(\n  JSON.stringify({\n    iat: Math.floor(Date.now() / 1000) - 10,\n    exp: Math.floor(Date.now() / 1000) + 600,\n    iss: app_id,\n  })\n).toString(&#39;base64url&#39;)\n\nconst signature = crypto.createSign(&#39;RSA-SHA256&#39;).update(`${header}.${payload}`).sign(fs.readFileSync(private_key, &#39;utf8&#39;), &#39;base64url&#39;)\nvar jwt = `${header}.${payload}.${signature}`\nconsole.log(&#39;jwt:&#39;, jwt)\n\nvar { token } = await fetch(`https://api.github.com/app/installations/${installation_id}/access_tokens`, { method: &#39;POST&#39;, headers: { authorization: `Bearer ${jwt}` } }).then(r =&gt; r.json())\nconsole.log(&#39;token:&#39;, token)\n\nconst meta = await fetch(&#39;https://api.github.com/meta&#39;, { headers: { authorization: `Bearer ${token}` } })\nconsole.log(&#39;meta:&#39;, meta.status)</code></pre></div></p>\n<p>And its usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">APP_ID</span><span class=\"token operator\">=</span><span class=\"token number\">123</span> <span class=\"token assign-left variable\">INSTALLATION_ID</span><span class=\"token operator\">=</span><span class=\"token number\">456</span> <span class=\"token assign-left variable\">PRIVATE_KEY</span><span class=\"token operator\">=</span>privatekey.pem <span class=\"token function\">node</span> sample.mjs</code></pre></div>\n<blockquote>\n<p>Note: there is no need to install any 3rd party dependencies so it should work out of the box</p>\n</blockquote>\n<h2>Example: Using C# to generate a JWT</h2>\n<p>Before proceeding to next example, here is one more for C#</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Cryptography</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app_id <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"APP_ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> private_key <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PRIVATE_KEY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> installation_id <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSTALLATION_ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> head <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span>\n<span class=\"token punctuation\">{</span>\n    alg <span class=\"token operator\">=</span> <span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">,</span>\n    typ <span class=\"token operator\">=</span> <span class=\"token string\">\"JWT\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TrimEnd</span><span class=\"token punctuation\">(</span><span class=\"token char\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> payload <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span>JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span>\n<span class=\"token punctuation\">{</span>\n    iat <span class=\"token operator\">=</span> DateTimeOffset<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">.</span><span class=\"token function\">ToUnixTimeSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    exp <span class=\"token operator\">=</span> DateTimeOffset<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">.</span><span class=\"token function\">AddMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToUnixTimeSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    iss <span class=\"token operator\">=</span> app_id\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TrimEnd</span><span class=\"token punctuation\">(</span><span class=\"token char\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rsa <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrsa<span class=\"token punctuation\">.</span><span class=\"token function\">ImportFromPem</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>private_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> signature <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>rsa<span class=\"token punctuation\">.</span><span class=\"token function\">SignData</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">head</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">payload</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> HashAlgorithmName<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">,</span> RSASignaturePadding<span class=\"token punctuation\">.</span>Pkcs1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TrimEnd</span><span class=\"token punctuation\">(</span><span class=\"token char\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> jwt <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">head</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">payload</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">signature</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"jwt: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">jwt</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclient<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>AuthenticationHeaderValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span> jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span>UserAgent<span class=\"token punctuation\">.</span><span class=\"token function\">ParseAdd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mozilla/5.0 (compatible; AcmeInc/1.0)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsync</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"https://api.github.com/app/installations/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">installation_id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/access_tokens\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> token <span class=\"token operator\">=</span> JsonDocument<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>RootElement<span class=\"token punctuation\">.</span><span class=\"token function\">GetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"token: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">token</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclient<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>AuthenticationHeaderValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.github.com/meta\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"meta: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">response<span class=\"token punctuation\">.</span>StatusCode</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></p>\n<p>Usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">APP_ID</span><span class=\"token operator\">=</span><span class=\"token number\">123</span> <span class=\"token assign-left variable\">INSTALLATION_ID</span><span class=\"token operator\">=</span><span class=\"token number\">456</span> <span class=\"token assign-left variable\">PRIVATE_KEY</span><span class=\"token operator\">=</span>privatekey.pem dotnet run</code></pre></div>\n<p>and finaly</p>\n<h2>Example: Using PowerShell to generate a JWT</h2>\n<p><div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$app_id</span> = <span class=\"token variable\">$env</span>:APP_ID\n<span class=\"token variable\">$installation_id</span> = <span class=\"token variable\">$env</span>:INSTALLATION_ID\n<span class=\"token variable\">$private_key</span> = <span class=\"token variable\">$env</span>:PRIVATE_KEY\n\n<span class=\"token variable\">$header</span> = <span class=\"token namespace\">[Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token namespace\">[System.Text.Encoding]</span>::UTF8<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">ConvertTo-Json</span> <span class=\"token operator\">-</span>InputObject @<span class=\"token punctuation\">{</span>\n        alg = <span class=\"token string\">\"RS256\"</span>\n        typ = <span class=\"token string\">\"JWT\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TrimEnd<span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$payload</span> = <span class=\"token namespace\">[Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token namespace\">[System.Text.Encoding]</span>::UTF8<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">ConvertTo-Json</span> <span class=\"token operator\">-</span>InputObject @<span class=\"token punctuation\">{</span>\n        iat = <span class=\"token namespace\">[System.DateTimeOffset]</span>::UtcNow<span class=\"token punctuation\">.</span>AddSeconds<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ToUnixTimeSeconds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        exp = <span class=\"token namespace\">[System.DateTimeOffset]</span>::UtcNow<span class=\"token punctuation\">.</span>AddMinutes<span class=\"token punctuation\">(</span>10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ToUnixTimeSeconds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        iss = <span class=\"token variable\">$app_id</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TrimEnd<span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$rsa</span> = <span class=\"token namespace\">[System.Security.Cryptography.RSA]</span>::Create<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$rsa</span><span class=\"token punctuation\">.</span>ImportFromPem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get-Content</span> <span class=\"token variable\">$private_key</span> <span class=\"token operator\">-</span>Raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token variable\">$signature</span> = <span class=\"token namespace\">[Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$rsa</span><span class=\"token punctuation\">.</span>SignData<span class=\"token punctuation\">(</span><span class=\"token namespace\">[System.Text.Encoding]</span>::UTF8<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token variable\">$header</span>.<span class=\"token variable\">$payload</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[System.Security.Cryptography.HashAlgorithmName]</span>::SHA256<span class=\"token punctuation\">,</span> <span class=\"token namespace\">[System.Security.Cryptography.RSASignaturePadding]</span>::Pkcs1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TrimEnd<span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Replace<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$jwt</span> = <span class=\"token string\">\"<span class=\"token variable\">$header</span>.<span class=\"token variable\">$payload</span>.<span class=\"token variable\">$signature</span>\"</span>\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">\"jwt: <span class=\"token variable\">$jwt</span>\"</span>\n\n<span class=\"token variable\">$token</span> = <span class=\"token function\">Invoke-RestMethod</span> <span class=\"token operator\">-</span>Method Post <span class=\"token string\">\"https://api.github.com/app/installations/<span class=\"token variable\">$installation_id</span>/access_tokens\"</span> <span class=\"token operator\">-</span>Headers @<span class=\"token punctuation\">{</span> Authorization = <span class=\"token string\">\"Bearer <span class=\"token variable\">$jwt</span>\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Select-Object</span> <span class=\"token operator\">-</span>ExpandProperty token\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">\"token: <span class=\"token variable\">$token</span>\"</span>\n\n<span class=\"token variable\">$meta</span> = <span class=\"token function\">Invoke-WebRequest</span> <span class=\"token string\">\"https://api.github.com/meta\"</span> <span class=\"token operator\">-</span>Headers @<span class=\"token punctuation\">{</span> Authorization = <span class=\"token string\">\"Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">\"meta: <span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$meta</span><span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span></span>\"</span></code></pre></div></p>\n<p>With this in place, not it should be pretty straight forward to move further</p>\n<p>Wondering if powershell example will be good enought to be added to dcos, meanwhile saving for myself in future</p>"}},"pageContext":{"id":"3993ba7e-c1a4-5dcc-9d0b-755c10d180ea"}},"staticQueryHashes":[],"slicesMap":{}}