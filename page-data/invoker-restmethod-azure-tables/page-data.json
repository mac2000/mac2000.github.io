{"componentChunkName":"component---src-templates-note-js","path":"/invoker-restmethod-azure-tables/","result":{"data":{"remark":{"fields":{"path":"invoker-restmethod-azure-tables"},"meta":{"title":""},"headings":[{"value":"Powershell Invoke-WebRequest against Azure Storage Tables"}],"html":"<h1>Powershell Invoke-WebRequest against Azure Storage Tables</h1>\n<p>To perform rest requests to azure storage tables you must sign your request, here is sample piece of code demonstrating how can it be done in Powershell:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$accountName</span> = <span class=\"token string\">'contoso'</span>\n<span class=\"token variable\">$accountKey</span> = <span class=\"token string\">'**************************************************************************************=='</span>\n<span class=\"token variable\">$tableName</span> = <span class=\"token string\">'mytable'</span>\n\n<span class=\"token variable\">$uri</span> = <span class=\"token string\">\"http://<span class=\"token variable\">$accountName</span>.table.core.windows.net/<span class=\"token variable\">$tableName</span>(PartitionKey='tasksSeattle',RowKey='1')\"</span>\n\n<span class=\"token variable\">$date</span> = <span class=\"token namespace\">[datetime]</span>::UtcNow<span class=\"token punctuation\">.</span>ToString<span class=\"token punctuation\">(</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[System.Globalization.CultureInfo]</span>::InvariantCulture<span class=\"token punctuation\">)</span>\n\n<span class=\"token variable\">$resource</span> = <span class=\"token namespace\">[uri]</span> <span class=\"token variable\">$uri</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">select</span> <span class=\"token operator\">-</span>ExpandProperty AbsolutePath <span class=\"token comment\"># Path without query string</span>\n\n<span class=\"token variable\">$stringToSign</span> = <span class=\"token variable\">$date</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"`n/\"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$accountName</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$resource</span>\n\n<span class=\"token variable\">$hasher</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Cryptography<span class=\"token punctuation\">.</span>HMACSHA256\n<span class=\"token variable\">$hasher</span><span class=\"token punctuation\">.</span>Key = <span class=\"token namespace\">[Convert]</span>::FromBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$accountKey</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$signedSignature</span> = <span class=\"token namespace\">[Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$hasher</span><span class=\"token punctuation\">.</span>ComputeHash<span class=\"token punctuation\">(</span><span class=\"token namespace\">[Text.Encoding]</span>::UTF8<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token variable\">$stringToSign</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$authorizationHeader</span> = <span class=\"token string\">\"SharedKeyLite \"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$accountName</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$signedSignature</span>\n\n<span class=\"token variable\">$headers</span> = @<span class=\"token punctuation\">{</span>\n\tAuthorization = <span class=\"token variable\">$authorizationHeader</span>\n\tDate = <span class=\"token variable\">$date</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">'Perform first request'</span> <span class=\"token operator\">-</span>ForegroundColor Cyan\n<span class=\"token variable\">$response</span> = <span class=\"token function\">Invoke-WebRequest</span> <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$headers</span>\n<span class=\"token variable\">$response</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">select</span> StatusCode<span class=\"token punctuation\">,</span> StatusDescription<span class=\"token punctuation\">,</span> @<span class=\"token punctuation\">{</span>n=<span class=\"token string\">'ETag'</span><span class=\"token punctuation\">;</span>e=<span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ETag <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$xml</span> = <span class=\"token namespace\">[xml]</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">.</span>Content\n<span class=\"token variable\">$xml</span><span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>properties <span class=\"token punctuation\">|</span> <span class=\"token function\">fl</span></code></pre></div>\n<p>That code will return something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PartitionKey : tasksSeattle\nRowKey       : 1\nTimestamp    : Timestamp\nDescription  : Take out the trash.\nDueDate      : DueDate\nLocation     : Home</code></pre></div>\n<p>Make sure to provide correct values, otherwise you will likely get <em>Server failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signa ture.</em> error.</p>\n<h2>Azure tables and conditional headers</h2>\n<p>It seems that Azure tables do not support conditional headers like <code class=\"language-text\">If-Modified-Since</code> like blobs do, but there is still one trick.</p>\n<p>If you will make <code class=\"language-text\">Invoke-WebRequest</code> instead of <code class=\"language-text\">Invoke-RestMethod</code> you will also get response headers. And there will be <strong>ETag</strong> header - which is entity timestamp.</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$response</span> = <span class=\"token function\">Invoke-WebRequest</span> <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$headers</span>\n<span class=\"token variable\">$response</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">select</span> StatusCode<span class=\"token punctuation\">,</span> StatusDescription<span class=\"token punctuation\">,</span> @<span class=\"token punctuation\">{</span>n=<span class=\"token string\">'ETag'</span><span class=\"token punctuation\">;</span>e=<span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ETag <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">fl</span>\n<span class=\"token variable\">$xml</span> = <span class=\"token namespace\">[xml]</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">.</span>Content\n<span class=\"token variable\">$xml</span><span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>properties <span class=\"token punctuation\">|</span> <span class=\"token function\">fl</span></code></pre></div>\n<p>Will return:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">StatusCode        : 200\nStatusDescription : OK\nETag              : W/\"datetime'2015-12-11T10%3A53%3A52.6115577Z'\"\n\nPartitionKey : tasksSeattle\nRowKey       : 1\nTimestamp    : Timestamp\nDescription  : Take out the trash.\nDueDate      : DueDate\nLocation     : Home</code></pre></div>\n<p>And now you can perform requests like:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$headers</span> = @<span class=\"token punctuation\">{</span>\n\tAuthorization = <span class=\"token variable\">$authorizationHeader</span>\n\tDate = <span class=\"token variable\">$date</span>\n\t<span class=\"token string\">'If-None-Match'</span> = <span class=\"token variable\">$response</span><span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ETag\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">Invoke-RestMethod</span> <span class=\"token operator\">-</span>Uri <span class=\"token variable\">$uri</span> <span class=\"token operator\">-</span>Headers <span class=\"token variable\">$headers</span></code></pre></div>\n<p>Which will give you desired <strong>(304) Not Modified</strong>.</p>\n<h2>Bootstraping example table from php</h2>\n<p><strong>composer.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://pear.php.net\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pear-pear.php.net/mail_mime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pear-pear.php.net/http_request2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pear-pear.php.net/mail_mimedecode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"microsoft/windowsazure\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>sandbox.php</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">require_once</span> <span class=\"token string single-quoted-string\">'vendor\\autoload.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">WindowsAzure<span class=\"token punctuation\">\\</span>Common<span class=\"token punctuation\">\\</span>ServiceException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">WindowsAzure<span class=\"token punctuation\">\\</span>Common<span class=\"token punctuation\">\\</span>ServicesBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">WindowsAzure<span class=\"token punctuation\">\\</span>Table<span class=\"token punctuation\">\\</span>Internal<span class=\"token punctuation\">\\</span>ITable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">WindowsAzure<span class=\"token punctuation\">\\</span>Table<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>EdmType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">WindowsAzure<span class=\"token punctuation\">\\</span>Table<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$accountName</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"contoso\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$accountKey</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"**************************************************************************************==\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$connectionString</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"DefaultEndpointsProtocol=https;AccountName=<span class=\"token interpolation\"><span class=\"token variable\">$accountName</span></span>;AccountKey=<span class=\"token interpolation\"><span class=\"token variable\">$accountKey</span></span>\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** @var ITable $tableRestProxy */</span>\n<span class=\"token variable\">$tableRestProxy</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">ServicesBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">createTableService</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$connectionString</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$createTableResult</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$tableRestProxy</span><span class=\"token operator\">-></span><span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"mytable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceException</span> <span class=\"token variable\">$ex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ex</span><span class=\"token operator\">-></span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token number\">409</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token variable\">$ex</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$entity</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span><span class=\"token operator\">-></span><span class=\"token function\">setPartitionKey</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"tasksSeattle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span><span class=\"token operator\">-></span><span class=\"token function\">setRowKey</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span><span class=\"token operator\">-></span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Description\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Take out the trash.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span><span class=\"token operator\">-></span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"DueDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name static-context\">EdmType</span><span class=\"token operator\">::</span><span class=\"token constant\">DATETIME</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"2012-11-05T08:15:00-08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entity</span><span class=\"token operator\">-></span><span class=\"token function\">addProperty</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Location\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name static-context\">EdmType</span><span class=\"token operator\">::</span><span class=\"token keyword type-declaration\">STRING</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"Home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$tableRestProxy</span><span class=\"token operator\">-></span><span class=\"token function\">insertEntity</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"mytable\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$entity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceException</span> <span class=\"token variable\">$ex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ex</span><span class=\"token operator\">-></span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token number\">409</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token variable\">$ex</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2>Some links</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/HTTP_ETag\">ETag</a></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/azure/dd179371.aspx\">Specifying Conditional Headers for Blob Service Operations</a></p>\n<p><a href=\"http://blog.einbu.no/2009/08/authenticating-against-azure-table-storage/\">Authenticating against Azure Table Storage</a></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/library/azure/dd179428.aspx\">Authentication for the Azure Storage Services</a></p>\n<p><a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-php-how-to-use-table-storage/\">How to use table storage from PHP</a></p>"}},"pageContext":{"id":"aee65492-d903-5668-92db-333a373c1013"}},"staticQueryHashes":[],"slicesMap":{}}