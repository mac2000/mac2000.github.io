{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-sql-client-side-join","result":{"data":{"remark":{"fields":{"path":"dotnet-sql-client-side-join"},"meta":{"title":""},"headings":[{"value":"dotnet client side sql join"}],"html":"<h1>dotnet client side sql join</h1>\n<p>the most efficient way to transfer big amount of rows from any relational database to somewhere is not to compute everything in database but instead perform simples possible sequential reads from tables</p>\n<p>with that cpu usage and traffic on database server will dramaticaly decreate</p>\n<p>we had succesfull experience with spark sql, and here is an attempt to do somthing similar with dotnet</p>\n<p>here is our domain: we have <code class=\"language-text\">Resume</code> entity which may have zero or infinite <code class=\"language-text\">Experiences</code> and <code class=\"language-text\">Educations</code></p>\n<p>we are reding all three tables in parallel, ordered by resume identifier, from database perspective it is simples possible operation</p>\n<p>on our side we have buffers for all of them and whenever we read next row from any table we are checking if we got all required data for next resume and if so call <code class=\"language-text\">Push</code> method</p>\n<p>idea here is as simple as following, imagine we have a stream of (where numbers are representing resume identifier):</p>\n<ul>\n<li>resume: 1, 2, 3, 4, 5</li>\n<li>experiences: 2, 2, 4, 5, 5</li>\n<li>education: 1, 2, 2, 5</li>\n</ul>\n<p>because we are ordering by resume identifier, while reading each table, we can answer the question if all data for concrete resume was retrieved, e.g. if we jumped from 2 to 4 while reading experiences we can definitely say that we have retvieved all experiences for resume 2</p>\n<p>with that in place we can detect when we read all data for concrete resume</p>\n<p>and thanks to that we wont utilize too much memory (only holding current ongoing data)</p>\n<p>here is an example</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Concurrent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Dapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Sqlite</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">joiner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ConnectionString <span class=\"token operator\">=</span> <span class=\"token string\">\"Data Source=hello.db;Pooling=False;Cache=Private\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// i'm here only for demo purposes, will recreate demo database</span>\n        Initializer<span class=\"token punctuation\">.</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteConnection</span><span class=\"token punctuation\">(</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// here is the main point - we are starting 3 threads reading three tables (dictionary tables are not used here because it is obvious what to do with them)</span>\n        Task<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAll</span><span class=\"token punctuation\">(</span>\n            Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>ReadResume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>ReadEducation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>ReadExperience<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> from<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_cv<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - no resume </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_edu<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">.</span><span class=\"token function\">LastOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _edu<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>Education<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _edu<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_edu<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>_edu<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>IsAddingCompleted<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - no edu </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> _edu<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_exp<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">.</span><span class=\"token function\">LastOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _exp<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>Experience<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _exp<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_exp<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">.</span><span class=\"token function\">LastOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> id <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_exp<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>_exp<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>IsAddingCompleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - no exp </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_cv<span class=\"token punctuation\">.</span><span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cv<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _edu<span class=\"token punctuation\">.</span><span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> edu<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _exp<span class=\"token punctuation\">.</span><span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span>\n            <span class=\"token punctuation\">{</span>\n                cv<span class=\"token punctuation\">,</span>\n                edu<span class=\"token punctuation\">,</span>\n                exp<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Resume<span class=\"token punctuation\">></span></span> _cv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteConnection</span><span class=\"token punctuation\">(</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rows <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Resume<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT id AS Id, name AS Name, city_id AS CityId, rubric_id AS RubricId FROM resume ORDER BY id ASC\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">buffered</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> row <span class=\"token keyword\">in</span> rows<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _cv<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> row<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadResume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> BlockingCollection<span class=\"token punctuation\">&lt;</span>Education<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _edu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadEducation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteConnection</span><span class=\"token punctuation\">(</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rows <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Education<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT resume_id AS ResumeId, name AS Name FROM education ORDER BY resume_id ASC\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">buffered</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> row <span class=\"token keyword\">in</span> rows<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _edu<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>ResumeId<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>Education<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> row <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> prev <span class=\"token operator\">!=</span> row<span class=\"token punctuation\">.</span>ResumeId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _edu<span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadEducation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            prev <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>ResumeId<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> _edu<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _edu<span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadEducation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> BlockingCollection<span class=\"token punctuation\">&lt;</span>Experience<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _exp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReadExperience</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteConnection</span><span class=\"token punctuation\">(</span>ConnectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rows <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Experience<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT resume_id AS ResumeId, name AS Name FROM experience ORDER BY resume_id ASC\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">buffered</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> row <span class=\"token keyword\">in</span> rows<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _exp<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>ResumeId<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>Experience<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> row <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> prev <span class=\"token operator\">!=</span> row<span class=\"token punctuation\">.</span>ResumeId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _exp<span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadExperience\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            prev <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>ResumeId<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> _edu<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _exp<span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReadExperience\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Initializer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> connection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DROP TABLE IF EXISTS city\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE TABLE IF NOT EXISTS city (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"INSERT INTO city(id, name) VALUES (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, 'city </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">')\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DROP TABLE IF EXISTS rubric\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE TABLE IF NOT EXISTS rubric (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"INSERT INTO rubric(id, name) VALUES (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, 'rubric </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">')\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DROP TABLE IF EXISTS resume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DROP TABLE IF EXISTS education\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DROP TABLE IF EXISTS experience\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"CREATE TABLE IF NOT EXISTS resume (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, city_id INTEGER, rubric_id INTEGER)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"CREATE TABLE IF NOT EXISTS education (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, resume_id INTEGER)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"CREATE TABLE IF NOT EXISTS experience (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, resume_id INTEGER)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"INSERT INTO resume(id, name, city_id, rubric_id) VALUES (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, 'resume </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">', </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">random<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">random<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"INSERT INTO education(name, resume_id) VALUES ('education </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">j</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">', </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"INSERT INTO experience(name, resume_id) VALUES ('experience </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">j</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">', </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IDbConnection</span> connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sql<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">CreateCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        command<span class=\"token punctuation\">.</span>CommandText <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n        command<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNonQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">City</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Rubric</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Resume</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> CityId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> RubricId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Education</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// public int Id { get; init; }</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ResumeId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Experience</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// public int Id { get; init; }</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ResumeId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<blockquote>\n<p>unfortunately it does not seems to be possible to do it in some kind of usable generic way</p>\n</blockquote>"}},"pageContext":{"id":"805ecc43-ba55-5ec9-b386-f1bb0db164fc"}},"staticQueryHashes":[]}