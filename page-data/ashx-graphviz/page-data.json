{"componentChunkName":"component---src-templates-note-js","path":"/ashx-graphviz/","result":{"data":{"remark":{"fields":{"path":"ashx-graphviz"},"meta":{"title":""},"headings":[{"value":"ASHX to create graphs via graphviz"}],"html":"<h1>ASHX to create graphs via graphviz</h1>\n<p><a href=\"http://www.graphviz.org/\">http://www.graphviz.org/</a> - tools to draw graphs from text.</p>\n<p>Here is sample file <code class=\"language-text\">test.dot</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">digraph G {\n\t\"A\"->\"B\"\n\t\"C\"->\"A\"\n\t\"D\"->\"C\"\n\t\"E\"->\"C\"\n\t\"F\"->\"D\"\n}</code></pre></div>\n<p>Now you can run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dot test.dot <span class=\"token parameter variable\">-Tpng</span> <span class=\"token operator\">></span> test.png</code></pre></div>\n<p>To generate png image from it.</p>\n<p>Here is sample code to do it in ashx:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ <span class=\"token class-name\">WebHandler</span> Language<span class=\"token operator\">=</span><span class=\"token string\">\"C#\"</span> Class<span class=\"token operator\">=</span><span class=\"token string\">\"dot\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Web</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>SqlClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Drawing</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Imaging</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">dot</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IHttpHandler</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProcessRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpContext</span> context<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tcontext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>ContentType <span class=\"token operator\">=</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">[</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tcontext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">BinaryWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">Dot2Png</span><span class=\"token punctuation\">(</span><span class=\"token function\">DataSet2Dot</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">[</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tcontext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">BinaryWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">GenerateMessage</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">GenerateMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Bitmap</span> objBmpImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Bitmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Font</span> objFont <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Font</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arial\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>FontStyle<span class=\"token punctuation\">.</span>Bold<span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>GraphicsUnit<span class=\"token punctuation\">.</span>Pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Graphics</span> objGraphics <span class=\"token operator\">=</span> Graphics<span class=\"token punctuation\">.</span><span class=\"token function\">FromImage</span><span class=\"token punctuation\">(</span>objBmpImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tintWidth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>objGraphics<span class=\"token punctuation\">.</span><span class=\"token function\">MeasureString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> objFont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">;</span>\n\t\tintHeight <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>objGraphics<span class=\"token punctuation\">.</span><span class=\"token function\">MeasureString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> objFont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">;</span>\n\t\tobjBmpImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Bitmap</span><span class=\"token punctuation\">(</span>objBmpImage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Size</span><span class=\"token punctuation\">(</span>intWidth<span class=\"token punctuation\">,</span> intHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tobjGraphics <span class=\"token operator\">=</span> Graphics<span class=\"token punctuation\">.</span><span class=\"token function\">FromImage</span><span class=\"token punctuation\">(</span>objBmpImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tobjGraphics<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tobjGraphics<span class=\"token punctuation\">.</span>SmoothingMode <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Drawing2D<span class=\"token punctuation\">.</span>SmoothingMode<span class=\"token punctuation\">.</span>AntiAlias<span class=\"token punctuation\">;</span>\n\t\tobjGraphics<span class=\"token punctuation\">.</span>TextRenderingHint <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>TextRenderingHint<span class=\"token punctuation\">.</span>AntiAlias<span class=\"token punctuation\">;</span>\n\t\tobjGraphics<span class=\"token punctuation\">.</span><span class=\"token function\">DrawString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> objFont<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SolidBrush</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span><span class=\"token function\">FromArgb</span><span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tobjGraphics<span class=\"token punctuation\">.</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">MemoryStream</span> mem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tobjBmpImage<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">,</span> ImageFormat<span class=\"token punctuation\">.</span>Png<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> mem<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">Dot2Png</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> dot<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> file <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetTempFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> png <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetTempFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> command <span class=\"token operator\">=</span> <span class=\"token string\">@\"\"\"C:\\Program Files (x86)\\Graphviz2.36\\bin\\dot.exe\"\" \"</span> <span class=\"token operator\">+</span> file <span class=\"token operator\">+</span> <span class=\"token string\">\" -Tpng > \"</span> <span class=\"token operator\">+</span> png<span class=\"token punctuation\">;</span>\n\n\t\tFile<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> dot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>ProcessStartInfo</span> procStartInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>ProcessStartInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c \"</span> <span class=\"token operator\">+</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tprocStartInfo<span class=\"token punctuation\">.</span>RedirectStandardOutput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tprocStartInfo<span class=\"token punctuation\">.</span>UseShellExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tprocStartInfo<span class=\"token punctuation\">.</span>CreateNoWindow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span> proc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tproc<span class=\"token punctuation\">.</span>StartInfo <span class=\"token operator\">=</span> procStartInfo<span class=\"token punctuation\">;</span>\n\t\tproc<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> result <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>StandardOutput<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> bytes <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span>png<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tFile<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>png<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tFile<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> bytes<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">DataSet2Dot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSet</span> ds<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DataRow</span> edge <span class=\"token keyword\">in</span> ds<span class=\"token punctuation\">.</span>Tables<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ParentName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ChildName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DataRow</span> node <span class=\"token keyword\">in</span> ds<span class=\"token punctuation\">.</span>Tables<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> edge<span class=\"token punctuation\">[</span><span class=\"token string\">\"ParentID\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\tParentName <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">[</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> edge<span class=\"token punctuation\">[</span><span class=\"token string\">\"ChildID\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\tChildName <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\titems<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\\"{0}\\\"->\\\"{1}\\\"\"</span><span class=\"token punctuation\">,</span> ParentName<span class=\"token punctuation\">,</span> ChildName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"digraph G </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token number\">1</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token number\">0</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> } } </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token number\">0</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/// &lt;summary></span>\n\t<span class=\"token comment\">/// Retrieve dataset with two tables.</span>\n\t<span class=\"token comment\">///</span>\n\t<span class=\"token comment\">/// Table[0] (ID, Name)</span>\n\t<span class=\"token comment\">/// Table[1] (ParentID, ChildID)</span>\n\t<span class=\"token comment\">/// &lt;/summary></span>\n\t<span class=\"token comment\">/// &lt;param name=\"ID\">&lt;/param></span>\n\t<span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\">DataSet</span> <span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ID<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">DataSet</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span>ConfigurationManager<span class=\"token punctuation\">.</span>ConnectionStrings<span class=\"token punctuation\">[</span><span class=\"token string\">\"RabotaUA\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spTagMaster_Structure\"</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\tCommandType <span class=\"token operator\">=</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcommand<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@ID\"</span><span class=\"token punctuation\">,</span> ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">SqlDataAdapter</span> da <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlDataAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tda<span class=\"token punctuation\">.</span>SelectCommand <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span>\n\t\t\tda<span class=\"token punctuation\">.</span><span class=\"token function\">Fill</span><span class=\"token punctuation\">(</span>ds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsReusable\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">get</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code expects to retrieve two tables from <code class=\"language-text\">spTagMaster_Structure</code> stored procedure, one of which should have ID, Name columns and second - ParentID, ChildID.</p>"}},"pageContext":{"id":"a0b1d5f3-437a-5eca-95b0-661fe7f5701c"}},"staticQueryHashes":[],"slicesMap":{}}