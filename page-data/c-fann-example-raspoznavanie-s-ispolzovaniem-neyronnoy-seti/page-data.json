{"componentChunkName":"component---src-templates-note-js","path":"/c-fann-example-raspoznavanie-s-ispolzovaniem-neyronnoy-seti","result":{"data":{"remark":{"fields":{"path":"c-fann-example-raspoznavanie-s-ispolzovaniem-neyronnoy-seti"},"meta":{"title":""},"headings":[{"value":"C# FANN example — распознавание с использованием нейронной сети"}],"html":"<h1>C# FANN example — распознавание с использованием нейронной сети</h1>\n<p><a href=\"http://leenissen.dk/fann/wp/\">http://leenissen.dk/fann/wp/</a> - сайт библиотеки FANN</p>\n<p><a href=\"http://code.google.com/p/fanndotnetwrapper/\">http://code.google.com/p/fanndotnetwrapper/</a> - обертка под .NET</p>\n<p><a href=\"http://leenissen.dk/fann/fann.html\">http://leenissen.dk/fann/fann.html</a> - php</p>\n<p><a href=\"http://code.google.com/p/fanntool/\">http://code.google.com/p/fanntool/</a> - тул по работе с библиотекой FANN - самое классное в нем - что он может подобрать оптимальные параметры нейронной сети.</p>\n<p>В примере стандартная задача по операции xor, и еще одна по определению прямоугольника - на вход подается сто бит (грубо говоря рисунок - 10х10 пикселей) - сеть пытается определить нарисован ли на ней прямоугольник.</p>\n<p><strong>Пример:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">FANN<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">fann</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XOR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">NeuralNet</span> xornet <span class=\"token operator\">=</span> xor<span class=\"token punctuation\">.</span><span class=\"token function\">get_xor_net</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            xor<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>xornet<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            xor<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>xornet<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            xor<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>xornet<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            xor<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>xornet<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nBOX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">NeuralNet</span> boxnet <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">get_box_net</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>boxnet<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>boxnet<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>boxnet<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox_with_some_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>boxnet<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox_without_some_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            box<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>boxnet<span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">xor</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">NeuralNet</span> <span class=\"token function\">get_xor_net</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">NeuralNet</span> net <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NeuralNet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">create_training_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.data generated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">></span></span> layers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// inputs</span>\n                layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hidden</span>\n                layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">CreateStandardArray</span><span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetLearningRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationSteepnessHidden</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationSteepnessOutput</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationFunctionHidden</span><span class=\"token punctuation\">(</span>ActivationFunction<span class=\"token punctuation\">.</span>SigmoidSymmetric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationFunctionOutput</span><span class=\"token punctuation\">(</span>ActivationFunction<span class=\"token punctuation\">.</span>SigmoidSymmetric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetTrainStopFunction</span><span class=\"token punctuation\">(</span>StopFunction<span class=\"token punctuation\">.</span>Bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetBitFailLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.01f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Set additional properties such as the training algorithm</span>\n                <span class=\"token comment\">//net.SetTrainingAlgorithm(FANN::TRAIN_QuickProp);</span>\n\n                <span class=\"token class-name\">TrainingData</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TrainingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                data<span class=\"token punctuation\">.</span><span class=\"token function\">ReadTrainFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">InitWeights</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">TrainOnData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// max iterations</span>\n                    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// iterations between report</span>\n                    <span class=\"token number\">0</span> <span class=\"token comment\">//desired error</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> net<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">create_training_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4 2 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">AppendLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.data\"</span><span class=\"token punctuation\">,</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NeuralNet</span> net<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> r <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            r <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} xor {1} = {2}\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">box</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> WIDTH <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">NeuralNet</span> <span class=\"token function\">get_box_net</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">NeuralNet</span> net <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NeuralNet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    box<span class=\"token punctuation\">.</span><span class=\"token function\">create_training_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data generated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">></span></span> layers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// inputs</span>\n                layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hidden</span>\n                layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">CreateStandardArray</span><span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetLearningRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationSteepnessHidden</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationSteepnessOutput</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationFunctionHidden</span><span class=\"token punctuation\">(</span>ActivationFunction<span class=\"token punctuation\">.</span>SigmoidSymmetric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationFunctionOutput</span><span class=\"token punctuation\">(</span>ActivationFunction<span class=\"token punctuation\">.</span>SigmoidSymmetric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetTrainStopFunction</span><span class=\"token punctuation\">(</span>StopFunction<span class=\"token punctuation\">.</span>Bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">SetBitFailLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.01f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Set additional properties such as the training algorithm</span>\n                <span class=\"token comment\">//net.SetTrainingAlgorithm(FANN::TRAIN_QuickProp);</span>\n\n                <span class=\"token class-name\">TrainingData</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TrainingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                data<span class=\"token punctuation\">.</span><span class=\"token function\">ReadTrainFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">InitWeights</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">TrainOnData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>\n                    <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// max iterations</span>\n                    <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// iterations between report</span>\n                    <span class=\"token number\">0</span> <span class=\"token comment\">//desired error</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> net<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">create_training_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5000 100 1\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                File<span class=\"token punctuation\">.</span><span class=\"token function\">AppendAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                File<span class=\"token punctuation\">.</span><span class=\"token function\">AppendAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox_without_some_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                File<span class=\"token punctuation\">.</span><span class=\"token function\">AppendAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox_with_some_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                File<span class=\"token punctuation\">.</span><span class=\"token function\">AppendAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                File<span class=\"token punctuation\">.</span><span class=\"token function\">AppendAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box.data\"</span><span class=\"token punctuation\">,</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input <span class=\"token operator\">=</span> <span class=\"token function\">get_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Random</span> rnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">randombox_with_some_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input <span class=\"token operator\">=</span> <span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Random</span> rnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">randombox_without_some_elements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input <span class=\"token operator\">=</span> <span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Random</span> rnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">randombox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input <span class=\"token operator\">=</span> <span class=\"token function\">get_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Random</span> rnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x1 <span class=\"token operator\">=</span> rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> WIDTH <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y1 <span class=\"token operator\">=</span> rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> WIDTH <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x2 <span class=\"token operator\">=</span> rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> WIDTH <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y2 <span class=\"token operator\">=</span> rnd<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> WIDTH <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> x1<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> x2<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> y2<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                input<span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                input<span class=\"token punctuation\">[</span>x2<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isbox<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> b <span class=\"token operator\">=</span> isbox <span class=\"token punctuation\">?</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">get_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>WIDTH<span class=\"token punctuation\">,</span> WIDTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NeuralNet</span> net<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> input<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> WIDTH<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>input<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> r <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            r <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"IS box\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"NOT box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> example from sources</span>\n        <span class=\"token comment\">// Test function that demonstrates usage of the fann C++ wrapper</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">xor_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XOR test started.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> LearningRate <span class=\"token operator\">=</span> <span class=\"token number\">0.7f</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> numInput <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> numHidden <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> numOutput <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> desired_error <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> max_iterations <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> iterations_between_reports <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating network.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">NeuralNet</span> net <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NeuralNet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">></span></span> layers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>numInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>numHidden<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            layers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>numOutput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">CreateStandardArray</span><span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetLearningRate</span><span class=\"token punctuation\">(</span>LearningRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationSteepnessHidden</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationSteepnessOutput</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationFunctionHidden</span><span class=\"token punctuation\">(</span>ActivationFunction<span class=\"token punctuation\">.</span>SigmoidSymmetric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetActivationFunctionOutput</span><span class=\"token punctuation\">(</span>ActivationFunction<span class=\"token punctuation\">.</span>SigmoidSymmetric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetTrainStopFunction</span><span class=\"token punctuation\">(</span>StopFunction<span class=\"token punctuation\">.</span>Bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">SetBitFailLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.01f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Set additional properties such as the training algorithm</span>\n            <span class=\"token comment\">//net.SetTrainingAlgorithm(FANN::TRAIN_QuickProp);</span>\n\n            <span class=\"token comment\">// Output network type and parameters</span>\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Network Type                         :  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">GetNetworkType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> NetworkType<span class=\"token punctuation\">.</span>Layer<span class=\"token punctuation\">:</span>\n                    System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LAYER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> NetworkType<span class=\"token punctuation\">.</span>ShortCut<span class=\"token punctuation\">:</span>\n                    System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHORTCUT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                    System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            net<span class=\"token punctuation\">.</span><span class=\"token function\">PrintParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Training network.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">TrainingData</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TrainingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">ReadTrainFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor.data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Initialize and train the network with the data</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">InitWeights</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max Epochs \"</span> <span class=\"token operator\">+</span> max_iterations <span class=\"token operator\">+</span> <span class=\"token string\">\". \"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"Desired Error: \"</span> <span class=\"token operator\">+</span> desired_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">/*\n                net.Callback += (nn, train, max_epochs, epochs_between_reports, de, epochs)\n                    => {\n                        System.Console.WriteLine(\"Epochs     \" + epochs + \". \" + \"Current Error: \" + nn.GetMSE() + \"\\n\");\n                        return 0;\n                    };\n                */</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">TrainOnData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> max_iterations<span class=\"token punctuation\">,</span>\n                    iterations_between_reports<span class=\"token punctuation\">,</span> desired_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Testing network.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>TrainingDataLength<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// Run the network on the test data</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> calcOut <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XOR test (\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n                            <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") -> \"</span> <span class=\"token operator\">+</span> calcOut\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\", should be \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>Output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span>\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\"difference = \"</span>\n                            <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>calcOut <span class=\"token operator\">-</span> data<span class=\"token punctuation\">.</span>Output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saving network.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Save the network in floating point and fixed point</span>\n                net<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor_float.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">uint</span></span> decimal_point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">SaveToFixed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor_fixed.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                data<span class=\"token punctuation\">.</span><span class=\"token function\">SaveTrainToFixed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xor_fixed.data\"</span><span class=\"token punctuation\">,</span> decimal_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XOR test completed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>На выходе дает такое:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">XOR\n0 xor 0 = 1\n0 xor 1 = 0\n1 xor 0 = 0\n1 xor 1 = 0\n\nBOX\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 0 0\n1 0 0 0 0 0 0 1 0 0\n1 0 0 0 0 0 0 1 0 0\n1 1 1 1 1 1 1 1 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nIS box\n0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 0 0\n1 0 0 0 0 0 0 1 0 0\n1 0 0 0 0 0 0 1 0 0\n1 1 1 1 1 1 1 1 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nIS box\n0 0 0 1 0 0 1 1 0 0\n1 1 1 1 1 1 1 1 1 0\n1 0 0 0 1 0 1 1 0 0\n1 1 1 0 1 1 0 1 1 0\n1 1 1 1 1 1 1 1 1 1\n1 0 0 1 1 1 1 1 0 0\n1 1 1 1 0 1 0 1 1 0\n1 1 1 1 0 0 1 0 1 1\n1 0 1 1 1 1 1 1 1 1\n1 0 1 1 0 1 1 1 1 1\nNOT box\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 1 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 1 0 0 0 0 0\n0 0 0 0 0 1 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nNOT box\n1 1 0 0 1 0 1 1 0 1\n0 1 1 1 1 1 0 0 0 0\n1 0 1 0 0 0 1 1 1 0\n1 0 0 1 0 0 0 1 1 0\n0 1 1 1 1 0 0 1 0 1\n1 0 1 1 1 0 1 0 0 0\n1 0 0 0 0 0 0 0 0 1\n0 0 1 1 0 1 1 0 0 0\n0 1 0 1 1 0 0 0 1 1\n0 0 1 0 0 0 0 1 0 1\nNOT box</code></pre></div>\n<p><strong>Пример на php из исходников pecl модуля</strong> (сохраняю на память):</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\">/* demo.php\n    * $Id: demo.php,v 1.3 2004/01/19 22:33:51 tadpole9 Exp $\n    *\n    * This file should help explain the FANN API from a PHP perspective. It\n    * is basically a PHP port of the simple_test/simple_train examples from\n    * the FANN distribution. The original C versions can be found in\n    * $FANN_DIR/examples\n    *\n    * There are a few functions that aren't demonstrated in this file, here\n    * are their prototypes:\n    *\n    * void fann_randomize_weights(resource ann [, double min [, double max]])\n    * void fann_set_learning_rate(resource ann, float learning_rate)\n    * void fann_set_activation_function_hidden(resource ann, int activation_function)\n    * void fann_set_activation_function_output(resource ann, int activation_function)\n    * void fann_set_activation_hidden_steepness(resource ann, int activation_function)\n    * void fann_set_activation_output_steepness(resource ann, int activation_function)\n    * double fann_get_MSE(resource ann)\n    * double fann_get_learning_rate(resource ann)\n    * long fann_get_num_input(resource ann)\n    * long fann_get_num_output(resource ann)\n    * long fann_get_activation_function_hidden(resource ann)\n    * long fann_get_activation_function_output(resource ann)\n    * double fann_get_activation_hidden_steepness(resource ann)\n    * double fann_get_activation_output_steepness(resource ann)\n    * long fann_get_total_neurons(resource ann)\n    * long fann_get_total_connections(resource ann)\n    *\n    * If you have any questions or comments, please e-mail Evan Nemerson\n    * &lt;evan@coeus-group.com>\n    */</span>\n\n<span class=\"token comment\">/* If you don't want to compile FANN into PHP... */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">extension_loaded</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'fann'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">dl</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'fann.so'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"You must install the FANN extension. You can get it from http://fann.sf.net/\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Create an artificial neural network */</span>\n<span class=\"token variable\">$ann</span> <span class=\"token operator\">=</span> <span class=\"token function\">fann_create</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* layers. in this case, three layers- two input neurons, 4 neurons in a hidden layer, and one output neuron */</span>\n            <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* learning rate */</span>\n            <span class=\"token number\">0.7</span> <span class=\"token comment\">/* connection rate */</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* To load from a file, you can use. If your version of PHP includes the streams API (4.3.0+ ?),\n    * this can be anything accessible through streams (http, ftp, https, etc) */</span>\n<span class=\"token comment\">// $ann = fann_create(\"http://example.com/xor_float.net\");</span>\n\n<span class=\"token comment\">/* Train the network using the same data as is in the xor.data file */</span>\n<span class=\"token function\">fann_train</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ann</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Input(s) */</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Output(s) */</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Input(s) */</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Output(s) */</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Input(s) */</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Output(s) */</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Input(s) */</span>\n                <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Output(s) */</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Maximum number of epochs */</span>\n        <span class=\"token number\">0.00001</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Desired error. */</span>\n        <span class=\"token number\">1000</span> <span class=\"token comment\">/* Number of epochs between reports */</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* To achieve the same effect as the above with the data stored in an external file... Also works\n    * with the streams API, when available. */</span>\n<span class=\"token comment\">// fann_train($ann, '/home/tadpole/local/src/fann/examples/xor.data', 100000, 0.00001, 1000);</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">fann_run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ann</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should be ~ 0</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">fann_run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ann</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should be ~ 1</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">fann_run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ann</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should be ~ 1</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">fann_run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ann</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Should be ~ 0</span>\n\n<span class=\"token comment\">/* This function is pretty simple. It will use the streams API if available. */</span>\n<span class=\"token function\">fann_save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ann</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'xor_float.net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<p>Наметки по установке fann на linux'е:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pear <span class=\"token function\">install</span> http://pecl.php.net/get/fann-0.1.1.tgz\n<span class=\"token function\">sudo</span> pecl <span class=\"token function\">install</span> fann-devel\npecl <span class=\"token function\">install</span> fann-0.1.1</code></pre></div>\n<p>без этого не конфигурится</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libfann-dev\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libfann1-dev\nlibfann1-dev libfann1 libfann2\n\n<span class=\"token function\">wget</span> http://pecl.php.net/get/fann-0.1.1.tgz\n<span class=\"token function\">tar</span> zxf fann-0.1.1.tgz\n<span class=\"token builtin class-name\">cd</span> fann-0.1.1\n<span class=\"token function\">sudo</span> phpize\n<span class=\"token function\">sudo</span> ./configure\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<p>после make install скажет:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Installing shared extensions:     /usr/lib/php5/20090626+lfs/</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">touch</span> /etc/php5/apache2/conf.d/fann.ini\n<span class=\"token assign-left variable\">fann_extension</span><span class=\"token operator\">=</span>/usr/lib/php5/20090626+lfs/fann.so</code></pre></div>\n<p>пока ничего не получилось... (</p>"}},"pageContext":{"id":"4f2db637-ebf3-5d66-8957-3fbb1455ad71"}},"staticQueryHashes":[]}