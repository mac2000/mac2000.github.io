{"componentChunkName":"component---src-templates-note-js","path":"/macos-nginx-cloudflare/","result":{"data":{"remark":{"fields":{"path":"macos-nginx-cloudflare"},"meta":{"title":""},"headings":[{"value":"nginx on macos behind cloudflare"}],"html":"<h1>nginx on macos behind cloudflare</h1>\n<p>Somehow, <a href=\"/macos-traefik-cloudflare\">Traefik</a> did not worked out and after few hour crashes in <a href=\"https://community.traefik.io/t/traefik-suddenly-looses-entrypoint-binding/27054\">interesting way</a>.</p>\n<p>So, decided to give a change to nginx.</p>\n<p>Usual stuff first:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> nginx</code></pre></div>\n<p>installer logs:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">docroot:</span> <span class=\"token file-path string\">/opt/homebrew/var/www</span>\n\ndefault port set in <span class=\"token file-path string\">/opt/homebrew/etc/nginx/nginx.conf</span> to <span class=\"token number\">8080</span> so that nginx can run without sudo<span class=\"token punctuation\">.</span>\n\nnginx will load all files in <span class=\"token file-path string\">/opt/homebrew/etc/nginx/servers/.</span>\n\n<span class=\"token property\">start as service:</span>\n\n  brew services start nginx\n\n<span class=\"token property\">start manually:</span>\n\n  <span class=\"token file-path string\">/opt/homebrew/opt/nginx/bin/nginx</span> <span class=\"token operator\">-</span>g daemon\\ off\\<span class=\"token operator\">;</span></code></pre></div>\n<p>this one may be interesting, indeed, lower ports like 80 and 443 require privileges to bind them</p>\n<p>From other hand, on home router we are doing port forwarding like: <code class=\"language-text\">&lt;external_ip>:443 -> &lt;internal_ip>:443</code></p>\n<p>Why not forward to <code class=\"language-text\">:8080</code> instead - this one will be first change</p>\n<p>Second, because we are behind cloudflare, should we really bother with letsencrypt, why not just use cloudflare cert</p>\n<h2>Home router</h2>\n<p>From home router side I have configured nat forwarding</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;external_ip>:443 -> &lt;internal_ip>:8080</code></pre></div>\n<h2>Cloudflare</h2>\n<p>From Cloudflare</p>\n<p>In SSL/TLS overview page set SSL/TLS encryption mode to full (strict), e.g. traffic will be encrypted everywhere</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">client --https--> cloudflare --https-->external_ip</code></pre></div>\n<p>In SSL/TLS Origin Server page we can create an certificate signed by Cloudflare, it is trusted by Cloudflare, will make everything secure without the need to rely on Letsencrypt</p>\n<p>It will create for us <code class=\"language-text\">cloudflare.pem</code> and <code class=\"language-text\">cloudflare.key</code> certificates, also point us to <a href=\"https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/\">documentation</a> of how to configure origin server.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> cloudflare.* mini:/opt/homebrew/etc/nginx/</code></pre></div>\n<p>Before proceeding lets give it a try it should work already</p>\n<p><strong>/opt/homebrew/etc/nginx/servers/nginx.conf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  listen 8080;\n  ssl on;\n  ssl_certificate cloudflare.pem;\n  ssl_certificate_key cloudflare.key;\n\n  server_name nginx.mac-blog.org.ua;                                                                                                                                #    ssl_certificate      cert.pem;\n\n  location / {\n    root html;\n    index index.html index.htm;\n  }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nginx <span class=\"token parameter variable\">-g</span> daemon<span class=\"token punctuation\">\\</span> off<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>it did failed with an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">nginx:</span> <span class=\"token punctuation\">[</span>emerg<span class=\"token punctuation\">]</span> no <span class=\"token string\">\"ssl_certificate\"</span> is defined for the <span class=\"token string\">\"listen ... ssl\"</span> directive in <span class=\"token file-path string\">/opt/homebrew/etc/nginx/nginx.conf</span><span class=\"token operator\">:</span><span class=\"token number\">35</span></code></pre></div>\n<p>so i have just removed <code class=\"language-text\">server { ... }</code> from it, we won't need it anyway</p>\n<p>and finally <code class=\"language-text\">nginx.mac-blog.org.ua</code> start working</p>\n<p>which technically means we almost done and can just add more and more services</p>\n<p>and make a note - no need to bother with certs at all</p>\n<h2>mTLS</h2>\n<p>one more step to make thins even better</p>\n<p>on SSL/TLS Origin Sergver page scroll down to Authenticated Origin Pulls and enable it</p>\n<p>then</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://developers.cloudflare.com/ssl/static/authenticated_origin_pull_ca.pem</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  listen 8080 ssl;\n  server_name nginx.mac-blog.org.ua;\n\n  # https\n  ssl_certificate /opt/homebrew/etc/nginx/cloudflare.pem;\n  ssl_certificate_key /opt/homebrew/etc/nginx/cloudflare.key;\n\n  # mtls\n  ssl_verify_client on;\n  ssl_client_certificate /opt/homebrew/etc/nginx/authenticated_origin_pull_ca.pem;\n\n  location / {\n    root html;\n    index index.html index.htm;\n  }\n}</code></pre></div>\n<p>this change will enforce ssl verify of the client so only cloudflare can access our nginx</p>\n<p>profit - no need to deal with ip adresses lists anymore</p>\n<p>things left - configure nginx itself and services</p>\n<h2>Services</h2>\n<p>Here few small starter configurations</p>\n<p><strong>/opt/homebrew/etc/nginx/servers/grafana.conf</strong></p>\n<ul>\n<li><a href=\"https://grafana.com/tutorials/run-grafana-behind-a-proxy/#configure-nginx\">docs</a></li>\n<li>expected that auth is configured</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">map $http_upgrade $connection_upgrade {\n  default upgrade;\n  &#39;&#39; close;\n}\n\nserver {\n  server_name grafana.mac-blog.org.ua;\n\n  listen 8080 ssl;\n  ssl_certificate /opt/homebrew/etc/nginx/cloudflare.pem;\n  ssl_certificate_key /opt/homebrew/etc/nginx/cloudflare.key;\n  ssl_verify_client on;\n  ssl_client_certificate /opt/homebrew/etc/nginx/authenticated_origin_pull_ca.pem;\n\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n  }\n\n  location /api/live/ {\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $host;\n    proxy_pass http://localhost:3000;\n  }\n}</code></pre></div>\n<p><strong>/opt/homebrew/etc/nginx/servers/prometheus.conf</strong></p>\n<p>prometheus has no auth, previously with traefik we have configured fully featured oidc, this time - do not even want to waste time on this, good old basic auth will be used instead</p>\n<p>following command will hash \"mypass\" as password for \"alice\"</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">htpasswd <span class=\"token parameter variable\">-nb</span> alice mypass</code></pre></div>\n<p>output will be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">alice<span class=\"token operator\">:</span><span class=\"token operator\">$</span>apr1<span class=\"token operator\">$</span>nInGCQmP<span class=\"token operator\">$</span>4oknZsVad6f5sQADootPu1</code></pre></div>\n<p>so we are going to save it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">htpasswd <span class=\"token parameter variable\">-nb</span> alice mypass <span class=\"token operator\">></span> /opt/homebrew/etc/nginx/prometheus.htpasswd</code></pre></div>\n<p>and our conf file</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  server_name prometheus.mac-blog.org.ua;\n\n  listen 8080 ssl;\n  ssl_certificate /opt/homebrew/etc/nginx/cloudflare.pem;\n  ssl_certificate_key /opt/homebrew/etc/nginx/cloudflare.key;\n  ssl_verify_client on;\n  ssl_client_certificate /opt/homebrew/etc/nginx/authenticated_origin_pull_ca.pem;\n\n  location / {\n    proxy_pass http://localhost:9090;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n\n    # basic auth\n    auth_basic &quot;auth&quot;;\n    auth_basic_user_file /opt/homebrew/etc/nginx/prometheus.htpasswd;\n  }\n}</code></pre></div>\n<h3>DRY</h3>\n<p>Seems like in majority of services we will repeat the same snippet again again and again</p>\n<p>so lets put it in dedicated file</p>\n<p><strong>/opt/homebrew/etc/nginx/cloudflare.conf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">listen 8080 ssl;\n# https\nssl_certificate /opt/homebrew/etc/nginx/cloudflare.pem;\nssl_certificate_key /opt/homebrew/etc/nginx/cloudflare.key;\n# mtls\nssl_verify_client on;\nssl_client_certificate /opt/homebrew/etc/nginx/authenticated_origin_pull_ca.pem;</code></pre></div>\n<p>and now our service files becomes something like</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  server_name prometheus.mac-blog.org.ua;\n\n  include cloudflare.conf;\n\n  location / {\n    proxy_pass http://localhost:9090;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n\n    # basic auth\n    auth_basic &quot;auth&quot;;\n    auth_basic_user_file /opt/homebrew/etc/nginx/prometheus.htpasswd;\n  }\n}</code></pre></div>\n<p>And technically the same is true for location section, so</p>\n<p><strong>/opt/homebrew/etc/nginx/proxy_headers.conf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">proxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;</code></pre></div>\n<p>makes our site config something like</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  server_name prometheus.mac-blog.org.ua;\n  include cloudflare.conf;\n  location / {\n    proxy_pass http://localhost:9090;\n    include proxy_headers.conf;\n  }\n}</code></pre></div>\n<p>you already should see where it goes</p>\n<h2>Monitoring</h2>\n<p>nginx has no built in prometheus metrics, but there is <a href=\"https://nginx.org/en/docs/http/ngx_http_stub_status_module.html\">stub_status</a></p>\n<p>we supposed to add it to server like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">  location /nginx_status {\n    stub_status;\n    allow 127.0.0.1;\n    deny all;\n  }</code></pre></div>\n<p>which give us very very limited data</p>\n<p>so technically there is not much we will be monitoring from this standpoint</p>\n<p>but we may be interested in playing with log files instead, which are part of overall nginx config</p>\n<h2>nginx.conf</h2>\n<p>there is an pretty cool online tool to play with nginx config</p>\n<p><a href=\"https://www.digitalocean.com/community/tools/nginx\">https://www.digitalocean.com/community/tools/nginx</a></p>\n<p>just for backup here is what i have ended up with for v1</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">worker_processes 1;\n\nevents {\n  multi_accept on;\n  worker_connections 1024;\n}\n\nhttp {\n  charset utf-8;\n  client_max_body_size 10M;\n  default_type application/octet-stream;\n  gzip on;\n  gzip_vary on;\n  include mime.types;\n  keepalive_timeout 65;\n  sendfile on;\n  server_tokens off;\n  tcp_nodelay on;\n  tcp_nopush on;\n\n  # for ip in $(curl -s https://www.cloudflare.com/ips-v4/)\n  # do\n  #   echo &quot;set_real_ip_from $ip;&quot;\n  # done\n  set_real_ip_from 173.245.48.0/20;\n  set_real_ip_from 103.21.244.0/22;\n  set_real_ip_from 103.22.200.0/22;\n  set_real_ip_from 103.31.4.0/22;\n  set_real_ip_from 141.101.64.0/18;\n  set_real_ip_from 108.162.192.0/18;\n  set_real_ip_from 190.93.240.0/20;\n  set_real_ip_from 188.114.96.0/20;\n  set_real_ip_from 197.234.240.0/22;\n  set_real_ip_from 198.41.128.0/17;\n  set_real_ip_from 162.158.0.0/15;\n  set_real_ip_from 104.16.0.0/13;\n  set_real_ip_from 104.24.0.0/14;\n  set_real_ip_from 172.64.0.0/13;\n  set_real_ip_from 131.0.72.0/22;\n  real_ip_header X-Forwarded-For;\n  real_ip_recursive on;\n\n  include servers/*;\n}</code></pre></div>\n<p>but this one is probably neverending story and will be tuned over time</p>\n<h3>going back to the roots</h3>\n<p>while plaing with configs, there are some php examples, decided why not, it is cool to have some ad-hoc scripts without wasting resources</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> php\nbrew services start php</code></pre></div>\n<p>so we have php-fpm with this</p>\n<p>and now we can do something like</p>\n<p><strong>/opt/homebrew/etc/nginx/servers/phpnifo.conf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  server_name phpinfo.mac-blog.org.ua;\n\n  include cloudflare.conf;\n  include common.conf;\n\n  root /Users/mini/phpinfo;\n  index index.php;\n\n  location / {\n    try_files $uri $uri/ =404;\n  }\n\n  location ~ \\.php$ {\n    include fastcgi_params;\n    fastcgi_pass 127.0.0.1:9000;\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    fastcgi_param DOCUMENT_ROOT $document_root;\n  }\n}</code></pre></div>\n<p>of course there are things to tune php itself, monitoring etc but this one is out of scope, for now just need some ready to copy paste sample</p>\n<h2>reloading</h2>\n<p>whenever changes are made just use</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nginx <span class=\"token parameter variable\">-s</span> reload</code></pre></div>\n<h3>fallback</h3>\n<p>whenever i try to open whatever.mac-blog.org.ua nginx just points me to first configured server instead of showing 404</p>\n<p>to fix that we need</p>\n<p><strong>/opt/homebrew/etc/nginx/servers/default.conf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  server_name _; # aka catch all\n\n  include cloudflare.conf;\n  include common.conf;\n\n  location / {\n    return 404; # do some fancy page here\n  }\n}</code></pre></div>\n<h2>goodbye ngrok</h2>\n<p>ngrok is not needed anymore, aka</p>\n<p><strong>/opt/homebrew/etc/nginx/servers/5000.conf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  server_name 5000.mac-blog.org.ua;\n\n  include cloudflare.conf;\n  include common.conf;\n\n  location / {\n    proxy_pass http://192.168.105.109:5000;\n    include proxy_headers.conf;\n  }\n}</code></pre></div>\n<h2>65: No route to host</h2>\n<p>after a while, once upgraded you may face following</p>\n<p>somehow things running on our mac are working fine, e.g. <code class=\"language-text\">grafana.example.com</code> works as expected</p>\n<p>but somehow access to services that lives somewhere else in your network is not working</p>\n<p>cloudflare responds with 502 status code</p>\n<p>and from nginx error log</p>\n<p><strong>/opt/homebrew/var/log/nginx/error.log</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token date number\">2025/04/24</span> <span class=\"token time number\">15:55:25</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> <span class=\"token number\">6549</span><span class=\"token operator\">#</span><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token operator\">*</span><span class=\"token number\">582</span> connect<span class=\"token operator\">(</span><span class=\"token operator\">)</span> to <span class=\"token ip-address constant\">192.168.0.9</span><span class=\"token operator\">:</span><span class=\"token number\">5000</span> failed <span class=\"token operator\">(</span><span class=\"token number\">65</span><span class=\"token operator\">:</span> No route to host<span class=\"token operator\">)</span> while connecting to upstream<span class=\"token punctuation\">,</span> client<span class=\"token operator\">:</span> <span class=\"token ip-address constant\">178.150.73.215</span><span class=\"token punctuation\">,</span> server<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">,</span> request<span class=\"token operator\">:</span> <span class=\"token string\">\"GET / HTTP/1.1\"</span><span class=\"token punctuation\">,</span> upstream<span class=\"token operator\">:</span> <span class=\"token string\">\"http://192.168.0.9:5000\"</span><span class=\"token punctuation\">,</span> host<span class=\"token operator\">:</span> <span class=\"token string\">\"foo.example.com\"</span></code></pre></div>\n<p>and what is really really weird, once you ssh into and try <code class=\"language-text\">curl http://192.168.0.9:5000</code> everything works as expected</p>\n<p>say hello to mac security</p>\n<p>go to system settings, privacy and security, local network access and you will see <strong>nginx</strong> with disabled checkbox - <strong>that is the reason</strong> once you enable it everything will start working automagically</p>"}},"pageContext":{"id":"10216541-9859-59b2-9bd5-fc52bbc8ac3c"}},"staticQueryHashes":[],"slicesMap":{}}