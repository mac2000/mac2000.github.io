{"componentChunkName":"component---src-templates-note-js","path":"/golang-wireguard-console-client/","result":{"data":{"remark":{"fields":{"path":"golang-wireguard-console-client"},"meta":{"title":""},"headings":[{"value":"Golang WireGuard Console Client from scratch"}],"html":"<h1>Golang WireGuard Console Client from scratch</h1>\n<blockquote>\n<p>Have ended up with <a href=\"https://github.com/mac2000/wireguard\">following</a></p>\n</blockquote>\n<p>In previous <a href=\"https://mac-blog.org.ua/kubernetes-wireguard\">note</a> I had real fun with building custom web UI for WireGuard being deployed to Kubernetes with help of FastCGI and plain shell scripts</p>\n<p>The idea was to protect access to UI with help of OAuth2 proxy configured against GitHub</p>\n<p>But the problem overall is that created keys will be valid forever and need to managed somehow</p>\n<p>Instead of dealing with that we are going to do everything in reverse, so keys will be ephemeral</p>\n<p>Imagine that whenever our WireGuard server starts it does generate its own pair of keys, there is no peers yet and alongside there is an small API which we will talk about later</p>\n<p>On a client side we will have really small console application which will act as an VPN client</p>\n<p>The flow will be following:</p>\n<ul>\n<li>whenever console app starts - we are going to authenticate user with help of openid connect device flow (here we will have fancy 2FA if needed and may use any provider we want like Google, Microsoft, ...)</li>\n<li>after successfull registration we are going to create our own key pair</li>\n<li>ther we are going to send access key whih we received after registration and our public key to the server</li>\n<li>server will check access token against user info endpoint to check if it is walid</li>\n<li>then server may check if user should have access and if so add its public key as peer so user may proceed and connect</li>\n<li>after successfull communication with our api console app will create tunnel and configure it</li>\n<li>if everything succeed we will configure interface ip address, routing table and dns</li>\n</ul>\n<p><a href=\"https://moiaune.dev/2021/10/22/azure-device-flow-authentication-in-go/\">Azure Device Flow Authentication in Go</a> - really awesome article with details and sample of how can it be done</p>\n<p>Also <a href=\"https://mac-blog.org.ua/microsoft-graph-aad-users\">here</a> at bottom you may found curl examples for device flow which is pretty straight forward</p>\n<p>For the console app itself here is an starting point example:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n\t<span class=\"token string\">\"os/signal\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\t<span class=\"token string\">\"syscall\"</span>\n\n\t<span class=\"token string\">\"golang.zx2c4.com/wireguard/conn\"</span>\n\t<span class=\"token string\">\"golang.zx2c4.com/wireguard/device\"</span>\n\t<span class=\"token string\">\"golang.zx2c4.com/wireguard/tun\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\terrs <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\tterm <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> os<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// if runtime.GOOS != \"\" { // \"darwin\", \"windows\"</span>\n\t<span class=\"token comment\">// \tfmt.Println(runtime.GOOS)</span>\n\t<span class=\"token comment\">// \treturn</span>\n\t<span class=\"token comment\">// }</span>\n\n\t<span class=\"token comment\">// for macos interface name must be utun0..9</span>\n\tinterfaceName<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">getNextInterfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get next interface name: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tlogger <span class=\"token operator\">:=</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">NewLogger</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span>LogLevelVerbose<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(%s) \"</span><span class=\"token punctuation\">,</span> interfaceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// create utun tunnel and device, after this two commands ifconfig will show our interface</span>\n\tt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tun<span class=\"token punctuation\">.</span><span class=\"token function\">CreateTUN</span><span class=\"token punctuation\">(</span>interfaceName<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">.</span>DefaultMTU<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to create TUN: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tdev <span class=\"token operator\">:=</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">NewDevice</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">NewDefaultBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// talk to interface, we are sending commands to configure it, note that it is little bit different than configs we are used to</span>\n\t<span class=\"token comment\">// private_key=$(cat peer1.privatekey | base64 -d | xxd -p -c32)</span>\n\t<span class=\"token comment\">// public_key=$(cat server.publickey | base64 -d | xxd -p -c32)</span>\n\tdev<span class=\"token punctuation\">.</span><span class=\"token function\">IpcSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">`private_key=68f191237742d86e831aaa33\npublic_key=302c6a4b57ddd2626d387\nendpoint=20.82.124.71:51820\nallowed_ip=10.0.0.0/8\nallowed_ip=34.107.59.81/32\nallowed_ip=20.10.109.61/32\npersistent_keepalive_interval=25\n`</span><span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">=</span> dev<span class=\"token punctuation\">.</span><span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// gets up automatically in macos, but not in windows</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to up: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">defer</span> dev<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// at this point connection is established and because of keepalive we will see in the logs that packets are sending</span>\n\n\t<span class=\"token comment\">// TODO: for windows something like:</span>\n\t<span class=\"token comment\">// netsh interface ipv4 show config</span>\n\t<span class=\"token comment\">// netsh interface ipv4 set address name=\"utun1\" static 10.14.14.2 255.0.0.0</span>\n\t<span class=\"token comment\">// route print</span>\n\t<span class=\"token comment\">// route -p add 10.0.0.0 MASK 255.0.0.0 10.14.14.2</span>\n\n\t<span class=\"token comment\">// additional changes we need: configure ip address of created utun interface, add row to an routing table, configure search names and dns</span>\n\n\t<span class=\"token comment\">// configure IP address</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ifconfig\"</span><span class=\"token punctuation\">,</span> interfaceName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"inet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10.14.14.2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10.14.14.2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alias\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to set IP address: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// add routes</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"route\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-inet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10.0.0.0/8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-interface\"</span><span class=\"token punctuation\">,</span> interfaceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to add route: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// configure DNS</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"networksetup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-setdnsservers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wi-Fi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10.0.0.10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to add route: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// configure search domains</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"networksetup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-setsearchdomains\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wi-Fi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dev.svc.cluster.local svc.cluster.local cluster.local\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to add route: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// wait for program to terminate</span>\n\n\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">,</span> syscall<span class=\"token punctuation\">.</span>SIGTERM<span class=\"token punctuation\">)</span>\n\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Interrupt<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>term<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>errs<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>dev<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">Verbosef</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nShutting down\"</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// ip address and routes are removed automatically</span>\n\n\t<span class=\"token comment\">// remove dns</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"networksetup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-setdnsservers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wi-Fi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to add route: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// remove searchdomains</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"networksetup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-setsearchdomains\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wi-Fi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to add route: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// instead of this function you may just hardcode interface name</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getNextInterfaceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tifaces<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Interfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tnum <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> iface <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ifaces <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>iface<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utun\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tidx<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ReplaceAll</span><span class=\"token punctuation\">(</span>iface<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span> idx <span class=\"token operator\">></span> num <span class=\"token punctuation\">{</span>\n\t\t\t\tnum <span class=\"token operator\">=</span> idx\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utun%d\"</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Notes:</p>\n<ul>\n<li>ofcourse it is not completed client but it is an starting point, it is possible to build anything with it</li>\n<li>for windows to work i needed to download <a href=\"https://www.wintun.net/\">wintun.dll</a> and put it somewhere where it will be accessible (for example to system32) after that it did worked out as well</li>\n<li>because of how everything configured keys are ephemeral and will be created each time</li>\n<li>to cleanup old keys, on server side, by schedule we will just remove keys that has big last handshake time</li>\n<li>we do not care about revoking keys anymore</li>\n</ul>"}},"pageContext":{"id":"c84257ff-31d8-5924-a0ac-724e1a11a90a"}},"staticQueryHashes":[],"slicesMap":{}}