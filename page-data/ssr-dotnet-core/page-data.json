{"componentChunkName":"component---src-templates-note-js","path":"/ssr-dotnet-core","result":{"data":{"remark":{"fields":{"path":"ssr-dotnet-core"},"meta":{"title":""},"headings":[{"value":"Server Side Rendering with Dotnet Core"}],"html":"<h1>Server Side Rendering with Dotnet Core</h1>\n<p>dotnet core spa services allow you to render any frontend library on backend</p>\n<p>detailed instructions can be found <a href=\"https://github.com/aspnet/JavaScriptServices/tree/dev/src/Microsoft.AspNetCore.SpaServices\">here</a></p>\n<p>the simples possible example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir acme\ncd acme\ndotnet new mvc\ndotnet add package Microsoft.AspNetCore.SpaServices\nnpm init -y -f\nnpm i -S aspnet-prerendering</code></pre></div>\n<p>few things left:</p>\n<p>add following line to <code class=\"language-text\">/Views/_ViewImports.cshtml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@addTagHelper *, Microsoft.AspNetCore.SpaServices</code></pre></div>\n<p>it will allow you to use <code class=\"language-text\">asp-prerender-module</code> tag helpers in your views</p>\n<p>replace <code class=\"language-text\">app.UseMvc(...)</code> in <code class=\"language-text\">Startup.cs</code> with this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseMvc</span><span class=\"token punctuation\">(</span>routes <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    routes<span class=\"token punctuation\">.</span><span class=\"token function\">MapRoute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"{controller=Home}/{action=Index}/{id?}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    routes<span class=\"token punctuation\">.</span><span class=\"token function\">MapSpaFallbackRoute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"spa-fallback\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">defaults</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> controller <span class=\"token operator\">=</span> <span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">,</span> action <span class=\"token operator\">=</span> <span class=\"token string\">\"Index\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>it is actually same only thing is added is <code class=\"language-text\">MapSpaFallbackRoute</code> wich will cach all routes to index view of home controller</p>\n<p>now, somewhere ins your <code class=\"language-text\">Views/Home/Index.cshtml</code> place following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"app\" asp-prerender-module=\"src/boot\">&lt;/div></code></pre></div>\n<p>and add <code class=\"language-text\">src/boot.js</code> with contents like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prerendering <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aspnet-prerendering'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> prerendering<span class=\"token punctuation\">.</span><span class=\"token function\">createServerRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n            &lt;h1>Hello from JS&lt;/h1>\n            &lt;p>Current time in Node is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p>\n            &lt;p>Request path is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p>\n            &lt;p>Absolute URL is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>absoluteUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p>\n        </span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and you are ready to go, try to run your app with <code class=\"language-text\">dotnet run</code></p>\n<p>you will see your mvc app as usual but take a look at our demo div which contains content generated on a server side</p>\n<p>dotnet core itself has predefined templates for react and angular, but virtually can render anything</p>\n<p>as a side note - we have checked and running such projects on dotnet is 3 times faster than node and seems to be more stable under load</p>"}},"pageContext":{"id":"2c6a73e6-015c-51fa-a0b3-acb4a4f33e03"}},"staticQueryHashes":[]}