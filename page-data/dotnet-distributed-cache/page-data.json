{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-distributed-cache","result":{"data":{"remark":{"fields":{"path":"dotnet-distributed-cache"},"meta":{"title":""},"headings":[{"value":"dotnet distributed cache"}],"html":"<h1>dotnet distributed cache</h1>\n<p>did you ever think about what actually does distributed cache brings?</p>\n<svg width=\"146pt\" height=\"188pt\" viewBox=\"0.00 0.00 145.62 188.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"max-width: 100%; height: auto;\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 184)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-184 141.6173,-184 141.6173,4 -4,4\"></polygon>\n<!-- loadbalancer -->\n<g id=\"node1\" class=\"node\">\n<title>loadbalancer</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"68.8086\" cy=\"-162\" rx=\"60.2325\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"68.8086\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">loadbalancer</text>\n</g>\n<!-- app1 -->\n<g id=\"node2\" class=\"node\">\n<title>app1</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"29.8086\" cy=\"-90\" rx=\"29.6185\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"29.8086\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">app1</text>\n</g>\n<!-- loadbalancer&#45;&gt;app1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>loadbalancer-&gt;app1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M59.1682,-144.2022C54.6005,-135.7695 49.0533,-125.5285 44.0159,-116.2288\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"47.044,-114.4705 39.2036,-107.3446 40.889,-117.8045 47.044,-114.4705\"></polygon>\n</g>\n<!-- app2 -->\n<g id=\"node3\" class=\"node\">\n<title>app2</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"107.8086\" cy=\"-90\" rx=\"29.6185\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"107.8086\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">app2</text>\n</g>\n<!-- loadbalancer&#45;&gt;app2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>loadbalancer-&gt;app2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M78.4491,-144.2022C83.0168,-135.7695 88.564,-125.5285 93.6014,-116.2288\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"96.7283,-117.8045 98.4137,-107.3446 90.5733,-114.4705 96.7283,-117.8045\"></polygon>\n</g>\n<!-- cache -->\n<g id=\"node4\" class=\"node\">\n<title>cache</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"68.8086\" cy=\"-18\" rx=\"33.0237\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"68.8086\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">cache</text>\n</g>\n<!-- app1&#45;&gt;cache -->\n<g id=\"edge3\" class=\"edge\">\n<title>app1-&gt;cache</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M39.2495,-72.5708C43.8483,-64.0807 49.475,-53.6929 54.5805,-44.2674\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"57.7694,-45.7286 59.4548,-35.2687 51.6144,-42.3946 57.7694,-45.7286\"></polygon>\n</g>\n<!-- app2&#45;&gt;cache -->\n<g id=\"edge4\" class=\"edge\">\n<title>app2-&gt;cache</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M98.3678,-72.5708C93.769,-64.0807 88.1423,-53.6929 83.0368,-44.2674\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"86.0029,-42.3946 78.1625,-35.2687 79.8479,-45.7286 86.0029,-42.3946\"></polygon>\n</g>\n</g>\n</svg>\n<p>to me it seems like it is not an distributed cache but rather single point of failure</p>\n<p>so here is an challange - lets implement our own distributed cache</p>\n<h2>cache interface</h2>\n<p>so in general our cache should be something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">INoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TKey</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEquatable<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">></span></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TVal</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">TVal<span class=\"token punctuation\">?</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TVal</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan<span class=\"token punctuation\">?</span></span> expire<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>cache impl</h2>\n<p>aka nothing special here, simple interface, which we may implement like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TKey</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEquatable<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">></span></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TVal</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TimeSpan</span> _timeSpan <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Timer<span class=\"token punctuation\">?</span></span> _timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">NoCache</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n        _timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Timer</span><span class=\"token punctuation\">(</span>RemoveExpiredItems<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TVal<span class=\"token punctuation\">?</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Item2 <span class=\"token operator\">&lt;</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> _dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TVal</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan<span class=\"token punctuation\">?</span></span> expire <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>expire <span class=\"token operator\">??</span> _timeSpan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveExpiredItems</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> state<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> key <span class=\"token keyword\">in</span> _dictionary<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Item2 <span class=\"token operator\">&lt;</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timer removing expired {Key}\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>cache usage</h2>\n<p>to use it we gonna need some fake api, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span></span> players<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> player <span class=\"token operator\">=</span> players<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n    player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player Number One\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    players<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id:int}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span></span> players<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> player <span class=\"token operator\">=</span> players<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n    player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Player </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    players<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we are pretending like if it was real service talking to some kind of database and caching responses</p>\n<h2>distributed cache</h2>\n<p>and now is a fun part we will have something like this:</p>\n<svg width=\"97pt\" height=\"188pt\" viewBox=\"0.00 0.00 96.62 188.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"max-width: 100%; height: auto;\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 184)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-184 92.6173,-184 92.6173,4 -4,4\"></polygon>\n<!-- LB -->\n<g id=\"node1\" class=\"node\">\n<title>LB</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"58.8086\" cy=\"-162\" rx=\"27\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"58.8086\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">LB</text>\n</g>\n<!-- app1 -->\n<g id=\"node2\" class=\"node\">\n<title>app1</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"29.8086\" cy=\"-90\" rx=\"29.6185\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"29.8086\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">app1</text>\n</g>\n<!-- LB&#45;&gt;app1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>LB-&gt;app1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M51.7886,-144.5708C48.4648,-136.3187 44.4189,-126.2738 40.7087,-117.0623\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"43.8473,-115.4864 36.8646,-107.5182 37.3542,-118.1018 43.8473,-115.4864\"></polygon>\n</g>\n<!-- app2 -->\n<g id=\"node3\" class=\"node\">\n<title>app2</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"58.8086\" cy=\"-18\" rx=\"29.6185\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"58.8086\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">app2</text>\n</g>\n<!-- LB&#45;&gt;app2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>LB-&gt;app2</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M62.9718,-144.1147C65.1929,-133.6529 67.6929,-120.1529 68.8086,-108 70.2715,-92.067 70.2715,-87.933 68.8086,-72 68.0241,-63.455 66.5552,-54.244 64.9802,-45.8914\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"68.3713,-45.001 62.9718,-35.8853 61.5082,-46.3786 68.3713,-45.001\"></polygon>\n</g>\n<!-- app1&#45;&gt;app2 -->\n<g id=\"edge3\" class=\"edge\">\n<title>app1-&gt;app2</title>\n<path fill=\"none\" stroke=\"#000000\" stroke-dasharray=\"5,2\" d=\"M40.7812,-62.7579C43.1296,-56.9274 45.6094,-50.7706 47.9533,-44.9511\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"37.4668,-61.6187 36.9772,-72.2022 43.9599,-64.234 37.4668,-61.6187\"></polygon>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"51.2329,-46.1766 51.7226,-35.593 44.7398,-43.5612 51.2329,-46.1766\"></polygon>\n</g>\n</g>\n</svg>\n<p>idea here is that we somehow should notify other instances of app whenever something changed to cached items</p>\n<p>to do so we will catch such changes into queue and in background notify all instances</p>\n<p>here is the end result:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDateTimeProvider<span class=\"token punctuation\">,</span> DateTimeProvider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHostedService</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span></span> players<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> player <span class=\"token operator\">=</span> players<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n    player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Player Number One\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    players<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id:int}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span></span> players<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> player <span class=\"token operator\">=</span> players<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n    player <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Player</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Player </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    players<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sync/players\"</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Player<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Sync<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">INoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TKey</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEquatable<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">></span></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TVal</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">TVal<span class=\"token punctuation\">?</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TVal</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan<span class=\"token punctuation\">?</span></span> expire<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Sync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoCacheOperation<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BackgroundService</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">INoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TKey</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEquatable<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">></span></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">TVal</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">class</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TimeSpan</span> _timeSpan <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">SemaphoreSlim</span> _semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Queue<span class=\"token punctuation\">&lt;</span>NoCacheOperation<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDateTimeProvider</span> _dateTimeProvider<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Timer<span class=\"token punctuation\">?</span></span> _timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">NoCache</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDateTimeProvider</span> dateTimeProvider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>NoCache<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dateTimeProvider <span class=\"token operator\">=</span> dateTimeProvider<span class=\"token punctuation\">;</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n        _timer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Timer</span><span class=\"token punctuation\">(</span>RemoveExpiredItems<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span>Zero<span class=\"token punctuation\">,</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TVal<span class=\"token punctuation\">?</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Item2 <span class=\"token operator\">&lt;</span> _dateTimeProvider<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> _dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TVal</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeSpan<span class=\"token punctuation\">?</span></span> expire <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>NoCacheOperationEnum<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> _dateTimeProvider<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>expire <span class=\"token operator\">??</span> _timeSpan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span>NoCacheOperationEnum<span class=\"token punctuation\">.</span>Remove<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoCacheOperationEnum</span> operation<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TVal<span class=\"token punctuation\">?</span></span> val <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _queue<span class=\"token punctuation\">.</span><span class=\"token function\">Enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NoCacheOperation<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> stoppingToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Background service started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> _semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">WaitAsync</span><span class=\"token punctuation\">(</span>stoppingToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Semaphore released\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stoppingToken<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_queue<span class=\"token punctuation\">.</span><span class=\"token function\">TryDequeue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> item <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            \n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dequeued {Item}\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// TODO: each T have its own endpoint, all T have same headless service, move to configuration</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> host <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NOCACHE_SYNC_HOST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> addresses <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Dns<span class=\"token punctuation\">.</span><span class=\"token function\">GetHostAddressesAsync</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> stoppingToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> address <span class=\"token keyword\">in</span> addresses<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MY_POD_IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsJsonAsync</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"http://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">address</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/sync/players\"</span></span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> stoppingToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sent {Item} to {Address}\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RemoveExpiredItems</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> state<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> key <span class=\"token keyword\">in</span> _dictionary<span class=\"token punctuation\">.</span>Keys<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_dictionary<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Item2 <span class=\"token operator\">&lt;</span> _dateTimeProvider<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timer removing expired {Key}\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Sync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoCacheOperation<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TVal<span class=\"token punctuation\">></span></span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Operation <span class=\"token operator\">==</span> NoCacheOperationEnum<span class=\"token punctuation\">.</span>Remove <span class=\"token operator\">&amp;&amp;</span> _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Synced removal of {Key}\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Operation <span class=\"token operator\">==</span> NoCacheOperationEnum<span class=\"token punctuation\">.</span>Set <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>_dictionary<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _dictionary<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Tuple<span class=\"token punctuation\">&lt;</span>TVal<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>_timeSpan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Synced addition of {Item}\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">NoCacheOperationEnum</span> <span class=\"token punctuation\">{</span> Set<span class=\"token punctuation\">,</span> Remove <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token generic-method\"><span class=\"token function\">NoCacheOperation</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NoCacheOperationEnum</span> Operation<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TKey</span> Key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue<span class=\"token punctuation\">?</span></span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDateTimeProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">DateTime</span> Now <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeProvider</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDateTimeProvider</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> Now <span class=\"token operator\">=></span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>take a closer look at how we are syncing changes in <code class=\"language-text\">Sync</code> method</p>\n<p>we are utilizing ability of DNS to return to us all ip addresses of all instances of our app</p>\n<p>here are followup files to wire everything up</p>\n<p><strong>Dockerfile</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">FROM mcr.microsoft.com/dotnet/sdk:6.0 as build\nWORKDIR /app\n\nCOPY *.csproj .\nRUN dotnet restore\n\nCOPY . .\nRUN dotnet publish -c Release -o publish\n\n\nFROM mcr.microsoft.com/dotnet/aspnet:6.0\nWORKDIR /app\nRUN apt update && apt install -y netcat dnsutils curl iputils-ping\nCOPY --from=build /app/publish .\nEXPOSE 80\nENV ASPNETCORE_ENVIRONMENT=Production\nENTRYPOINT [ \"dotnet\", \"DistributedCache.dll\"]</code></pre></div></p>\n<p><strong>kube.yml</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nocache\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> alexandrm@rabota.ua\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">revisionHistoryLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n      <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> alexandrm@rabota.ua\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nocache\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> gcr.io/majestic<span class=\"token punctuation\">-</span>cairn<span class=\"token punctuation\">-</span>171208/nocache<span class=\"token punctuation\">:</span><span class=\"token number\">1</span>\n          <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> Always\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NOCACHE_SYNC_HOST\n              <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> nocacheheadless\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MY_POD_IP\n              <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">fieldRef</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">fieldPath</span><span class=\"token punctuation\">:</span> status.podIP\n      <span class=\"token key atrule\">affinity</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">nodeAffinity</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">requiredDuringSchedulingIgnoredDuringExecution</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">nodeSelectorTerms</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">matchExpressions</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> poolDestination\n                    <span class=\"token key atrule\">operator</span><span class=\"token punctuation\">:</span> In\n                    <span class=\"token key atrule\">values</span><span class=\"token punctuation\">:</span>\n                      <span class=\"token punctuation\">-</span> app\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># Usual service, like everywhere else</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nocache\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> alexandrm@rabota.ua\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n<span class=\"token punctuation\">---</span>\n<span class=\"token comment\"># Headless service</span>\n<span class=\"token comment\"># the only difference, except name is \"clusterIP: None\" which makes service \"headless\"</span>\n<span class=\"token comment\"># headless here means that there wont be a dedicated ip address to balance requests</span>\n<span class=\"token comment\"># and instead dns will just return all alive po ip addresses</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nocacheheadless\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> alexandrm@rabota.ua\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> None\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> nocache\n    \n<span class=\"token comment\"># kubectl apply -f kube.yml</span>\n\n<span class=\"token comment\"># kubectl exec -it nocache-xxxxx -- bash</span></code></pre></div></p>\n<p>we are utilizing so called \"headless\" kubernetes service, it does mean, that inside kubernetes, whenever we are trying to resolve our service, we will receive all desired ip addresses which we may traverse</p>\n<p>Notes:</p>\n<ul>\n<li>yes, of course it may be done in parallel, also we should use keepalive connections and etc but for demo it is good enough already</li>\n<li>alternatively we may talk directly to kubernetes api to get all instances but it will be much more complicated without any need, but on the other hand we can catch addition of new instancess and fullfill their cache</li>\n<li>indeed there is possibility for race conditions - but that is a tradeoff in comparison to single point of failure (ok, you may deploy highly available cache - but how can you be sure it wont have same race conditions)</li>\n</ul>"}},"pageContext":{"id":"2d460848-9df1-50de-bbb7-0b69adfe50e7"}},"staticQueryHashes":[]}