{"componentChunkName":"component---src-templates-note-js","path":"/naive-bayes/","result":{"data":{"remark":{"fields":{"path":"naive-bayes"},"meta":{"title":""},"headings":[{"value":"Наивный байесовский классификатор"}],"html":"<h1>Наивный байесовский классификатор</h1>\n<p><a href=\"http://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B1%D0%B0%D0%B9%D0%B5%D1%81%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82%D0%BE%D1%80\">Наивный байесовский классификатор</a> - классификатор, на самом деле очень простой, за кучей формул скрывается очень простая идея.</p>\n<p>Заметка написана по мотивам этой статьи <a href=\"http://bazhenov.me/blog/2012/06/11/naive-bayes.html\">http://bazhenov.me/blog/2012/06/11/naive-bayes.html</a></p>\n<p>Предположим у нас есть следующая база знаний, о принадлежности сообщений к спаму:</p>\n<p><strong>SPAM</strong></p>\n<ul>\n<li>предоставляю услуги бухгалтера</li>\n<li>спешите купить виагру</li>\n</ul>\n<p><strong>NOT SPAM</strong></p>\n<ul>\n<li>надо купить молоко</li>\n</ul>\n<p><strong>Формула</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log(Dc/D) + foreach(word) { log( (Wc+1)/(V+Lc) ) }</code></pre></div>\n<p>Где:</p>\n<ul>\n<li><code class=\"language-text\">Dc</code> - количество <strong>документов</strong> в обучающей выборке принадлежащих классу <code class=\"language-text\">c</code> (2 SPAM документа и 1 - NOT SPAM)</li>\n<li><code class=\"language-text\">D</code> - общее количество <strong>документов</strong> в обучающей выборке (всего 3 документа)</li>\n<li><code class=\"language-text\">V</code> - общее количество <strong>слов</strong> во всех документах обучающей выборки (всего слов во всех документах - 8)</li>\n<li><code class=\"language-text\">Lc</code> - суммарное количество <strong>слов</strong> в документах класса <code class=\"language-text\">c</code> (искомого типа) в обучающей выборке (в SPAM документах - 6 слов, в NOT SPAM - 3)</li>\n<li><code class=\"language-text\">Wc</code> - сколько раз <strong>слово</strong> встречалось в документах класса <code class=\"language-text\">c</code> (искомого типа) в обучающей выборке</li>\n</ul>\n<p><strong>Таблица слов</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WORD            SPAM    NOT SPAM\n--------------------------------\nпредоставляю    1       0\nуслуги          1       0\nбухгалтера      1       0\nспешите         1       0\nкупить          1       1\nвиагру          1       0\nнадо            0       1\nмолоко          0       1</code></pre></div>\n<p>Другими словами мы просто разбили все обучаемые фразы на слова и записали их принадлежность к тому или иному классу (SPAM, NOT SPAM)</p>\n<p>Предположим мы хотим проверить фразу: \"надо купить сигареты\"</p>\n<p>Нам нужно посчитать вероятность принадлежности текста как к спаму так и в к не спаму.</p>\n<h2>SPAM</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log(Dc/D) + foreach(word) { log( (Wc+1)/(V+Lc) ) }</code></pre></div>\n<p><code class=\"language-text\">log(Dc/D)</code> - эдакая константа, в обучающей выборке 2 spam документа из 3, соотв. это дело будет записано как <code class=\"language-text\">log(2/3)</code></p>\n<p><code class=\"language-text\">V+Lc</code> - будет одинаковым для всех слов, <code class=\"language-text\">V</code> - 8 - именно столько всего слов в обучающей выборке, <code class=\"language-text\">Lc</code> - 6 - столько слов в обучающей выборке было в спамовых сообщениях.</p>\n<p>Далее для каждого слова, считаем log.</p>\n<p>\"надо\" тут у нас <code class=\"language-text\">Wc</code> равно 0, так как это слово не встречалось в обучающей выборке среди спама \"купить\" тут у нас <code class=\"language-text\">Wc</code> равно 1, так как это слово один раз встречалось в обучающей выборке среди спама \"сигареты\" тут у нас <code class=\"language-text\">Wc</code> равно 0, так как это слово не встречалось в обучающей выборке среди спама</p>\n<p>Результат:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log(2/3)\n+ log( (0 + 1)/(8+6) ) //надо\n+ log( (1 + 1)/(8+6) ) //купить\n+ log( (0 + 1)/(8+6) ) //сигареты\n= -7.629</code></pre></div>\n<h2>NOT SPAM</h2>\n<p>Теперь все то же самое для не спама</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log(Dc/D) + foreach(word) { log( (Wc+1)/(V+Lc) ) }</code></pre></div>\n<p><code class=\"language-text\">log(Dc/D)</code> - эдакая константа, в обучающей выборке 1 not spam документа из 3, соотв. это дело будет записано как <code class=\"language-text\">log(1/3)</code></p>\n<p><code class=\"language-text\">V+Lc</code> - будет одинаковым для всех слов, <code class=\"language-text\">V</code> - 8 - именно столько всего слов в обучающей выборке, <code class=\"language-text\">Lc</code> - 3 - столько слов в обучающей выборке было в NOT SPAM сообщениях.</p>\n<p>Далее для каждого слова, считаем log.</p>\n<p>\"надо\" тут у нас <code class=\"language-text\">Wc</code> равно 1, так как это слово один раз встречалось в обучающей выборке среди not spam \"купить\" тут у нас <code class=\"language-text\">Wc</code> равно 1, так как это слово один раз встречалось в обучающей выборке среди not spam \"сигареты\" тут у нас <code class=\"language-text\">Wc</code> равно 0, так как это слово не встречалось в обучающей выборке среди not spam</p>\n<p>Результат:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log(1/3)\n+ log( (1 + 1)/(8+3) ) //надо\n+ log( (1 + 1)/(8+3) ) //купить\n+ log( (0 + 1)/(8+3) ) //сигареты\n= -6.906</code></pre></div>\n<p>Из чего делаем вывод что фраза \"надо купить сигареты\" с большей вероятностью относиться к нормальным сообщениям нежели к spam'у.</p>\n<p>Вот так можно на листике бумаги расписать всю работу алгоритма.</p>\n<p>Если добавить в базу знаний к спам сообщенияе что нибуть вроде \"надо купить виагру\" - то результат поменяется в обратную сторону.</p>\n<p>Все это дело можно очень просто сделать на любом языке, вот пример (не претендующий на крутость, просто чтобы показать и запомнить как оно работает) <a href=\"http://mac-blog.org.ua/examples/bayes.html\">http://mac-blog.org.ua/examples/bayes.html</a></p>\n<p>Все это дело расковыривалось в процессе ресерча возможности заюзать встроенный в SQL Server классификатор документов (там все это работает из коробки), но к сожалению оказалось что тамошний term extract и term lookup умеют работать только с английским языком, что свело на нет все надежды.</p>\n<h2>Нет повести печальнее на свете</h2>\n<p>Реализация алготма на SQL или когда стоит посмотреть в сторону Mongodb</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> words<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> documents<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> documents <span class=\"token punctuation\">(</span>\n    uid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    total <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    spam <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> words <span class=\"token punctuation\">(</span>\n    uid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    word <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    spam <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    ham <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">REFERENCES</span> documents<span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span>\n        <span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">CASCADE</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> IncrementWordStats<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELIMITER</span> $$\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> IncrementWordStats<span class=\"token punctuation\">(</span>input_uid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span><span class=\"token punctuation\">,</span> input_word <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input_spam <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> input_ham <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\n    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> words <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> spam<span class=\"token punctuation\">,</span> ham<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>input_uid<span class=\"token punctuation\">,</span> input_word<span class=\"token punctuation\">,</span> input_spam<span class=\"token punctuation\">,</span> input_ham<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DUPLICATE</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">UPDATE</span> spam <span class=\"token operator\">=</span> spam <span class=\"token operator\">+</span> input_spam<span class=\"token punctuation\">,</span> ham <span class=\"token operator\">=</span> ham <span class=\"token operator\">+</span> input_ham<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span>$$\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> explode<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELIMITER</span> $$\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> explode<span class=\"token punctuation\">(</span>input <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\n    <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TEMPORARY</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> explode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TEMPORARY</span> <span class=\"token keyword\">TABLE</span> explode<span class=\"token punctuation\">(</span>\n        item <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span>Memory<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">SET</span> <span class=\"token variable\">@separator</span> <span class=\"token operator\">=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SET</span> <span class=\"token variable\">@separator_length</span> <span class=\"token operator\">=</span> CHAR_LENGTH<span class=\"token punctuation\">(</span><span class=\"token variable\">@separator</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">WHILE</span> input <span class=\"token operator\">!=</span> <span class=\"token string\">''</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">DO</span>\n        <span class=\"token keyword\">SET</span> <span class=\"token variable\">@current_value</span> <span class=\"token operator\">=</span> SUBSTRING_INDEX<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token variable\">@separator</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> explode <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@current_value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">SET</span> input <span class=\"token operator\">=</span> SUBSTRING<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> CHAR_LENGTH<span class=\"token punctuation\">(</span><span class=\"token variable\">@current_value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@separator_length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span>$$\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> AddDocument<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELIMITER</span> $$\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> AddDocument<span class=\"token punctuation\">(</span>input_uid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span><span class=\"token punctuation\">,</span> input_text <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">,</span> is_spam <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\n    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> documents <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">,</span> spam<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>input_uid<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> is_spam<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DUPLICATE</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">UPDATE</span> total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> spam <span class=\"token operator\">=</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">(</span>is_spam <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> spam <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>spam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">CALL</span> explode<span class=\"token punctuation\">(</span>input_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> words <span class=\"token punctuation\">(</span>uid<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">,</span> spam<span class=\"token punctuation\">,</span> ham<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">SELECT</span> input_uid <span class=\"token keyword\">AS</span> uid<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">AS</span> word<span class=\"token punctuation\">,</span> is_spam <span class=\"token keyword\">AS</span> spam<span class=\"token punctuation\">,</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">(</span>is_spam <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ham <span class=\"token keyword\">FROM</span> explode\n    <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DUPLICATE</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">UPDATE</span> spam <span class=\"token operator\">=</span> spam <span class=\"token operator\">+</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>spam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ham <span class=\"token operator\">=</span> ham <span class=\"token operator\">+</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>ham<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span>$$\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> CheckDocument<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DELIMITER</span> $$\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> CheckDocument<span class=\"token punctuation\">(</span>input_uid <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span><span class=\"token punctuation\">,</span> input_text <span class=\"token keyword\">TEXT</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\n    <span class=\"token keyword\">SELECT</span> total <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@D</span> <span class=\"token keyword\">FROM</span> documents <span class=\"token keyword\">WHERE</span> documents<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SELECT</span> spam <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@Dc_spam</span> <span class=\"token keyword\">FROM</span> documents <span class=\"token keyword\">WHERE</span> documents<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SELECT</span> total <span class=\"token operator\">-</span> spam <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@Dc_ham</span> <span class=\"token keyword\">FROM</span> documents <span class=\"token keyword\">WHERE</span> documents<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@V</span> <span class=\"token keyword\">FROM</span> words <span class=\"token keyword\">WHERE</span> words<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@Lc_spam</span>  <span class=\"token keyword\">FROM</span> words <span class=\"token keyword\">WHERE</span> words<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid <span class=\"token operator\">AND</span> spam <span class=\"token operator\">&lt;></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@Lc_ham</span>  <span class=\"token keyword\">FROM</span> words <span class=\"token keyword\">WHERE</span> words<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid <span class=\"token operator\">AND</span> ham <span class=\"token operator\">&lt;></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">CALL</span> explode<span class=\"token punctuation\">(</span>input_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">SELECT</span>\n        LOG<span class=\"token punctuation\">(</span><span class=\"token variable\">@Dc_spam</span> <span class=\"token operator\">/</span> <span class=\"token variable\">@D</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>LOG<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>Wc_spam <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">@V</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@Lc_spam</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> spam<span class=\"token punctuation\">,</span>\n        LOG<span class=\"token punctuation\">(</span><span class=\"token variable\">@Dc_ham</span> <span class=\"token operator\">/</span> <span class=\"token variable\">@D</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>LOG<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>Wc_ham <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">@V</span> <span class=\"token operator\">+</span> <span class=\"token variable\">@Lc_ham</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ham\n    <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">SELECT</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> words <span class=\"token keyword\">WHERE</span> words<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid <span class=\"token operator\">AND</span> words<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> item <span class=\"token operator\">AND</span> spam <span class=\"token operator\">&lt;></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> Wc_spam<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> words <span class=\"token keyword\">WHERE</span> words<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> input_uid <span class=\"token operator\">AND</span> words<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> item <span class=\"token operator\">AND</span> ham <span class=\"token operator\">&lt;></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> Wc_ham\n        <span class=\"token keyword\">FROM</span> explode\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> q<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span>$$\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CALL</span> AddDocument<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'предоставляю,услуги,бухгалтера'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CALL</span> AddDocument<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'спешите,купить,виагру'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CALL</span> AddDocument<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'надо,купить,молоко'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- SELECT * FROM words;</span>\n<span class=\"token comment\">-- SELECT * FROM documents;</span>\n\n<span class=\"token keyword\">CALL</span> CheckDocument<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'надо,купить,сигареты'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- @spam = -7.63, @ham = -6.90</span></code></pre></div>\n<p>В тестовом примере добавленно поле uid (user id), но суть от этого не меняеться. Задача немного не стандартная и на SQL решаеться, скажем так, не очень красиво.</p>\n<p>В табличку words нам надо не просто писать данные, а инкриментить их, что вызывает неудобства, а теперь гвоздь программы mongodb:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">findAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">word</span><span class=\"token operator\">:</span> <span class=\"token string\">'buy'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// найди мне запись с uid = 1 AND word = 'buy'</span>\n  <span class=\"token literal-property property\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$inc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ham</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// проикрименти поля spam и ham на соотв, значения</span>\n  <span class=\"token literal-property property\">upsert</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// если ничего не найдешь - вставь новую запись</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ну и вот более полная реализация:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'предоставляю'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'услуги'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'бухгалтера'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">findAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">word</span><span class=\"token operator\">:</span> word <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$inc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ham</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">upsert</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'спешите'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'купить'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'виагру'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">findAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">word</span><span class=\"token operator\">:</span> word <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$inc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ham</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">upsert</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'надо'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'купить'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'молоко'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">findAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">word</span><span class=\"token operator\">:</span> word <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$inc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ham</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">upsert</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">.</span><span class=\"token function\">findAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">total</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">upsert</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">D</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>total\n<span class=\"token keyword\">var</span> Dc_spam <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>spam\n<span class=\"token keyword\">var</span> Dc_ham <span class=\"token operator\">=</span> <span class=\"token constant\">D</span> <span class=\"token operator\">-</span> Dc_spam\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">V</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> Lc_spam <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> Lc_ham <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ham</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> spam <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Dc_spam <span class=\"token operator\">/</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> ham <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Dc_ham <span class=\"token operator\">/</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'надо'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'купить'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'сигареты'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> Wc_spam <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">word</span><span class=\"token operator\">:</span> word<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">spam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> Wc_ham <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">word</span><span class=\"token operator\">:</span> word<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ham</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  spam <span class=\"token operator\">=</span> spam <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Wc_spam <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">V</span> <span class=\"token operator\">+</span> Lc_spam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  ham <span class=\"token operator\">=</span> ham <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Wc_ham <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">V</span> <span class=\"token operator\">+</span> Lc_ham<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>spam<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -7.62</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ham<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -6.90</span></code></pre></div>"}},"pageContext":{"id":"85410a0d-367d-5352-8ff1-0fe02ec20e9b"}},"staticQueryHashes":[],"slicesMap":{}}