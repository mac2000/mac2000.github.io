{"componentChunkName":"component---src-templates-note-js","path":"/openssl-ca-key-csr-crt-san","result":{"data":{"remark":{"fields":{"path":"openssl-ca-key-csr-crt-san"},"meta":{"title":""},"headings":[{"value":"openssl ca, key, csr, crt and san"}],"html":"<h1>openssl ca, key, csr, crt and san</h1>\n<p>in original note about <a href=\"/openssl-ca-key-csr-crt\">self signed certs</a> I did created certs for given common name (CN)</p>\n<p>but now for yet another project gonna need certs with subject alternative names (SAN)</p>\n<p>here is sample script that did the trick:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> *.pem *.csr *.srl <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\"># Step 1: CA</span>\n<span class=\"token comment\"># ----------</span>\n\n<span class=\"token comment\"># create CA, it is secret, keep it safe</span>\nopenssl genrsa <span class=\"token parameter variable\">-out</span> ca.private.pem <span class=\"token number\">2048</span>\n\n<span class=\"token comment\"># create public CA, give it to everyone so they can add it to trusted root</span>\nopenssl req <span class=\"token parameter variable\">-x509</span> <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> ca.private.pem <span class=\"token parameter variable\">-out</span> ca.public.pem <span class=\"token parameter variable\">-days</span> <span class=\"token number\">10000</span> <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/C=UA/L=Kiev\"</span>\n\n<span class=\"token comment\"># Step 2: Certificate</span>\n<span class=\"token comment\"># -------------------</span>\n\n<span class=\"token comment\"># create certificate, it is secret, keep it safe</span>\nopenssl genrsa <span class=\"token parameter variable\">-out</span> cert.private.pem <span class=\"token number\">2048</span>\n\n<span class=\"token comment\"># create \"certificate signing request\" (csr)</span>\n<span class=\"token comment\"># add as many \"/CN=foo.mac-blog.org.ua/CN=bar.mac-blog.org.ua\" as needed</span>\nopenssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> cert.private.pem <span class=\"token parameter variable\">-out</span> cert.csr <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=demo.mac-blog.org.ua/CN=www.demo.mac-blog.org.ua\"</span>\n\n<span class=\"token comment\"># config</span>\n<span class=\"token comment\"># add same list of DNS here</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOT<span class=\"token bash punctuation\"> <span class=\"token operator\">>></span> cert.conf</span>\n[SAN]\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = demo.mac-blog.org.ua\nDNS.2 = www.demo.mac-blog.org.ua\nEOT</span>\n\n<span class=\"token comment\"># sign it with our CA</span>\nopenssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-in</span> cert.csr <span class=\"token parameter variable\">-CA</span> ca.public.pem <span class=\"token parameter variable\">-CAkey</span> ca.private.pem <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-out</span> cert.public.pem <span class=\"token parameter variable\">-days</span> <span class=\"token number\">10000</span> <span class=\"token parameter variable\">-extensions</span> SAN <span class=\"token parameter variable\">-extfile</span> cert.conf\n\n<span class=\"token comment\"># clean</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> *.csr *.srl cert.conf <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\"># check</span>\nopenssl x509 <span class=\"token parameter variable\">-in</span> cert.public.pem <span class=\"token parameter variable\">-text</span> <span class=\"token parameter variable\">-noout</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> DNS</code></pre></div></p>\n<p>after creation you may give it a try with following <code class=\"language-text\">default.conf</code></p>\n<p><div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n    listen              80;\n    listen              443 ssl;\n    server_name         demo.mac-blog.org.ua www.demo.mac-blog.org.ua;\n    ssl_certificate     cert.public.pem;\n    ssl_certificate_key cert.private.pem;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n}</code></pre></div></p>\n<p>and run it</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">443</span>:443 <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cert.public.pem:/etc/nginx/cert.public.pem <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cert.private.pem:/etc/nginx/cert.private.pem <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/default.conf:/etc/nginx/conf.d/default.conf nginx:alpine</code></pre></div>\n<p>checks</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-v</span> <span class=\"token parameter variable\">--cacert</span> ca.public.pem <span class=\"token parameter variable\">--resolve</span> demo.mac-blog.org.ua:443:127.0.0.1 https://demo.mac-blog.org.ua\n\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-v</span> <span class=\"token parameter variable\">--cacert</span> ca.public.pem <span class=\"token parameter variable\">--resolve</span> www.demo.mac-blog.org.ua:443:127.0.0.1 https://www.demo.mac-blog.org.ua\n\nopenssl s_client <span class=\"token parameter variable\">-connect</span> localhost:443 <span class=\"token operator\">&lt;</span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> openssl x509 <span class=\"token parameter variable\">-noout</span> <span class=\"token parameter variable\">-text</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> DNS:</code></pre></div>\n<p>with this we have both CN and SAN</p>"}},"pageContext":{"id":"cadf8401-363b-5384-8825-fbb85745af25"}},"staticQueryHashes":[]}