{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-mock-remote-http-server","result":{"data":{"remark":{"fields":{"path":"dotnet-mock-remote-http-server"},"meta":{"title":""},"headings":[{"value":"dotnet mock remote http server for unit tests"}],"html":"<h1>dotnet mock remote http server for unit tests</h1>\n<p>There are cases when our 3rd party dependencies are not allowed to be mocked.</p>\n<p>Usualy response is something like - just make a wrappers and technically it is correct and good approach.</p>\n<p>But what if we wish not to have wrappers and keep everything small and tiny?</p>\n<p>Here is one of possible approaches, suppose there is an 3rd party API, something like thisone:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpGet</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPeople</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SavePerson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Also they have published client library, which is something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PeopleClient</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PeopleClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Uri</span> uri<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetPeople</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SavePerson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because there is no interface and class is sealed we can not mock it.</p>\n<p>And because we do not wish to make and wrapper around it lets play with our mocked http server</p>\n<p>We gonna need testing library which will take care about all required dependencies</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Microsoft.AspNetCore.Mvc.Testing</code></pre></div>\n<p>And here is sample test:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Hosting</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Hosting<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">.</span>Features</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Http</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Xunit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">DemoTests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dotnet add package Microsoft.AspNetCore.Mvc.Testing</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeRemoteServer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">RemoteServerCanBeMocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// our dummy storage</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// our fake server</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebHostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UseKestrel</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*x => x.ListenLocalhost(8080)*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>app <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            app<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> context <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">==</span> HttpMethods<span class=\"token punctuation\">.</span>Get <span class=\"token operator\">&amp;&amp;</span> context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">==</span> <span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsJsonAsync</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">==</span> HttpMethods<span class=\"token punctuation\">.</span>Post <span class=\"token operator\">&amp;&amp;</span> context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">==</span> <span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ReadFromJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status400BadRequest<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsJsonAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"person is null\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span>\n                    <span class=\"token punctuation\">{</span>\n                        storage<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status201Created<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">{</span>\n                    context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> StatusCodes<span class=\"token punctuation\">.</span>Status404NotFound<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// now we can pass this uri to what ever client</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> uri <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>ServerFeatures<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IServerAddressesFeature<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>Addresses<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// http.BaseAddress = new Uri(\"http://localhost:8080\");</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> http <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        http<span class=\"token punctuation\">.</span>BaseAddress <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// check that there is no people</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> http<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetFromJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">NotNull</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// born person</span>\n        <span class=\"token keyword\">await</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">PostAsJsonAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span> <span class=\"token punctuation\">{</span> Age <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        list <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> http<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetFromJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/people\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">NotNull</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">NotEmpty</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Person</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With such approach we can mock any remote http server, yep we still need to implement its endpoints and it is not prove that everything will work with actual server but still allows for many cool things to be done in tests</p>\n<p>Note that we can pass our own port to kestresl server, technically if no port is given and server is starting it should bind to any available random port which should allow to run multiplse such servers in parallel</p>"}},"pageContext":{"id":"d9649442-14e2-5135-b892-bdec297f2f48"}},"staticQueryHashes":[]}