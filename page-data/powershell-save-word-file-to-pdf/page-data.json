{"componentChunkName":"component---src-templates-note-js","path":"/powershell-save-word-file-to-pdf/","result":{"data":{"remark":{"fields":{"path":"powershell-save-word-file-to-pdf"},"meta":{"title":""},"headings":[{"value":"PowerShell save word file to pdf"}],"html":"<h1>PowerShell save word file to pdf</h1>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$word</span> = <span class=\"token function\">new-object</span> <span class=\"token operator\">-</span>ComObject <span class=\"token string\">\"word.application\"</span>\n\n<span class=\"token variable\">$doc</span> = <span class=\"token variable\">$word</span><span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\Users\\AlexandrM\\Desktop\\TempCVArch\\CV Кулакова C&amp;B.doc\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$doc</span><span class=\"token punctuation\">.</span>SaveAs<span class=\"token punctuation\">(</span><span class=\"token namespace\">[ref]</span> <span class=\"token string\">\"C:\\Users\\AlexandrM\\Desktop\\1.pdf\"</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[ref]</span> 17<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$doc</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$word</span><span class=\"token punctuation\">.</span>Quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Такая штука нужна чтобы потом через ghostscript сделать вот так:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gswin32c <span class=\"token parameter variable\">-q</span> <span class=\"token parameter variable\">-dQUIET</span> <span class=\"token parameter variable\">-dPARANOIDSAFER</span> <span class=\"token parameter variable\">-dBATCH</span> <span class=\"token parameter variable\">-dNOPAUSE</span> <span class=\"token parameter variable\">-dNOPROMPT</span> <span class=\"token parameter variable\">-sDEVICE</span><span class=\"token operator\">=</span>pngalpha <span class=\"token parameter variable\">-sOutputFile</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>-%d.png <span class=\"token number\">1</span>.pdf</code></pre></div>\n<p>что нагенерит рисунки с страницами из pdf, в общем можно сделать свой google docs viewer</p>\n<p><strong>pdf2png.ps1:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># preferred dimensions</span>\n<span class=\"token comment\"># only width is required, height is calculated via A4 paper dimensions with aspect ratio</span>\n<span class=\"token variable\">$width</span> = 658\n<span class=\"token variable\">$height</span> = <span class=\"token namespace\">[math]</span>::Round<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>297 <span class=\"token operator\">/</span> 210<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$width</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># first argument must be existing file path</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$args</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">-gt</span> 0<span class=\"token punctuation\">)</span> <span class=\"token operator\">-and</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Test-Path</span> <span class=\"token variable\">$args</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\"># define some vars</span>\n    <span class=\"token variable\">$input_file</span> = <span class=\"token variable\">$args</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                                                                <span class=\"token comment\"># will be: \"C:\\Users\\AlexandrM\\Desktop\\test\\cv1.docx\"</span>\n    <span class=\"token variable\">$random_name</span> = <span class=\"token string\">\"_tmp_\"</span><span class=\"token operator\">+</span><span class=\"token namespace\">[system.io.Path]</span>::GetRandomFileName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$input_file_name</span> = <span class=\"token namespace\">[system.io.Path]</span>::GetFileNameWithoutExtension<span class=\"token punctuation\">(</span><span class=\"token variable\">$input_file</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\"># will be: \"cv1\"</span>\n    <span class=\"token variable\">$input_file_extension</span> = <span class=\"token namespace\">[system.io.Path]</span>::GetExtension<span class=\"token punctuation\">(</span><span class=\"token variable\">$input_file</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\"># will be: \".docx\"</span>\n    <span class=\"token variable\">$input_file_dir</span> = <span class=\"token namespace\">[system.io.Path]</span>::GetDirectoryName<span class=\"token punctuation\">(</span><span class=\"token variable\">$input_file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"</span>                <span class=\"token comment\"># will be: \"C:\\Users\\AlexandrM\\Desktop\\test\\\"</span>\n    <span class=\"token variable\">$pdf_file</span> = <span class=\"token variable\">$input_file_dir</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$random_name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".pdf\"</span>                                    <span class=\"token comment\"># will be: \"C:\\Users\\AlexandrM\\Desktop\\test\\cv1.pdf\"</span>\n    <span class=\"token variable\">$png_file</span> = <span class=\"token variable\">$input_file_dir</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$input_file_name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span>                                <span class=\"token comment\"># will be: \"C:\\Users\\AlexandrM\\Desktop\\test\\cv1.png\"</span>\n    <span class=\"token variable\">$png_parts_pattern_for_ghostscript</span> = <span class=\"token variable\">$input_file_dir</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$random_name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"---gs-%03d.png\"</span> <span class=\"token comment\"># will be: \"C:\\Users\\AlexandrM\\Desktop\\test\\cv1---gs-001.png\"</span>\n    <span class=\"token variable\">$png_parts_pattern_for_imagemagick</span> = <span class=\"token variable\">$input_file_dir</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$random_name</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"---gs-*.png\"</span>\n\n    <span class=\"token comment\"># if not pdf - convert via word</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input_file_extension</span> <span class=\"token operator\">-eq</span> <span class=\"token string\">\".pdf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$word</span> = <span class=\"token function\">new-object</span> <span class=\"token operator\">-</span>ComObject <span class=\"token string\">\"word.application\"</span>\n        <span class=\"token variable\">$doc</span> = <span class=\"token variable\">$word</span><span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span><span class=\"token variable\">$input_file</span><span class=\"token punctuation\">)</span>\n        <span class=\"token variable\">$doc</span><span class=\"token punctuation\">.</span>SaveAs<span class=\"token punctuation\">(</span><span class=\"token namespace\">[ref]</span> <span class=\"token variable\">$pdf_file</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[ref]</span> 17<span class=\"token punctuation\">)</span>\n        <span class=\"token variable\">$doc</span><span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token variable\">$word</span><span class=\"token punctuation\">.</span>Quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># if pdf created</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Test-Path</span> <span class=\"token variable\">$pdf_file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># extract pages from it as png images</span>\n        <span class=\"token function\">invoke-expression</span> <span class=\"token operator\">-</span>Command <span class=\"token string\">\"gswin32c.exe -dNOPAUSE -q -dBATCH -sDEVICE=png16m -dPDFFitPage -dFIXEDMEDIA -dDEVICEWIDTHPOINTS=<span class=\"token variable\">$width</span> -dDEVICEHEIGHTPOINTS=<span class=\"token variable\">$height</span> -sOutputFile=<span class=\"token variable\">$png_parts_pattern_for_ghostscript</span> <span class=\"token variable\">$pdf_file</span>\"</span>\n        <span class=\"token comment\"># merge all pages into one image</span>\n        <span class=\"token variable\">$montage_command</span> = <span class=\"token string\">\"montage -tile 1 -geometry \"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$width</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" -interlace PNG \"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$png_parts_pattern_for_imagemagick</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" `\"\"</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$png_file</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"`\"\"</span>\n        <span class=\"token function\">invoke-expression</span> <span class=\"token operator\">-</span>Command <span class=\"token variable\">$montage_command</span>\n        <span class=\"token comment\"># remove unneeded files</span>\n        <span class=\"token function\">Remove-Item</span> <span class=\"token variable\">$png_parts_pattern_for_imagemagick</span>\n        <span class=\"token function\">Remove-Item</span> <span class=\"token variable\">$pdf_file</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>На выходе этого срипта - рисунок который уже можно подключать на страничку - собственно вот и свой google docs viewer получился</p>\n<p><strong>How to get PID of Word.application</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Add-Type</span> <span class=\"token operator\">-</span>TypeDefinition @<span class=\"token string\">\"\nusing System;\nusing System.Runtime.InteropServices;\n\npublic static class Win32Api\n{\n[System.Runtime.InteropServices.DllImportAttribute( \"</span>User32<span class=\"token punctuation\">.</span>dll<span class=\"token string\">\", EntryPoint =  \"</span>GetWindowThreadProcessId<span class=\"token string\">\" )]\npublic static extern int GetWindowThreadProcessId ( [System.Runtime.InteropServices.InAttribute()] System.IntPtr hWnd, out int lpdwProcessId );\n\n[DllImport(\"</span>User32<span class=\"token punctuation\">.</span>dll<span class=\"token string\">\", CharSet = CharSet.Auto)]\npublic static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\n}\n\"</span>@\n\n<span class=\"token variable\">$word</span> = <span class=\"token function\">New-Object</span> <span class=\"token operator\">-</span>ComObject <span class=\"token string\">\"Word.application\"</span>\n\n<span class=\"token variable\">$caption</span> = <span class=\"token namespace\">[guid]</span>::NewGuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$word</span><span class=\"token punctuation\">.</span>Caption = <span class=\"token variable\">$caption</span>\n<span class=\"token variable\">$HWND</span> = <span class=\"token namespace\">[Win32Api]</span>::FindWindow<span class=\"token punctuation\">(</span><span class=\"token string\">\"OpusApp\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$caption</span><span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$wordPid</span> = <span class=\"token namespace\">[IntPtr]</span>::Zero\n<span class=\"token namespace\">[Win32Api]</span>::GetWindowThreadProcessId<span class=\"token punctuation\">(</span><span class=\"token variable\">$HWND</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">[ref]</span><span class=\"token variable\">$wordPid</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$word</span><span class=\"token punctuation\">.</span>visible = <span class=\"token boolean\">$true</span>\n<span class=\"token function\">Start-Sleep</span> <span class=\"token operator\">-</span>Seconds 5\n\n<span class=\"token function\">Stop-Process</span> <span class=\"token operator\">-</span>Id <span class=\"token variable\">$wordPid</span> <span class=\"token operator\">-</span>ErrorAction SilentlyContinue</code></pre></div>"}},"pageContext":{"id":"bc536343-f57e-5815-82ad-11c220a3156a"}},"staticQueryHashes":[],"slicesMap":{}}