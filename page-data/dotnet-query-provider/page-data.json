{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-query-provider/","result":{"data":{"remark":{"fields":{"path":"dotnet-query-provider"},"meta":{"title":""},"headings":[{"value":"dotnet query provider"}],"html":"<h1>dotnet query provider</h1>\n<p>or how to create your own entity framework like library</p>\n<p>many thanks to this tutorial notes - <a href=\"https://github.com/muhamad/iqueryable/blob/main/tut/02-Where_and_reusable_Expression_tree_visitor.md\">https://github.com/muhamad/iqueryable/blob/main/tut/02-Where_and_reusable_Expression_tree_visitor.md</a></p>\n<p>overall idea is that we will have piece of code that will recognize incomming expression tree and transform it to actual query that needs to be send to storage</p>\n<p>so whenever you have <code class=\"language-text\">IQueriable&lt;T></code> and write something like <code class=\"language-text\">users.Where(u => u.Name.StartsWith(\"A\"))</code> underneath nothing happens till you ask to materialize results</p>\n<p>when you ask for that <code class=\"language-text\">u => u.Name.StartsWith(\"A\")</code> expression will be converted to somethin like <code class=\"language-text\">select * from users where name like 'A%'</code></p>\n<p>for this to work we need to implement <code class=\"language-text\">IQueryProvider</code> method <code class=\"language-text\">Execute&lt;TResult>(Expression expression)</code></p>\n<p>which will be wired up with our <code class=\"language-text\">IQueryable&lt;T></code></p>\n<p>lets try to mimique entity framework</p>\n<p>generaly ef core context is something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">DbContext</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DbSet<span class=\"token punctuation\">&lt;</span>Customers<span class=\"token punctuation\">></span></span> Customers <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>inside, that <code class=\"language-text\">DbSet</code> implements <code class=\"language-text\">IQueryable</code>, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbSet<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DbSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryProvider</span> provider<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Provider <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">;</span>\n        Expression <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Constant</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DbSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryProvider</span> provider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Provider <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">;</span>\n        Expression <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Provider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Execute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Type</span> ElementType <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Expression</span> Expression <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryProvider</span> Provider <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>seems like in majority of the cases this one will be the same for any provider</p>\n<p>then we gonna need our provider and it will be something like this, also in majority of the cases:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IQueryProvider</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TResult</span> <span class=\"token generic-method\"><span class=\"token function\">Execute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryTranslator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// key piece here, look below</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">CreateQuery</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DbSet<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable</span> <span class=\"token function\">CreateQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and the final and most complicated and importan piece is the translator, here is an example from notes i have mentioned at the very beggining:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// The main meat of provider is here, taken from:</span>\n<span class=\"token comment\">/// https://github.com/muhamad/iqueryable/blob/main/tut/02-Where_and_reusable_Expression_tree_visitor.md</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryTranslator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ExpressionVisitor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringBuilder</span> _sb <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _sb<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">StripQuotes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>NodeType <span class=\"token operator\">==</span> ExpressionType<span class=\"token punctuation\">.</span>Quote<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UnaryExpression<span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Operand<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitMethodCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodCallExpression</span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>DeclaringType <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Queryable</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"Where\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM (\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\") AS T WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> lambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LambdaExpression<span class=\"token punctuation\">)</span><span class=\"token function\">StripQuotes</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>lambda<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The method '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">m<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">' is not supported\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitBinary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryExpression</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>NodeType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>And<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" AND \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>Or<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" OR \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>Equal<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>NotEqual<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt;> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>LessThan<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>LessThanOrEqual<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt;= \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>GreaterThan<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" > \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>GreaterThanOrEqual<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" >= \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The binary operator '{0}' is not supported\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>NodeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitConstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstantExpression</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value <span class=\"token keyword\">is</span> <span class=\"token class-name\">IQueryable</span> q<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// assume constant nodes within IQueryable&lt;T> are table references, e.g. T is a table name</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"SELECT * FROM </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">q<span class=\"token punctuation\">.</span>ElementType<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeCode</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> TypeCode<span class=\"token punctuation\">.</span>Boolean<span class=\"token punctuation\">:</span>\n                    _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> TypeCode<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span>\n                    _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">case</span> TypeCode<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The constant for '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">' is not supported\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                    _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberExpression</span> node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Expression <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>Expression<span class=\"token punctuation\">.</span>NodeType <span class=\"token operator\">==</span> ExpressionType<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The member '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">node<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">' is not supported\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>so now it is time to wire everything up:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">.</span>Expressions</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Dapper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Sqlite</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\ndotnet add package Microsoft.Data.Sqlite\ndotnet add package Dapper\n*/</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqliteConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data Source=:memory:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// if connection is not opened dapper will manually open/close it each time, and because database is in memory it will be wiped out each time</span>\n<span class=\"token comment\">// initialize sample database</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE TABLE Customers ( CustomerId INTEGER PRIMARY KEY, ContactName NVARCHAR, City NVARCHAR )\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO Customers (CustomerId, ContactName, City) VALUES (1, 'Michael', 'Kiev'), (2, 'Kira', 'Kiev')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the main demo - look ma entity framework without entity framework</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DbContext</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> customers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DbSet<span class=\"token punctuation\">&lt;</span>Customers<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> customer <span class=\"token keyword\">in</span> customers<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>City <span class=\"token operator\">==</span> <span class=\"token string\">\"Kiev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">.</span>ContactName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customers</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> CustomerId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> ContactName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> City <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IQueryProvider</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _connection<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Done once at start - find `IDBConnection.Query&lt;T>(\"SELECT * FROM T\", null, ...)` method</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MethodInfo</span> QueryMethod <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SqlMapper</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">GetMethods</span><span class=\"token punctuation\">(</span>BindingFlags<span class=\"token punctuation\">.</span>Public <span class=\"token operator\">|</span> BindingFlags<span class=\"token punctuation\">.</span>Static<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"Query\"</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span>IsGenericMethod <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">GetGenericArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">GetParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>QueryMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DbContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> connection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _connection <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TResult</span> <span class=\"token generic-method\"><span class=\"token function\">Execute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryTranslator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Dynamically call `_connection.Query&lt;Customers>(\"SELECT * FROM Customers\", null, null, true, null, CommandType.Text)`</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>TResult<span class=\"token punctuation\">)</span> QueryMethod\n            <span class=\"token punctuation\">.</span><span class=\"token function\">MakeGenericMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TResult</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>GenericTypeArguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// `TResult` is `IQueriable&lt;T>`, so `typeof(TResult).GenericTypeArguments[0].Name` will be name of T</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span> _connection<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> CommandType<span class=\"token punctuation\">.</span>Text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">CreateQuery</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DbSet<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryable</span> <span class=\"token function\">CreateQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DbSet<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IQueryable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DbSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryProvider</span> provider<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Provider <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">;</span>\n        Expression <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Constant</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DbSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQueryProvider</span> provider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Provider <span class=\"token operator\">=</span> provider<span class=\"token punctuation\">;</span>\n        Expression <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Provider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Execute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotImplementedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Type</span> ElementType <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Expression</span> Expression <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IQueryProvider</span> Provider <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;summary></span>\n<span class=\"token comment\">/// The main meat of provider is here, taken from:</span>\n<span class=\"token comment\">/// https://github.com/muhamad/iqueryable/blob/main/tut/02-Where_and_reusable_Expression_tree_visitor.md</span>\n<span class=\"token comment\">/// &lt;/summary></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryTranslator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ExpressionVisitor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringBuilder</span> _sb <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expression<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _sb<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">StripQuotes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>NodeType <span class=\"token operator\">==</span> ExpressionType<span class=\"token punctuation\">.</span>Quote<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UnaryExpression<span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Operand<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitMethodCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodCallExpression</span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>DeclaringType <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Queryable</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"Where\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM (\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\") AS T WHERE \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> lambda <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LambdaExpression<span class=\"token punctuation\">)</span><span class=\"token function\">StripQuotes</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>lambda<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The method '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">m<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">' is not supported\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitBinary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryExpression</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>NodeType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>And<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" AND \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>Or<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" OR \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>Equal<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" = \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>NotEqual<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt;> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>LessThan<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>LessThanOrEqual<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt;= \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>GreaterThan<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" > \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> ExpressionType<span class=\"token punctuation\">.</span>GreaterThanOrEqual<span class=\"token punctuation\">:</span>\n                _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" >= \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The binary operator '{0}' is not supported\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>NodeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitConstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstantExpression</span> c<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value <span class=\"token keyword\">is</span> <span class=\"token class-name\">IQueryable</span> q<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// assume constant nodes within IQueryable&lt;T> are table references, e.g. T is a table name</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"SELECT * FROM </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">q<span class=\"token punctuation\">.</span>ElementType<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeCode</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> TypeCode<span class=\"token punctuation\">.</span>Boolean<span class=\"token punctuation\">:</span>\n                    _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> TypeCode<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span>\n                    _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">case</span> TypeCode<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The constant for '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">c<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">' is not supported\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                    _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Expression</span> <span class=\"token function\">VisitMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberExpression</span> node<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Expression <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>Expression<span class=\"token punctuation\">.</span>NodeType <span class=\"token operator\">==</span> ExpressionType<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _sb<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"The member '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">node<span class=\"token punctuation\">.</span>Member<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">' is not supported\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>in this example we are creating sample database and query it with our custom query provider</p>\n<p>idea behind query provider is so awesome, imagine, if you implement such provider for elasticsearch, firestore, mongodb, etc you may just replace implementation without touching the code at all, non of the ORM in existence can do this</p>\n<p>but unfortunately that piece with translation is really hard and error proune, thats why we do not see much of them</p>"}},"pageContext":{"id":"917dc498-ba4e-5240-b9fd-0f260fb85a2d"}},"staticQueryHashes":[],"slicesMap":{}}