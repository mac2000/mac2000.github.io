{"componentChunkName":"component---src-templates-note-js","path":"/sql-clr-aggregate-boilerplate","result":{"data":{"remark":{"fields":{"path":"sql-clr-aggregate-boilerplate"},"meta":{"title":""},"headings":[{"value":"SQL Server CLR Aggregate boilerplate"}],"html":"<h1>SQL Server CLR Aggregate boilerplate</h1>\n<p>Boilerplate sample of custom aggregate CLR for SQL Server</p>\n<p>First of all you will need ClassLibrary project created (in my case \"Median\"). With code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>SqlServer<span class=\"token punctuation\">.</span>Server</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>SqlTypes</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SqlUserDefinedAggregate</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>\n\t\tFormat<span class=\"token punctuation\">.</span>UserDefined<span class=\"token punctuation\">,</span>              <span class=\"token comment\">// because of List&lt;double></span>\n\t\tIsInvariantToDuplicates <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// receiving the same value again changes the result</span>\n\t\tIsInvariantToNulls <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// receiving a NULL value changes the result</span>\n\t\tIsInvariantToOrder <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// the order of the values doesn't affect the result</span>\n\t\tIsNullIfEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// if no values are given the result is null</span>\n\t\tMaxByteSize <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>                 <span class=\"token comment\">// without this thing you will get \"The size (0) for \"Median.Median\" is not in the valid range. Size must be -1 or a number between 1 and 8000.\" error</span>\n<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Median</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IBinarySerialize</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">SqlDouble</span> <span class=\"token function\">Terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Skip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> collection<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">OrderBy</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Skip</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> Boilerplate</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span> collection<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tcollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Accumulate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlDouble</span> number<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tcollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Median</span> mymed<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tcollection<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>mymed<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryReader</span> reader<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> count <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadInt32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tcollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BinaryWriter</span> writer<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\twriter<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that we do not wrap our class into namespace, you may do it but later on while importing to SQL you should do not forget about it.</p>\n<p>You may call your class as you wish, it is not required to have same name, while adding your clr to sql you will define by hand which classes from which dlls should be imported.</p>\n<p>My first attempt was to use just <code class=\"language-text\">[SqlUserDefinedAggregate(Format.UserDefined)]</code> but I immediatelly got <code class=\"language-text\">The size (0) for \"Median.Median\" is not in the valid range. Size must be -1 or a number between 1 and 8000.</code> error.</p>\n<p>If you with to work with other types of data than doubles you should replace it in boilerplate region.</p>\n<p>If your code uses something like <code class=\"language-text\">List&lt;int></code> you must implement <code class=\"language-text\">IBinarySerialize</code>. In our case all we have as simple as possible boilerplate implementation.</p>\n<p>Main logic of your aggregation is in <code class=\"language-text\">Terminate</code> method. It may be not best idea especially if you working with really huge amount of values.</p>\n<p>And here is how to use it from SQL:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- STEP 1. Enable CLR</span>\nsp_configure <span class=\"token string\">'clr enabled'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\nGO\n<span class=\"token keyword\">RECONFIGURE</span>\nGO\n\n<span class=\"token comment\">-- STEP 2. reCREATE assembly and function</span>\n<span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sys<span class=\"token punctuation\">.</span>objects <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Median'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DROP</span> AGGREGATE Median\nGO\n\n<span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sys<span class=\"token punctuation\">.</span>assemblies <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Median'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DROP</span> ASSEMBLY Median\nGO\n\n<span class=\"token keyword\">CREATE</span> ASSEMBLY Median <span class=\"token keyword\">FROM</span> <span class=\"token string\">'C:\\Users\\Alexandr\\Documents\\visual studio 2015\\Projects\\Median\\Median\\bin\\Debug\\Median.dll'</span>\nGO\n\n<span class=\"token keyword\">CREATE</span> AGGREGATE <span class=\"token punctuation\">[</span>dbo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>Median<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">@number</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">]</span> EXTERNAL NAME <span class=\"token punctuation\">[</span>Median<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>Median<span class=\"token punctuation\">]</span>\nGO\n\n<span class=\"token comment\">-- Step 3. Sample</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token comment\">#Temp</span>\n<span class=\"token punctuation\">(</span>\n\tSalary <span class=\"token keyword\">FLOAT</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token comment\">#Temp VALUES (10), (11), (9), (20), (5);</span>\n<span class=\"token keyword\">SELECT</span> dbo<span class=\"token punctuation\">.</span>Median<span class=\"token punctuation\">(</span>Salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token comment\">#Temp;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token comment\">#Temp;</span>\nGO</code></pre></div>\n<p>Note that <code class=\"language-text\">[dbo].[Median]</code> may be changed to anything you want.</p>\n<p>While creating assembly do not forget to fix path to DLL file, and take a note that you can call your assembly anyway you want, but should use same name when creating aggregation function.</p>\n<p><code class=\"language-text\">EXTERNAL NAME [Median].[Median]</code> should be read as <code class=\"language-text\">EXTERNAL NAME [my_assembly_name].[my_class_name]</code> and if you wrap your class with namespace it should be something like <code class=\"language-text\">EXTERNAL NAME [my_assembly_name].[my_namespace].[my_class_name]</code>.</p>\n<p>You may also wish to look at example of <a href=\"http://mac-blog.org.ua/sql-clr-split-string/\">Safe split string</a> and <a href=\"http://mac-blog.org.ua/sql-xml-csharp/#xslt-your-xml-right-inside-sql\">XSLT inside SQL</a></p>"}},"pageContext":{"id":"b6ade344-e370-52b7-809a-bc78d4f07213"}},"staticQueryHashes":[]}