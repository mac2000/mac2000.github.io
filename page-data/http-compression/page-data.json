{"componentChunkName":"component---src-templates-note-js","path":"/http-compression","result":{"data":{"remark":{"fields":{"path":"http-compression"},"meta":{"title":""},"headings":[{"value":"HTTP Compression"},{"value":"nginx"}],"html":"<h1>HTTP Compression</h1>\n<p>here is an \"usual\" request flow:</p>\n<svg width=\"291pt\" height=\"476pt\" viewBox=\"0.00 0.00 290.70 476.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"max-width: 100%; height: auto;\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 472)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-472 286.6971,-472 286.6971,4 -4,4\"></polygon>\n<!-- user -->\n<g id=\"node1\" class=\"node\">\n<title>user</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"112.8913\" cy=\"-450\" rx=\"27.2447\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"112.8913\" y=\"-445.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">user</text>\n</g>\n<!-- cloudflare -->\n<g id=\"node2\" class=\"node\">\n<title>cloudflare</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"112.8913\" cy=\"-378\" rx=\"50.3586\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"112.8913\" y=\"-373.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">cloudflare</text>\n</g>\n<!-- user&#45;&gt;cloudflare -->\n<g id=\"edge1\" class=\"edge\">\n<title>user-&gt;cloudflare</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M112.8913,-431.8314C112.8913,-424.131 112.8913,-414.9743 112.8913,-406.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.3914,-406.4132 112.8913,-396.4133 109.3914,-406.4133 116.3914,-406.4132\"></polygon>\n</g>\n<!-- nginx -->\n<g id=\"node3\" class=\"node\">\n<title>nginx</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"112.8913\" cy=\"-306\" rx=\"33.0682\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"112.8913\" y=\"-301.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">nginx</text>\n</g>\n<!-- cloudflare&#45;&gt;nginx -->\n<g id=\"edge2\" class=\"edge\">\n<title>cloudflare-&gt;nginx</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M112.8913,-359.8314C112.8913,-352.131 112.8913,-342.9743 112.8913,-334.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.3914,-334.4132 112.8913,-324.4133 109.3914,-334.4133 116.3914,-334.4132\"></polygon>\n</g>\n<!-- graphql -->\n<g id=\"node4\" class=\"node\">\n<title>graphql</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"112.8913\" cy=\"-234\" rx=\"40.5712\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"112.8913\" y=\"-229.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">graphql</text>\n</g>\n<!-- nginx&#45;&gt;graphql -->\n<g id=\"edge3\" class=\"edge\">\n<title>nginx-&gt;graphql</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M112.8913,-287.8314C112.8913,-280.131 112.8913,-270.9743 112.8913,-262.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.3914,-262.4132 112.8913,-252.4133 109.3914,-262.4133 116.3914,-262.4132\"></polygon>\n</g>\n<!-- javascript -->\n<g id=\"node5\" class=\"node\">\n<title>javascript</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"61.8913\" cy=\"-162\" rx=\"48.6501\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"61.8913\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">javascript</text>\n</g>\n<!-- graphql&#45;&gt;javascript -->\n<g id=\"edge4\" class=\"edge\">\n<title>graphql-&gt;javascript</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M100.5456,-216.5708C94.4516,-207.9675 86.9774,-197.4156 80.2308,-187.8911\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"82.9364,-185.6554 74.3001,-179.5182 77.2242,-189.7016 82.9364,-185.6554\"></polygon>\n</g>\n<!-- dotnet -->\n<g id=\"node6\" class=\"node\">\n<title>dotnet</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"166.8913\" cy=\"-162\" rx=\"35.3528\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"166.8913\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">dotnet</text>\n</g>\n<!-- graphql&#45;&gt;dotnet -->\n<g id=\"edge5\" class=\"edge\">\n<title>graphql-&gt;dotnet</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M125.9632,-216.5708C132.5298,-207.8153 140.61,-197.0418 147.8513,-187.3867\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"150.7398,-189.3687 153.9398,-179.2687 145.1398,-185.1687 150.7398,-189.3687\"></polygon>\n</g>\n<!-- restapi -->\n<g id=\"node7\" class=\"node\">\n<title>restapi</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"56.8913\" cy=\"-90\" rx=\"36.5536\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"56.8913\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">restapi</text>\n</g>\n<!-- javascript&#45;&gt;restapi -->\n<g id=\"edge6\" class=\"edge\">\n<title>javascript-&gt;restapi</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M60.6296,-143.8314C60.0949,-136.131 59.459,-126.9743 58.8647,-118.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"62.3545,-118.1467 58.17,-108.4133 55.3713,-118.6317 62.3545,-118.1467\"></polygon>\n</g>\n<!-- python -->\n<g id=\"node9\" class=\"node\">\n<title>python</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"166.8913\" cy=\"-90\" rx=\"37.7256\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"166.8913\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">python</text>\n</g>\n<!-- dotnet&#45;&gt;python -->\n<g id=\"edge8\" class=\"edge\">\n<title>dotnet-&gt;python</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M166.8913,-143.8314C166.8913,-136.131 166.8913,-126.9743 166.8913,-118.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"170.3914,-118.4132 166.8913,-108.4133 163.3914,-118.4133 170.3914,-118.4132\"></polygon>\n</g>\n<!-- redis -->\n<g id=\"node11\" class=\"node\">\n<title>redis</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"252.8913\" cy=\"-90\" rx=\"29.6127\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"252.8913\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">redis</text>\n</g>\n<!-- dotnet&#45;&gt;redis -->\n<g id=\"edge10\" class=\"edge\">\n<title>dotnet-&gt;redis</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M185.552,-146.3771C197.8251,-136.102 214.0425,-122.5246 227.4868,-111.2689\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"230.0186,-113.714 235.4394,-104.6109 225.525,-108.3467 230.0186,-113.714\"></polygon>\n</g>\n<!-- sqlserver -->\n<g id=\"node8\" class=\"node\">\n<title>sqlserver</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"45.8913\" cy=\"-18\" rx=\"45.7829\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"45.8913\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">sqlserver</text>\n</g>\n<!-- restapi&#45;&gt;sqlserver -->\n<g id=\"edge7\" class=\"edge\">\n<title>restapi-&gt;sqlserver</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M54.1156,-71.8314C52.9391,-64.131 51.5402,-54.9743 50.2327,-46.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"53.6746,-45.7699 48.7045,-36.4133 46.7549,-46.8272 53.6746,-45.7699\"></polygon>\n</g>\n<!-- elasticsearch -->\n<g id=\"node10\" class=\"node\">\n<title>elasticsearch</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"169.8913\" cy=\"-18\" rx=\"60.2248\" ry=\"18\"></ellipse>\n<text text-anchor=\"middle\" x=\"169.8913\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">elasticsearch</text>\n</g>\n<!-- python&#45;&gt;elasticsearch -->\n<g id=\"edge9\" class=\"edge\">\n<title>python-&gt;elasticsearch</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M167.6483,-71.8314C167.9692,-64.131 168.3507,-54.9743 168.7073,-46.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"172.2047,-46.5503 169.1241,-36.4133 165.2107,-46.2589 172.2047,-46.5503\"></polygon>\n</g>\n</g>\n</svg>\n<p>lets start from the back</p>\n<p>we have some service and it returns 200kb of data</p>\n<p>it does not matter how fast our service is, even if it will return all data from memory, there will be some time taken to transmit bytes over the wire</p>\n<p>for a reference we have something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kb/{kb:int}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> kb<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> kb <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>so we have some endpoint to perform tests</p>\n<p>at beginning we are going to check if thats work at al:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:5000/kb/2</code></pre></div>\n<p>it should return us a bunch of <code class=\"language-text\">a</code> letters</p>\n<p>now lets check the response size:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:5000/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span></code></pre></div>\n<p>this one will print <code class=\"language-text\">2048</code>, exactly the number of bytes we have asked for</p>\n<p>now lets check the same thing but also measure total time:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:5000/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'bytes: %{size_download} took: %{time_total}\\n'</span></code></pre></div>\n<p>in my case it returned:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">bytes:</span> <span class=\"token number\">2048</span> took<span class=\"token operator\">:</span> <span class=\"token number\">0.009286</span></code></pre></div>\n<p>so we can say that localy we have downloaded 2kb of data in 9ms</p>\n<p>next we are going to introduce compression</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddResponseCompression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// POI</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseResponseCompression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// POI</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kb/{kb:int}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> kb<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> kb <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>next measurement, but now we are going to request 200kb of data:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:5000/kb/200 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'bytes: %{size_download} took: %{time_total}\\n'</span></code></pre></div>\n<p>and we receive:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">bytes:</span> <span class=\"token number\">204800</span> took<span class=\"token operator\">:</span> <span class=\"token number\">0.176370</span></code></pre></div>\n<p>what is interesting, concretely in this case it took 176ms, localy</p>\n<p>now lets try the same, but with compression:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:5000/kb/200 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'bytes: %{size_download} took: %{time_total}\\n'</span></code></pre></div>\n<p>and we got</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">bytes:</span> <span class=\"token number\">935</span> took<span class=\"token operator\">:</span> <span class=\"token number\">0.075951</span></code></pre></div>\n<p>we can not say that it is a dealbreaker, but traffic reduced houndrets of times, and that affected not only overall response time which took x2 times less, but also it will affect traffic consts</p>\n<h2>How does it work</h2>\n<p>If client can work with compressed responses, he will add <code class=\"language-text\">Accept-Encoding</code> header to requests with comma separated list of supported compression algorithms.</p>\n<p>The server will add <code class=\"language-text\">Content-Encoding</code> header to response notifying client about choosen compressim algorithm</p>\n<p>Actualy it works the same way as \"content negotiation\" but for compression</p>\n<p>In practice it looks like this:</p>\n<p>If we are sending requests without asking for compression we will receive raw response (response does not contain <code class=\"language-text\">Content-Encoding</code> header and response body is raw/readable)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> localhost:5000/kb/1</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK\n<span class=\"token property\">Content-Type:</span> text<span class=\"token operator\">/</span>plain<span class=\"token operator\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n<span class=\"token property\">Date:</span> Sun<span class=\"token punctuation\">,</span> <span class=\"token date number\">16 Oct 2022</span> <span class=\"token time number\">12:14:57</span> GMT\n<span class=\"token property\">Server:</span> Kestrel\n<span class=\"token property\">Transfer-Encoding:</span> chunked\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>If in request we will say that we may work with zip by adding <code class=\"language-text\">Accept-Encoding</code> header with <code class=\"language-text\">gzip</code> value</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-i</span> localhost:5000/kb/1 <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span></code></pre></div>\n<p>we will receive something like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK\n<span class=\"token property\">Content-Type:</span> text<span class=\"token operator\">/</span>plain<span class=\"token operator\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n<span class=\"token property\">Date:</span> Sun<span class=\"token punctuation\">,</span> <span class=\"token date number\">16 Oct 2022</span> <span class=\"token time number\">12:17:21</span> GMT\n<span class=\"token property\">Server:</span> Kestrel\n<span class=\"token property\">Content-Encoding:</span> gzip\n<span class=\"token property\">Transfer-Encoding:</span> chunked\n<span class=\"token property\">Vary:</span> Accept<span class=\"token operator\">-</span>Encoding\n\n<span class=\"token property\">Warning:</span> Binary output can mess up your terminal<span class=\"token punctuation\">.</span> Use <span class=\"token string\">\"--output -\"</span> to tell\n<span class=\"token property\">Warning:</span> curl to output it to your terminal anyway<span class=\"token punctuation\">,</span> or consider \"<span class=\"token operator\">-</span><span class=\"token operator\">-</span>output\n<span class=\"token property\">Warning:</span> <span class=\"token operator\">&lt;</span>FILE<span class=\"token operator\">></span>\" to save to a file<span class=\"token punctuation\">.</span></code></pre></div>\n<p>From one side, we can tell that response is compressed because there is <code class=\"language-text\">Content-Encoding: gzip</code> header, but what is event more interesting, curl warns us that response seems to be some binary data and it can not be handled.</p>\n<p>To \"fix\" this, we can add <code class=\"language-text\">--compressed</code> flag to cul command</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-i</span> localhost:5000/kb/1 <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">--compressed</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK\n<span class=\"token property\">Content-Type:</span> text<span class=\"token operator\">/</span>plain<span class=\"token operator\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n<span class=\"token property\">Date:</span> Sun<span class=\"token punctuation\">,</span> <span class=\"token date number\">16 Oct 2022</span> <span class=\"token time number\">12:19:57</span> GMT\n<span class=\"token property\">Server:</span> Kestrel\n<span class=\"token property\">Content-Encoding:</span> gzip\n<span class=\"token property\">Transfer-Encoding:</span> chunked\n<span class=\"token property\">Vary:</span> Accept<span class=\"token operator\">-</span>Encoding\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Novadays brotly is more prefered compression algorithms:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-i</span> localhost:5000/kb/1 <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: br'</span> <span class=\"token parameter variable\">--compressed</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK\n<span class=\"token property\">Content-Type:</span> text<span class=\"token operator\">/</span>plain<span class=\"token operator\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n<span class=\"token property\">Date:</span> Sun<span class=\"token punctuation\">,</span> <span class=\"token date number\">16 Oct 2022</span> <span class=\"token time number\">12:24:57</span> GMT\n<span class=\"token property\">Server:</span> Kestrel\n<span class=\"token property\">Content-Encoding:</span> br\n<span class=\"token property\">Transfer-Encoding:</span> chunked\n<span class=\"token property\">Vary:</span> Accept<span class=\"token operator\">-</span>Encoding\n\n<span class=\"token property\">curl:</span> <span class=\"token operator\">(</span><span class=\"token number\">61</span><span class=\"token operator\">)</span> Unrecognized content encoding type<span class=\"token punctuation\">.</span> libcurl understands deflate<span class=\"token punctuation\">,</span> gzip content encodings<span class=\"token punctuation\">.</span></code></pre></div>\n<p>From a response we can tell that server successfully processed request and responded with response compressed with brotly, but curl can not handle it</p>\n<h2>Offtopic: how can we check if server uses compression?</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>HttpLogging</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddResponseCompression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpLogging</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> options<span class=\"token punctuation\">.</span>LoggingFields <span class=\"token operator\">=</span> HttpLoggingFields<span class=\"token punctuation\">.</span>All<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// POI</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseHttpLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// POI // FIXME: I should go after compression, left here by intent to observe compressed response bodies</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseResponseCompression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kb/{kb:int}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> kb<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> kb <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By adding http logging we will see somethin like:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">info:</span> Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>HttpLogging<span class=\"token punctuation\">.</span>HttpLoggingMiddleware<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token property\">Request:</span>\n      <span class=\"token property\">Protocol:</span> HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\n      <span class=\"token property\">Method:</span> GET\n      <span class=\"token property\">Scheme:</span> http\n      <span class=\"token property\">PathBase:</span>\n      <span class=\"token property\">Path:</span> <span class=\"token file-path string\">/kb/1</span>\n      <span class=\"token property\">Accept:</span> <span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token operator\">*</span>\n      <span class=\"token property\">Host:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">5000</span>\n      <span class=\"token property\">User-Agent:</span> curl<span class=\"token operator\">/</span><span class=\"token number\">7.79.1</span>\n      <span class=\"token property\">Accept-Encoding:</span> gzip\n<span class=\"token property\">info:</span> Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Routing<span class=\"token punctuation\">.</span>EndpointMiddleware<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      Executing endpoint <span class=\"token string\">'HTTP: GET /kb/{kb:int}'</span>\n<span class=\"token property\">info:</span> Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>HttpLogging<span class=\"token punctuation\">.</span>HttpLoggingMiddleware<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n      <span class=\"token property\">Response:</span>\n      <span class=\"token property\">StatusCode:</span> <span class=\"token number\">200</span>\n      <span class=\"token property\">Content-Type:</span> text<span class=\"token operator\">/</span>plain<span class=\"token operator\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n      <span class=\"token property\">Content-Encoding:</span> <span class=\"token punctuation\">[</span>Redacted<span class=\"token punctuation\">]</span>\n      <span class=\"token property\">Vary:</span> <span class=\"token punctuation\">[</span>Redacted<span class=\"token punctuation\">]</span>\n<span class=\"token property\">info:</span> Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Routing<span class=\"token punctuation\">.</span>EndpointMiddleware<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      Executed endpoint <span class=\"token string\">'HTTP: GET /kb/{kb:int}'</span>\n<span class=\"token property\">info:</span> Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>HttpLogging<span class=\"token punctuation\">.</span>HttpLoggingMiddleware<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n      <span class=\"token property\">ResponseBody:</span> JL�<span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token operator\">#</span><span class=\"token number\">5</span>����U<span class=\"token operator\">|</span></code></pre></div>\n<p>Note: by intent i have added middleware in a wrong order, because it is realy obvious if compression is used or not by observing all that crappy <code class=\"language-text\">���������</code></p>\n<h2>Why do it need all that theoretic part?</h2>\n<p>The key thing here is that it is not possible to enable compression only by doing something on server or client sides, both need to be prepared for this.</p>\n<p>In the simples case from client side we need something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">builder<span class=\"token punctuation\">.</span>Services\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Api\"</span><span class=\"token punctuation\">,</span> client <span class=\"token operator\">=></span>\n    <span class=\"token punctuation\">{</span>\n        client<span class=\"token punctuation\">.</span>Timeout <span class=\"token operator\">=</span> TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span>AcceptEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>StringWithQualityHeaderValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gzip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span>DefaultRequestHeaders<span class=\"token punctuation\">.</span>AcceptEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>StringWithQualityHeaderValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deflate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigurePrimaryHttpMessageHandler</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClientHandler</span>\n    <span class=\"token punctuation\">{</span>\n        AutomaticDecompression <span class=\"token operator\">=</span> DecompressionMethods<span class=\"token punctuation\">.</span>All\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we are enabling decompression (do not know why, but from my experiments it seems that it is not enabled by default) and also we are adding <code class=\"language-text\">Accept-Encoding</code> to all outgoing requests</p>\n<h1>nginx</h1>\n<p>To see what nginx can give us lets prepare following setup</p>\n<p><strong>Program.cs</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>HttpLogging</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>ResponseCompression</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddHttpLogging</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>RequestHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-For\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>RequestHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"True-Client-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>RequestHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CF-RAY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// X-Request-ID</span>\n    <span class=\"token comment\">// X-Real-IP</span>\n    <span class=\"token comment\">// X-Forwarded-For</span>\n    <span class=\"token comment\">// X-Forwarded-Host</span>\n    <span class=\"token comment\">// X-Forwarded-Port</span>\n    <span class=\"token comment\">// X-Forwarded-Proto</span>\n    <span class=\"token comment\">// X-Forwarded-Scheme</span>\n    <span class=\"token comment\">// X-Scheme</span>\n    <span class=\"token comment\">// X-Original-Forwarded-For</span>\n    <span class=\"token comment\">// CF-RAY</span>\n    <span class=\"token comment\">// CF-Visitor</span>\n    <span class=\"token comment\">// CF-Connecting-IP</span>\n    <span class=\"token comment\">// True-Client-IP</span>\n    <span class=\"token comment\">// CF-IPCountry</span>\n    <span class=\"token comment\">// CDN-Loop</span>\n\n    options<span class=\"token punctuation\">.</span>ResponseHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>HeaderNames<span class=\"token punctuation\">.</span>ContentEncoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>ResponseHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>HeaderNames<span class=\"token punctuation\">.</span>Vary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    options<span class=\"token punctuation\">.</span>LoggingFields <span class=\"token operator\">=</span> HttpLoggingFields<span class=\"token punctuation\">.</span>All<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ENABLE_COMPRESSION\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    builder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddResponseCompression</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token punctuation\">.</span>EnableForHttps <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>Providers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BrotliCompressionProvider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>Providers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GzipCompressionProvider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>MimeTypes <span class=\"token operator\">=</span> ResponseCompressionDefaults<span class=\"token punctuation\">.</span>MimeTypes<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"image/svg+xml\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseHttpLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ENABLE_COMPRESSION\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">UseResponseCompression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\ncurl -s -i -o /dev/null localhost:5000/kb/2 -w '%{size_download}\\n' # 2048\ncurl -H 'Accept-Encoding: gzip' -s -i -o /dev/null localhost:5000/kb/2 -w '%{size_download}\\n' # 48\n\n\n# without compressions we received 200kb in 35ms\ncurl -s -i -o /dev/null localhost:5000/kb/200 -w 'Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} Bytes: %{size_download}\\n'\n# with compression we received 0.9kb in 11ms\ncurl -H 'Accept-Encoding: gzip' -s -i -o /dev/null localhost:5000/kb/200 -w 'Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} Bytes: %{size_download}\\n'\n*/</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kb/{kb:int}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> kb<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> kb <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/*\ncurl -s -i -o /dev/null localhost:5000/kb/200 -w 'took: %{time_total} bytes: %{size_download}\\n'\ncurl -H 'Accept-Encoding: gzip' -s -i -o /dev/null localhost:5000/kb/200 -w 'took: %{time_total} bytes: %{size_download}\\n'\n\n*/</span></code></pre></div></p>\n<p>in this demo app, depending on <code class=\"language-text\">ENABLE_COMPRESSION</code> we will enable or disable compression support</p>\n<p><strong>Dockerfile</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">FROM mcr.microsoft.com/dotnet/sdk:6.0 AS builder\nWORKDIR /app\n\nCOPY demo.csproj .\nRUN dotnet restore\n\nCOPY . .\nRUN dotnet publish -c Release -o publish\n\nFROM mcr.microsoft.com/dotnet/aspnet:6.0 AS runner\nWORKDIR /app\nCOPY --from=builder /app/publish .\nENV ASPNETCORE_ENVIRONMENT Production\nEXPOSE 80\nENTRYPOINT [\"dotnet\", \"demo.dll\"]\n\n# export DOCKER_DEFAULT_PLATFORM=linux/amd64\n# docker build -t demo .\n# docker run -it --rm -p 8080:80 demo</code></pre></div></p>\n<p><strong>docker-compose.yml</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.9\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">raw</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> raw\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> raw\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8081:80\"</span>\n  <span class=\"token key atrule\">zip</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> zip\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> zip\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8082:80\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ENABLE_COMPRESSION=true\n  \n  <span class=\"token comment\"># no compression</span>\n  <span class=\"token key atrule\">nginx-defaults-to-raw</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8083:80\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./nginx<span class=\"token punctuation\">-</span>defaults<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>raw.config<span class=\"token punctuation\">:</span>/etc/nginx/conf.d/default.conf\n  \n  <span class=\"token comment\"># compressed response proxied if \"acccep-encoding: gzip\" passed</span>\n  <span class=\"token key atrule\">nginx-defaults-to-zip</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8084:80\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./nginx<span class=\"token punctuation\">-</span>defaults<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>zip.config<span class=\"token punctuation\">:</span>/etc/nginx/conf.d/default.conf\n\n  <span class=\"token key atrule\">nginx-proxy_set_header-to-zip</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8085:80\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./nginx<span class=\"token punctuation\">-</span>proxy_set_header<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>zip.config<span class=\"token punctuation\">:</span>/etc/nginx/conf.d/default.conf\n\n  <span class=\"token key atrule\">nginx-gzip-to-raw</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8086:80\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./nginx<span class=\"token punctuation\">-</span>gzip<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>raw.config<span class=\"token punctuation\">:</span>/etc/nginx/conf.d/default.conf</code></pre></div></p>\n<p>and nginx configs</p>\n<p><strong>nginx-defaults-to-raw.config</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">server {\n  location / {\n    proxy_pass   http://raw:80;\n  }\n}</code></pre></div></p>\n<p><strong>nginx-defaults-to-zip.config</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">server {\n  location / {\n    proxy_pass   http://zip:80;\n  }\n}</code></pre></div></p>\n<p><strong>nginx-gzip-to-raw.config</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">server {\n  gzip on;\n\n  location / {\n    proxy_pass   http://raw:80;\n  }\n}</code></pre></div></p>\n<p><strong>nginx-proxy_set_header-to-zip.config</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">server {\n  location / {\n    proxy_set_header Accept-Encoding &quot;gzip&quot;;\n    gunzip on;\n    proxy_pass   http://zip:80;\n  }\n}</code></pre></div></p>\n<p>now if we start all this <code class=\"language-text\">docker compose up</code> we can check follwoing cases</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8081/kb/2</code></pre></div>\n<p>it works</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8081/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 2048</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8081/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 2048</span></code></pre></div>\n<p>in both cases we receive 2kb because 8081 has disabled compression</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8082/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 2048</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8082/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 48</span></code></pre></div>\n<p>in contrast 8082 has enabled compression, thats why we receiving only 48 bytes instead of 2048</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8083/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 2048</span></code></pre></div>\n<p>nginx by default does not compress responses, aka - expectation was that even so we are talking to a service without compression, nginx will compress response</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8084/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 48</span></code></pre></div>\n<p>but if compression is configured on a downstream service nginx will proxy everything as is if accept encoding passed</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8085/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 48</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8085/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 48</span></code></pre></div>\n<p>with <code class=\"language-text\">proxy_set_header</code> no matter if we asking for compressed response or not - we will receive it, may be problematic for clients that can not work with compressed responses</p>\n<p>but with <code class=\"language-text\">gunzip on;</code> nginx starts respecting client request and takes care about compression</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Accept-Encoding: gzip'</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8086/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 48</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-o</span> /dev/null localhost:8086/kb/2 <span class=\"token parameter variable\">-w</span> <span class=\"token string\">'%{size_download}\\n'</span> <span class=\"token comment\"># 2048</span></code></pre></div>\n<p>now we are zipping responses from raw service on nginx</p>\n<h2>kubernetes ingress</h2>\n<p>short note for kubernetes ingress, in its config map we may want to add</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">use-gzip: \"true\"</code></pre></div>\n<p><a href=\"https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#use-gzip\">documentation</a></p>"}},"pageContext":{"id":"c8d88863-d82e-56b4-b83b-6d0b77005e10"}},"staticQueryHashes":[]}