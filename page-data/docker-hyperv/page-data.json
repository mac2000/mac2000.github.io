{"componentChunkName":"component---src-templates-note-js","path":"/docker-hyperv","result":{"data":{"remark":{"fields":{"path":"docker-hyperv"},"meta":{"title":""},"headings":[{"value":"Docker on Windows Hyper-V"}],"html":"<h1>Docker on Windows Hyper-V</h1>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/eQ40Tx0F8Yc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<h2>Provision of docker host</h2>\n<p>I'm gonna use Ubuntu 15.04, at moment there is troubles with <code class=\"language-text\">DOCKER_OPTS</code> hope will be fixed later on.</p>\n<p>On a fresh install all you need to do:</p>\n<p>###Install docker itself</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -qO- https://get.docker.com/ <span class=\"token operator\">|</span> <span class=\"token function\">sh</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> <span class=\"token parameter variable\">-aG</span> <span class=\"token function\">docker</span> <span class=\"token environment constant\">$USER</span> <span class=\"token comment\"># relogin required</span>\n<span class=\"token function\">docker</span> run hello-world</code></pre></div>\n<p>###Certificates</p>\n<p><a href=\"https://docs.docker.com/articles/https/\">https://docs.docker.com/articles/https/</a></p>\n<p>How it works: Both client and server have its own cert and key files, they all are signed with same CA. While connecting both client and server verify each other certificates agains CA file they have. If all OK communication begins.</p>\n<p><strong>First of all we need our CA</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa <span class=\"token parameter variable\">-aes256</span> <span class=\"token parameter variable\">-out</span> ca-key.pem <span class=\"token number\">4096</span>\nopenssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-x509</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span> <span class=\"token parameter variable\">-key</span> ca-key.pem <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=*\"</span> <span class=\"token parameter variable\">-out</span> ca.pem</code></pre></div>\n<p><strong>Server certificates</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa <span class=\"token parameter variable\">-out</span> server-key.pem <span class=\"token number\">4096</span>\nopenssl req <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=*\"</span> <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> server-key.pem <span class=\"token parameter variable\">-out</span> server.csr\n<span class=\"token builtin class-name\">echo</span> subjectAltName <span class=\"token operator\">=</span> IP:192.168.5.123,IP:127.0.0.1 <span class=\"token operator\">></span> extfile.cnf\nopenssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span> <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-in</span> server.csr <span class=\"token parameter variable\">-CA</span> ca.pem <span class=\"token parameter variable\">-CAkey</span> ca-key.pem <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-out</span> server-cert.pem <span class=\"token parameter variable\">-extfile</span> extfile.cnf\n<span class=\"token function\">rm</span> server.csr extfile.cnf ca.srl</code></pre></div>\n<p>Here is tricky part, you need to provide your server IP here to be able to connect to it by IP address rather than by DNS.</p>\n<p>But in my case its my local lab so I prefer doing it without IP addresses like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa <span class=\"token parameter variable\">-out</span> server-key.pem <span class=\"token number\">4096</span>\nopenssl req <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=*\"</span> <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> server-key.pem <span class=\"token parameter variable\">-out</span> server.csr\nopenssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span> <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-in</span> server.csr <span class=\"token parameter variable\">-CA</span> ca.pem <span class=\"token parameter variable\">-CAkey</span> ca-key.pem <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-out</span> server-cert.pem\n<span class=\"token function\">rm</span> server.csr ca.srl</code></pre></div>\n<p>Not that in this variant I am no longer defining IP addresses so connections will be available only by host names which in our case everywhere set to start - so connection will be available from everywhere, but from now on you must deal with hosts file on your client system or configure DNS.</p>\n<p><strong>Client certificates</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa <span class=\"token parameter variable\">-out</span> key.pem <span class=\"token number\">4096</span>\nopenssl req <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">'/CN=client'</span> <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> key.pem <span class=\"token parameter variable\">-out</span> client.csr\n<span class=\"token builtin class-name\">echo</span> extendedKeyUsage <span class=\"token operator\">=</span> clientAuth <span class=\"token operator\">></span> extfile.cnf\nopenssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span> <span class=\"token parameter variable\">-sha256</span> <span class=\"token parameter variable\">-in</span> client.csr <span class=\"token parameter variable\">-CA</span> ca.pem <span class=\"token parameter variable\">-CAkey</span> ca-key.pem <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token parameter variable\">-out</span> cert.pem <span class=\"token parameter variable\">-extfile</span> extfile.cnf\n<span class=\"token function\">rm</span> client.csr extfile.cnf ca.srl</code></pre></div>\n<p><strong>Privileges</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-v</span> 0400 ca-key.pem key.pem server-key.pem\n<span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-v</span> 0444 ca.pem server-cert.pem cert.pem</code></pre></div>\n<p>What do we have now is:</p>\n<ul>\n<li><code class=\"language-text\">server-key.pem</code>, <code class=\"language-text\">server-cert.pem</code> and <code class=\"language-text\">ca.pem</code> - will be used by docker server</li>\n<li><code class=\"language-text\">key.pem</code>, <code class=\"language-text\">cert.pem</code> and <code class=\"language-text\">ca.pem</code> - will be used by client</li>\n</ul>\n<p>Notice that both client and server do need to have same <code class=\"language-text\">ca.pem</code> to be able to verify certificates.</p>\n<p>###DOCKER_OPTS</p>\n<p>By default docker listens to socket, what wee need is to modify docker startup parameters so it will start listening network.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">\"s|#DOCKER_OPTS=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>--dns 8.8.8.8 --dns 8.8.4.4<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>|DOCKER_OPTS=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>--tlsverify --tlscacert=<span class=\"token environment constant\">$PWD</span>/ca.pem --tlscert=<span class=\"token environment constant\">$PWD</span>/server-cert.pem --tlskey=<span class=\"token environment constant\">$PWD</span>/server-key.pem -H=0.0.0.0:2376<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>|\"</span> /etc/default/docker</code></pre></div>\n<p>Be sure to set appropriate file names and paths, do not forget to remove <code class=\"language-text\">-i</code> parameter to check what will happen.</p>\n<p>Unfortunatelly at this moment things will not happen, because of moving to systemd file we were edit is not used at all, hope it will be fixed soon, but for now we need do few more things.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/systemd/system/docker.service.d\n\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/systemd/system/docker.service.d/ubuntu.conf</span>\n[Service]\nEnvironmentFile=/etc/default/docker\nExecStart=\nExecStart=/usr/bin/docker -d -H fd:// \\<span class=\"token variable\">$DOCKER_OPTS</span>\nEOF</span>\n\n<span class=\"token function\">sudo</span> systemctl daemon-reload\n<span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span>\n<span class=\"token function\">sudo</span> systemctl status <span class=\"token function\">docker</span>\n<span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-ntulp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">2376</span></code></pre></div>\n<h2>Windows client</h2>\n<p>Windows client may be downloaded here: <a href=\"https://get.docker.com/builds/Windows/x86_64/docker-latest.exe\">https://get.docker.com/builds/Windows/x86_64/docker-latest.exe</a></p>\n<p>To copy certificate files use something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> alexandr@192.168.5.123:<span class=\"token string\">\"/home/alexandr/ca.pem /home/alexandr/cert.pem /home/alexandr/key.pem\"</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>To verify things are working:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token parameter variable\">--tlsverify</span> <span class=\"token parameter variable\">--tlscacert</span><span class=\"token operator\">=</span>ca.pem <span class=\"token parameter variable\">--tlscert</span><span class=\"token operator\">=</span>cert.pem <span class=\"token parameter variable\">--tlskey</span><span class=\"token operator\">=</span>key.pem <span class=\"token parameter variable\">-H</span><span class=\"token operator\">=</span>hvd:2376 version</code></pre></div>\n<p>Note that we are connection to <code class=\"language-text\">hvd</code> machine rather that its IP.</p>\n<p>To make things easier you may set environment variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_TLS_VERIFY</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span>tcp://hvd:2376\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_CERT_PATH</span><span class=\"token operator\">=</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Alexandr<span class=\"token punctuation\">\\</span>Desktop</code></pre></div>\n<p>And now you should be able to run docker commands from your windows client against ubuntu vm in your hyper-v like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> info <span class=\"token operator\">|</span> findstr <span class=\"token string\">\"Operating System\"</span>\nOperating System: Ubuntu <span class=\"token number\">15.04</span></code></pre></div>\n<h2>Docker Machine</h2>\n<p>Please take a note that there is <a href=\"https://github.com/docker/machine/releases\">docker-machine</a> available for Windows which supports hyper-v out of the box. All what have beed done here may be done in few commands like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-machine create <span class=\"token parameter variable\">-d</span> hyper-v dev\ndocker-machine <span class=\"token function\">env</span> dev\n\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_TLS_VERIFY</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_HOST</span><span class=\"token operator\">=</span>tcp://192.168.5.156:2376\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_CERT_PATH</span><span class=\"token operator\">=</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Alexandr<span class=\"token punctuation\">\\</span>.docker<span class=\"token punctuation\">\\</span>machine<span class=\"token punctuation\">\\</span>machines<span class=\"token punctuation\">\\</span>dev\n<span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DOCKER_MACHINE_NAME</span><span class=\"token operator\">=</span>dev\n\n<span class=\"token function\">docker</span> run busybox <span class=\"token builtin class-name\">echo</span> hello world</code></pre></div>\n<p>Docker machine will create docker host vm in hyper-v, will deal with certificates and so on. Even more, when you will be ready you can use docker machine to provision docker host in cloud providers without doing anything by hand.</p>"}},"pageContext":{"id":"c429c47d-5cc0-57c6-9776-60b1ba1f420d"}},"staticQueryHashes":[]}