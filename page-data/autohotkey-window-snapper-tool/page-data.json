{"componentChunkName":"component---src-templates-note-js","path":"/autohotkey-window-snapper-tool/","result":{"data":{"remark":{"fields":{"path":"autohotkey-window-snapper-tool"},"meta":{"title":""},"headings":[{"value":"AutoHotkey window snapper tool"}],"html":"<h1>AutoHotkey window snapper tool</h1>\n<p>How it works:</p>\n<p><a href=\"http://www.youtube.com/watch?v=pvD6S7mqsR4\">http://www.youtube.com/watch?v=pvD6S7mqsR4</a></p>\n<p>This tool will move and resize your active window in next way:</p>\n<p><img src=\"https://github.com/mac2000/WinSnapper/raw/master/WinSnapper.png\" alt=\"screenshot\"></p>\n<p>Something like:</p>\n<p><img src=\"https://github.com/mac2000/WinSnapper/raw/master/Screen.png\" alt=\"screenshot\"></p>\n<p>WinSnapperÂ <a href=\"https://github.com/mac2000/WinSnapper/blob/master/WinSnapper.ahk\">sources</a> and <a href=\"https://github.com/mac2000/WinSnapper/raw/master/WinSnapper.exe\">executable</a></p>\n<p>And here is code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">; WinSnapper:\n; Move and resize windows with arrow and text navigation keys\n; Screen is splitted on 2 / 3 + 1 / 3 sides, 1024 is preffered left side width,\n; so u can snap your browser to left side and still see whole page\n;\n; Insert, Delete, Home, End, Page Up, Page Down - snaps active window to desired side of screen\n; Arrow keys works almost same way as Win + Left(Right)\n;\n; Alternatives:\n; http://www.autohotkey.com/community/viewtopic.php?t=21703&amp;postdays=0&amp;postorder=asc&amp;start=0\n; http://www.autohotkey.com/community/viewtopic.php?t=12229\n; http://www.autohotkey.com/community/viewtopic.php?t=53674\n\n; Some global variables\n\nmw := GetMonitorWidth()             ; Monitor width\nmh := GetMonitorHeight()            ; Monitor height\npw := mw / 3                        ; 1 / 3 of monitor width\nph := mh / 3                        ; 1 / 3 of monitor height\nlw := 2 * pw > 1024 ? 1024: 2 * pw  ; Left side width (1024 is preffered)\nrw := mw - lw                       ; Right side width\nth := round(2 * ph)                 ; Top side height\nbh := ceil(ph)                      ; Bottom side height\n\n^#Insert::MoveWindowLeftTop()\n^#Delete::MoveWindowLeftBottom()\n^#Home::MoveWindowTop()\n^#End::MoveWindowBottom()\n^#PgUp::MoveWindowRightTop()\n^#PgDn::MoveWindowRightBottom()\n\n^#Up::MaximizeToggle() ;WinMaximize A\n^#Down::MoveWidnowCenter()\n^#Left::MoveWindowLeft()\n^#Right::MoveWindowRight()\n\nMoveWindowLeftTop() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, 0, 0, lw, th\n    } else {\n        WinMove, A,, 0, 0\n    }\n}\n\nMoveWindowLeftBottom() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, 0, th, lw, bh\n    } else {\n        WinMove, A,, 0, th\n    }\n}\n\nMoveWindowRightTop() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, lw, 0, rw, th\n    } else {\n        WinMove, A,, lw, 0\n    }\n}\n\nMoveWindowRightBottom() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, lw, th, rw, bh\n    } else {\n        WinMove, A,, lw, th\n    }\n}\n\nMoveWindowLeft() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, 0, 0, lw, mh\n    } else {\n        WinMove, A,, 0, 0\n    }\n}\n\nMoveWindowRight() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, lw, 0, rw, mh\n    } else {\n        WinMove, A,, lw, 0\n    }\n}\n\nMoveWindowTop() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, 0, 0, mw, th\n    } else {\n        WinMove, A,, 0, 0\n    }\n}\n\nMoveWindowBottom() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, 0, th, mw, bh\n    } else {\n        WinMove, A,, 0, th\n    }\n}\n\nMoveWidnowCenter() {\n    global\n    if (IsResizable()) {\n        WinMove, A,, round(mw / 2 - lw / 2), round(mh / 2 - th / 2), lw, th\n    } else {\n        WinGetPos,,, Width, Height\n        WinMove, A,, round(mw / 2 - Width), round(mh / 2 - Height)\n    }\n}\n\n; Helper functions\nGetMonitorWidth() {\n    SysGet, mon, MonitorWorkArea\n    return monRight - monLeft\n}\n\nGetMonitorHeight() {\n    SysGet, mon, MonitorWorkArea\n    return monBottom - monTop\n}\n\nIsResizable() {\n    WinGet, Style, Style, A\n    return (Style &amp; 0x40000) ; WS_SIZEBOX\n}\n\nMaximizeToggle() {\n    WinGet, state, MinMax, A\n    if (state &amp;&amp; IsResizable()) {\n        WinRestore, A\n    } else {\n        WinMaximize, A\n    }\n}</code></pre></div>"}},"pageContext":{"id":"bec811b4-fdd1-5747-b3e8-0440413f538c"}},"staticQueryHashes":[],"slicesMap":{}}