{"componentChunkName":"component---src-templates-note-js","path":"/github-token-exchanger/","result":{"data":{"remark":{"fields":{"path":"github-token-exchanger"},"meta":{"title":""},"headings":[{"value":"GitHub Token Exchanger"}],"html":"<h1>GitHub Token Exchanger</h1>\n<p>In modern world almost everything is moving towards \"federated\" credentials, when you services are authenticating against each other with OpenId Connect, without the need to have shared secret and as the result without the need to hide it, rotate, revoke, etc</p>\n<p>But as usual there are some caveats, as example, at moment Azure has limit (I do not remember 20 or 60) number of federated credentials</p>\n<p>Think of this - if you want to build and publish docker image from within github action, you gonna need to authenticate against Azure Container Registry, and to do so, you gonna need either create bazillion azure apps per each repostiroy with their own federated credentials or have single app with 20 or 60 credentials max, so if you have bigger number of repositories - you are out of luck</p>\n<p>And exactly this scenario is good one to introduce \"exchanger\"</p>\n<h2>How it works</h2>\n<p>Inside github action we have access to github oidc provider, and can ask it to sign new token</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> demo\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span> read\n  <span class=\"token comment\"># this one is required</span>\n  <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">demo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/github<span class=\"token punctuation\">-</span>script@v6\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            core.getIDToken('HelloWorld').then(token => {\n              // just for demo purposes we are printing it as hex, otherwise github will mask the token\n              console.log(Buffer.from(token, 'utf8').toString('hex'))\n            })</span></code></pre></div>\n<p>Such github actions will print token in hex representation, we may decode it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hex <span class=\"token operator\">=</span> <span class=\"token string\">'65794a30655841694f694...'</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">,</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span></code></pre></div>\n<p>and decoded token will look something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"jti\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c142c404-07e7-45df-9a76-0567bcd861ab\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"repo:mac2000/demo:pull_request\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"refs/pull/1/merge\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fcc8fc13f82c8b1be9192a75088cb4e7f0f61160\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000/demo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_owner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_owner_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"run_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5354606088\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"run_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"232\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"run_attempt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"11\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"private\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"actor_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"88868\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"actor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workflow\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"head_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"base_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"event_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pull_request\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ref_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"branch\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workflow_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000/demo/.github/workflows/demo.yml@refs/pull/1/merge\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workflow_sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fcc8fc13f82c8b1be9192a75088cb4e7f0f61160\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"job_workflow_ref\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mac2000/demo/.github/workflows/demo.yml@refs/pull/1/merge\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"job_workflow_sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fcc8fc13f82c8b1be9192a75088cb4e7f0f61160\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"runner_environment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"github-hosted\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://token.actions.githubusercontent.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"nbf\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1687512875</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1687513775</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1687513475</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The most important things here are audience <code class=\"language-text\">aud</code> and issuer <code class=\"language-text\">iss</code> with them in place, we can do something as simple as</p>\n<h2>Exchange github token to azure token with dotnet</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mkdir</span> exchange\n<span class=\"token builtin class-name\">cd</span> exchange\ndotnet new web --no-https --exclude-launch-settings\ndotnet <span class=\"token function\">add</span> package Microsoft.Identity.Web\ndotnet <span class=\"token function\">add</span> package Azure.Identity</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Azure<span class=\"token punctuation\">.</span>Core</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Azure<span class=\"token punctuation\">.</span>Identity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Authentication<span class=\"token punctuation\">.</span>JwtBearer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DefaultAzureCredential</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// all you need, for your app to authenticate github tokens</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span>JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token punctuation\">.</span>Authority <span class=\"token operator\">=</span> <span class=\"token string\">\"https://token.actions.githubusercontent.com\"</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span>Audience <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromQuery</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> scope<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// just for demo, we are responding with azure token for requests with github tokens</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> credentials<span class=\"token punctuation\">.</span><span class=\"token function\">GetTokenAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenRequestContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> scope <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and usage example will be</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># exchange github token to azure token</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'http://localhost:5000/?scope=https://management.azure.com/.default'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">node</span> token.js<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token comment\"># use token</span>\n<span class=\"token assign-left variable\">access_token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">'http://localhost:5000/?scope=https://management.azure.com/.default'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">node</span> token.js<span class=\"token variable\">)</span></span>\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$access_token</span>\"</span> <span class=\"token string\">'https://management.azure.com/subscriptions?api-version=2022-09-01'</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">\".value\"</span></code></pre></div>\n<p>But can it be done even simpler</p>\n<h2>Exchange github token to azure container registry credentials</h2>\n<p>Technically speaking I need just container registry credentials, at the very end, no matter what, after many exchanges we are receiving them, so the idea behind this - just make it directly</p>\n<p>Part of may github action:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># exchange github token to azure container registry credentials</span>\n<span class=\"token comment\"># output: steps.acr.outputs.password</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/github<span class=\"token punctuation\">-</span>script@v6\n  <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> acr\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      core.getIDToken('acr')\n        .then(token => fetch('https://acr.mac-blog.org.ua', {headers: {Authorization: `Bearer ${token}`}}))\n        .then(res => res.text())\n        .then(password => {\n          core.setSecret(password)\n          core.setOutput('password', password)\n        })</span>\n\n<span class=\"token comment\"># docker login, aka: az acr login -n mac</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/login<span class=\"token punctuation\">-</span>action@v2\n  <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span> mac.azurecr.io\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> mac\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.acr.outputs.password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># now you can push images like mac.azurecr.io/whatever:1.2</span></code></pre></div>\n<p>And here is actual deployment (note: it is terraform but should be straight forward)</p>\n<div class=\"gatsby-highlight\" data-language=\"tf\"><pre class=\"language-tf\"><code class=\"language-tf\">resource &quot;kubernetes_deployment_v1&quot; &quot;acr&quot; {\n  metadata {\n    name      = &quot;acr&quot;\n    labels = {\n      app = &quot;acr&quot;\n    }\n  }\n  spec {\n    selector {\n      match_labels = {\n        app = &quot;acr&quot;\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = &quot;acr&quot;\n        }\n      }\n      spec {\n        volume {\n          name = &quot;acr&quot;\n          config_map {\n            name = kubernetes_config_map_v1.acr.metadata[0].name\n          }\n        }\n        container {\n          name              = &quot;acr&quot;\n          image             = &quot;bitnami/oauth2-proxy&quot;\n          args = [\n            # restrictions (repository_owner=mac2000, repository=mac2000/demo, ref=refs/heads/main, sha=616c..., repository_visibility=private, actor=mac2000, workflow=main)\n            &quot;--oidc-groups-claim=repository_owner&quot;,\n            &quot;--allowed-group=mac2000&quot;,\n            # allowed audience\n            &quot;--client-id=acr&quot;,\n            # allowed issuer\n            &quot;--oidc-issuer-url=https://token.actions.githubusercontent.com&quot;,\n            # act as jwt verifier\n            &quot;--skip-jwt-bearer-tokens=true&quot;,\n            # respond on success - the trick\n            &quot;--upstream=file://index.html&quot;,\n            # default is 127.0.0.1:4180\n            &quot;--http-address=0.0.0.0:4180&quot;,\n            # rest is required but values does not matter\n            &quot;--standard-logging=true&quot;,\n            &quot;--auth-logging=true&quot;,\n            &quot;--request-logging=true&quot;,\n            &quot;--provider=oidc&quot;,\n            &quot;--client-secret=whatever&quot;,\n            &quot;--email-domain=*&quot;,\n            # whatever, random string\n            &quot;--cookie-secret=A1m8QYoKkpNdOylNUP8lW85Vc10ysCf-kuangYkYDUY=&quot;,\n          ]\n          port {\n            container_port = 4180\n          }\n          volume_mount {\n            name       = &quot;acr&quot;\n            # mount credentials from config map as index.html - the trick\n            mount_path = &quot;/opt/bitnami/oauth2-proxy/index.html&quot;\n            sub_path   = &quot;acr&quot;\n            read_only  = true\n          }\n        }\n      }\n    }\n  }\n}</code></pre></div>\n<p>Having container registry credentials we store them in config map or secret, and mount them as index.html file into our deployment, aka if it was simple nginx image that its home page will returns us credentials</p>\n<p>Now we need to protect it, so only authenticated users can access it, thankfully there is oauth2-proxy for this</p>\n<p>We can ask oauth2-proxy to serve static file for authenticated users by passing <code class=\"language-text\">--upstream=file://index.html</code></p>\n<p>Also we need to pass <code class=\"language-text\">--skip-jwt-bearer-tokens=true</code> to ask oauth2-proxy to act as jwt verifier</p>\n<p>And rest of settings are pretty usual and stratight forward for configuring proxy</p>\n<p>Also we can add little bit more of restrictions by passign <code class=\"language-text\">oidc-groups-claim</code> and <code class=\"language-text\">allowed-group</code></p>\n<p>So from github side we are doing:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">core<span class=\"token punctuation\">.</span><span class=\"token function\">getIDToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">'acr'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// at this point \"token\" will be github token</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://acr.mac-blog.org.ua'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">Authorization</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// at this point we have sent request to our exchanger, it validated it, and if everything fine, responded with index.html that contains password for our container registry</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">password</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    core<span class=\"token punctuation\">.</span><span class=\"token function\">setSecret</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n    core<span class=\"token punctuation\">.</span><span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The beauty of this approach is that it can be used for anything else, not only github, also we do not need to build any custom apps, just configuring the thing from building pieces</p>"}},"pageContext":{"id":"65c26b8d-99ab-5ff9-829e-ce2ca5acfc94"}},"staticQueryHashes":[],"slicesMap":{}}