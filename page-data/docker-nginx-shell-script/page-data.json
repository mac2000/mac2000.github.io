{"componentChunkName":"component---src-templates-note-js","path":"/docker-nginx-shell-script/","result":{"data":{"remark":{"fields":{"path":"docker-nginx-shell-script"},"meta":{"title":""},"headings":[{"value":"nginx alpine run shell script"}],"html":"<h1>nginx alpine run shell script</h1>\n<p>the end goal is to run shell scripts for a given endpoint</p>\n<p>to do this we gonna use <code class=\"language-text\">fcgiwrap</code> which will start dedicated process to execute our scripts</p>\n<p><div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">FROM nginx:alpine\n\nRUN apk add fcgiwrap spawn-fcgi\n\nCOPY ./05-spawn-fcgi.sh /docker-entrypoint.d/05-spawn-fcgi.sh</code></pre></div></p>\n<p>to spawn it we adding additiona script to entrypoint</p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/usr/bin/spawn-fcgi <span class=\"token parameter variable\">-s</span> /var/run/fcgiwrap.socket <span class=\"token parameter variable\">-M</span> <span class=\"token number\">766</span> /usr/bin/fcgiwrap</code></pre></div></p>\n<p>here is configuration</p>\n<p><div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n    listen       80;\n    server_name  localhost;\n    root   /usr/share/nginx/html;\n\n    location / {\n        index  index.html index.htm;\n    }\n\n    # added example, any shell script in content root will be executable\n    location ~ \\.sh$ {\n        gzip off;\n        fastcgi_pass unix:/var/run/fcgiwrap.socket;\n        include /etc/nginx/fastcgi_params;\n    }\n}</code></pre></div></p>\n<p>and sample script</p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: text/plain'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello, world!'</span></code></pre></div></p>\n<p>be sure to split response body and headers by a single empty line</p>\n<p>build</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> cgi <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>run</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>:80 <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/demo.sh:/usr/share/nginx/html/demo.sh <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/default.conf:/etc/nginx/conf.d/default.conf cgi</code></pre></div>\n<p>home page works as usual</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8081</code></pre></div>\n<p>and now we can run our scripts</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://localhost:8081/demo.sh</code></pre></div>\n<p>note: for everything to work, scripts must be executable, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x 05-spawn-fcgi.sh\n<span class=\"token function\">chmod</span> +x demo.sh</code></pre></div>\n<h2>environment</h2>\n<p>all request headers and query string passed to our script as environment variables, e.g. following script:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: text/plain'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'environment:'</span>\n<span class=\"token function\">env</span></code></pre></div>\n<p>and request to <code class=\"language-text\">http://localhost:8081/demo.sh?foo=bar</code> will print something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">GATEWAY_INTERFACE<span class=\"token operator\">=</span>CGI<span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nDOCUMENT_URI<span class=\"token operator\">=</span><span class=\"token operator\">/</span>demo<span class=\"token punctuation\">.</span>sh\nHOSTNAME<span class=\"token operator\">=</span><span class=\"token number\">6aa74906febd</span>\nREMOTE_ADDR<span class=\"token operator\">=</span><span class=\"token ip-address constant\">172.17.0.1</span>\nQUERY_STRING<span class=\"token operator\">=</span>foo<span class=\"token operator\">=</span>bar\nFCGI_ROLE<span class=\"token operator\">=</span>RESPONDER\nDOCUMENT_ROOT<span class=\"token operator\">=</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html\nHTTP_USER_AGENT<span class=\"token operator\">=</span>Mozilla<span class=\"token operator\">/</span><span class=\"token number\">5.0</span> <span class=\"token operator\">(</span>Macintosh<span class=\"token operator\">;</span> Intel Mac OS X 10_15_7<span class=\"token operator\">)</span> AppleWebKit<span class=\"token operator\">/</span><span class=\"token number\">537.36</span> <span class=\"token operator\">(</span>KHTML<span class=\"token punctuation\">,</span> like Gecko<span class=\"token operator\">)</span> Chrome<span class=\"token operator\">/</span><span class=\"token ip-address constant\">108.0.0.0</span> Safari<span class=\"token operator\">/</span><span class=\"token number\">537.36</span>\nHTTP_HOST<span class=\"token operator\">=</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span>\nREQUEST_URI<span class=\"token operator\">=</span><span class=\"token operator\">/</span>demo<span class=\"token punctuation\">.</span>sh<span class=\"token operator\">?</span>foo<span class=\"token operator\">=</span>bar\nSERVER_SOFTWARE<span class=\"token operator\">=</span>nginx<span class=\"token operator\">/</span><span class=\"token number\">1.23.3</span>\nREQUEST_SCHEME<span class=\"token operator\">=</span>http\nNGINX_VERSION<span class=\"token operator\">=</span><span class=\"token number\">1.23.3</span>\nHTTP_ACCEPT_LANGUAGE<span class=\"token operator\">=</span>en<span class=\"token operator\">-</span>US<span class=\"token punctuation\">,</span>en<span class=\"token operator\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>ru<span class=\"token operator\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>uk<span class=\"token operator\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.7</span>\nSERVER_PROTOCOL<span class=\"token operator\">=</span>HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHTTP_ACCEPT_ENCODING<span class=\"token operator\">=</span>gzip<span class=\"token punctuation\">,</span> deflate<span class=\"token punctuation\">,</span> br\nREDIRECT_STATUS<span class=\"token operator\">=</span><span class=\"token number\">200</span>\nHTTP_SEC_FETCH_DEST<span class=\"token operator\">=</span>document\nREQUEST_METHOD<span class=\"token operator\">=</span>GET\nSERVER_ADDR<span class=\"token operator\">=</span><span class=\"token ip-address constant\">172.17.0.2</span>\nPWD<span class=\"token operator\">=</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html\nHTTP_SEC_FETCH_SITE<span class=\"token operator\">=</span>none\nSERVER_PORT<span class=\"token operator\">=</span><span class=\"token number\">80</span>\nSCRIPT_NAME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>demo<span class=\"token punctuation\">.</span>sh\nSERVER_NAME<span class=\"token operator\">=</span>localhost</code></pre></div>\n<h2>status</h2>\n<p>to control response status you may do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Status: 404'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: text/plain'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Not found'</span></code></pre></div>\n<h2>post request body</h2>\n<p>theoretically post request body should be send to stdin but no matter what i have tried it did not work as expected and stdin is empty, even so content length header indicates that there is some body</p>\n<p>but at the end it seems like it does not matter because it is even better and easier to pass params as custom headers, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: text/plain'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$HTTP_FOO</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$HTTP_ACME</span></code></pre></div>\n<p>and usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8081/demo.sh <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Foo: Bar'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Acme: 42'</span></code></pre></div>\n<h2>route params</h2>\n<p>suppose we want to handle <code class=\"language-text\">/foo/(.+)/bar</code></p>\n<p><div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n    listen       80;\n    server_name  localhost;\n    root   /usr/share/nginx/html;\n\n    location / {\n        index  index.html index.htm;\n    }\n\n    # added example, any shell script in content root will be executable\n    location ~ \\.sh$ {\n        gzip off;\n        fastcgi_pass unix:/var/run/fcgiwrap.socket;\n        include /etc/nginx/fastcgi_params;\n    }\n\n\n    location ~ ^/foo/(.+)/bar$ {\n      gzip off;\n      fastcgi_pass unix:/var/run/fcgiwrap.socket;\n      include /etc/nginx/fastcgi_params;\n      fastcgi_param FOOBAR $1;\n      fastcgi_param SCRIPT_FILENAME  /usr/share/nginx/html/route.sh;\n    }\n}</code></pre></div></p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: text/plain'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"FOOBAR: <span class=\"token variable\">$FOOBAR</span>\"</span></code></pre></div></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>:80 <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/demo.sh:/usr/share/nginx/html/demo.sh <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/route.sh:/usr/share/nginx/html/route.sh <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/route.conf:/etc/nginx/conf.d/default.conf cgi</code></pre></div>\n<p>with that in place all commands will work:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8081\n<span class=\"token comment\"># nginx start page</span>\n<span class=\"token function\">curl</span> localhost:8081/demo.sh\n<span class=\"token comment\"># Hello, world!</span>\n<span class=\"token function\">curl</span> localhost:8081/foo/helloworld/bar\n<span class=\"token comment\"># FOOBAR: helloworld</span></code></pre></div>\n<h2>json</h2>\n<p>we can use <code class=\"language-text\">jq</code> to build json responses, aka</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: application/json'</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\njq <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">--arg</span> inarr <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-en</span> <span class=\"token string\">\"hello<span class=\"token entity\" title=\"\\n\">\\n</span>world<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token variable\">)</span></span>\"</span> <span class=\"token string\">'$inarr | split(\"\\n\")'</span>\n<span class=\"token comment\"># echo -e \"one\\ntwo\\nthree\" | jq -R . | jq -s '.'</span></code></pre></div>\n<p>other samples</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># jq - produce array of strings</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"one<span class=\"token entity\" title=\"\\n\">\\n</span>two<span class=\"token entity\" title=\"\\n\">\\n</span>three\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-R</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-s</span> <span class=\"token string\">'.'</span>\n<span class=\"token comment\"># [</span>\n<span class=\"token comment\">#   \"one\",</span>\n<span class=\"token comment\">#   \"two\",</span>\n<span class=\"token comment\">#   \"three\"</span>\n<span class=\"token comment\"># ]</span>\n\n<span class=\"token comment\"># jq - produce json object</span>\njq <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">--arg</span> foo <span class=\"token string\">\"bar\"</span> <span class=\"token parameter variable\">--arg</span> acme <span class=\"token string\">\"42\"</span> <span class=\"token string\">'{foo: $foo, acme: $acme}'</span>\n<span class=\"token comment\"># {</span>\n<span class=\"token comment\">#   \"foo\": \"bar\",</span>\n<span class=\"token comment\">#   \"acme\": \"42\"</span>\n<span class=\"token comment\"># }</span>\n\n<span class=\"token comment\"># jq - produce nested object</span>\njq <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">--arg</span> foo <span class=\"token string\">\"bar\"</span> <span class=\"token parameter variable\">--arg</span> acme <span class=\"token string\">\"42\"</span> <span class=\"token string\">'{nested: {foo: $foo, acme: $acme}, hello: \"world\"}'</span>\n<span class=\"token comment\"># {</span>\n<span class=\"token comment\">#   \"nested\": {</span>\n<span class=\"token comment\">#     \"foo\": \"bar\",</span>\n<span class=\"token comment\">#     \"acme\": \"42\"</span>\n<span class=\"token comment\">#   },</span>\n<span class=\"token comment\">#   \"hello\": \"world\"</span>\n<span class=\"token comment\"># }</span>\n\n<span class=\"token comment\"># jq - produce array of objects</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">c</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aq</span><span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">n</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> inspect $c <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">\".[0].Name\"</span><span class=\"token variable\">)</span></span>\n  jq <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">--arg</span> c <span class=\"token variable\">$c</span> <span class=\"token parameter variable\">--arg</span> n <span class=\"token variable\">$n</span> <span class=\"token string\">'{id: $c, name: $n}'</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'[inputs | {id: .id, name: .name}]'</span>\n<span class=\"token comment\"># [</span>\n<span class=\"token comment\">#   {</span>\n<span class=\"token comment\">#     \"id\": \"bfca592aaa1d\",</span>\n<span class=\"token comment\">#     \"name\": \"/goofy_heisenberg\"</span>\n<span class=\"token comment\">#   },</span>\n<span class=\"token comment\">#   {</span>\n<span class=\"token comment\">#     \"id\": \"31fac6dfe385\",</span>\n<span class=\"token comment\">#     \"name\": \"/elastic\"</span>\n<span class=\"token comment\">#   }</span>\n<span class=\"token comment\"># ]</span>\n\n<span class=\"token comment\"># jq - tsv with headers</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-en</span> <span class=\"token string\">\"id<span class=\"token entity\" title=\"\\t\">\\t</span>name<span class=\"token entity\" title=\"\\n\">\\n</span>1<span class=\"token entity\" title=\"\\t\">\\t</span>one<span class=\"token entity\" title=\"\\n\">\\n</span>2<span class=\"token entity\" title=\"\\t\">\\t</span>two<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">--slurp</span> --raw-input --raw-output <span class=\"token string\">'split(\"\\n\") | .[1:-1] | map(split(\"\\t\")) | map({\"id\": .[0], \"name\": .[1]})'</span>\n\n<span class=\"token comment\"># jq - tsv without headers</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-en</span> <span class=\"token string\">\"1<span class=\"token entity\" title=\"\\t\">\\t</span>one<span class=\"token entity\" title=\"\\n\">\\n</span>2<span class=\"token entity\" title=\"\\t\">\\t</span>two<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">--slurp</span> --raw-input --raw-output <span class=\"token string\">'split(\"\\n\") | .[0:-1] | map(split(\"\\t\")) | map({\"id\": .[0], \"name\": .[1]})'</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-en</span> <span class=\"token string\">\"1<span class=\"token entity\" title=\"\\t\">\\t</span>one<span class=\"token entity\" title=\"\\n\">\\n</span>2<span class=\"token entity\" title=\"\\t\">\\t</span>two\"</span> <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">--slurp</span> --raw-input --raw-output <span class=\"token string\">'split(\"\\n\")| map(split(\"\\t\")) | map({\"id\": .[0], \"name\": .[1]})'</span>\n<span class=\"token comment\"># [</span>\n<span class=\"token comment\">#   {</span>\n<span class=\"token comment\">#     \"id\": \"1\",</span>\n<span class=\"token comment\">#     \"name\": \"one\"</span>\n<span class=\"token comment\">#   },</span>\n<span class=\"token comment\">#   {</span>\n<span class=\"token comment\">#     \"id\": \"2\",</span>\n<span class=\"token comment\">#     \"name\": \"two\"</span>\n<span class=\"token comment\">#   }</span>\n<span class=\"token comment\"># ]</span></code></pre></div>\n<h2>content negotiation</h2>\n<p>we may get accept header from incomming request and depending on its value do something like</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$HTTP_ACCEPT</span> <span class=\"token operator\">==</span> *<span class=\"token string\">\"application/json\"</span>* <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: application/json'</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{\"foo\":\"bar\"}'</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Content-Type: text/plain'</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'foo: bar'</span>\n<span class=\"token keyword\">fi</span></code></pre></div>"}},"pageContext":{"id":"24a40f68-91ef-5137-aa69-c855fdbd5850"}},"staticQueryHashes":[],"slicesMap":{}}