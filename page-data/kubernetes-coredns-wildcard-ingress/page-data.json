{"componentChunkName":"component---src-templates-note-js","path":"/kubernetes-coredns-wildcard-ingress/","result":{"data":{"remark":{"fields":{"path":"kubernetes-coredns-wildcard-ingress"},"meta":{"title":""},"headings":[{"value":"CoreDNS custom wildcard domain for internal ingress"}],"html":"<h1>CoreDNS custom wildcard domain for internal ingress</h1>\n<p>Suppose we have public and private ingress side by side. We want internal traffic to go via ingress rather than services because it will give us some basic prometheus metrics and some things like compression, potentially tls, etc.</p>\n<p>For this to work we somehow need to have some kind of <code class=\"language-text\">*.local.contoso.com</code> domain pointing to this internal ingress.</p>\n<p>Thankfully there is a CoreDNS inside which is responsible for resolving services and may be used for this as well.</p>\n<p>Thanks to this <a href=\"https://ragingtiger.github.io/2020/01/03/docker-local-dns/\">article</a> I was able to wireup everything togethere</p>\n<p>Here is short version of it:</p>\n<p><strong>Corefile</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"none\"><pre class=\"language-none\"><code class=\"language-none\">.:53 {\n    forward . 8.8.8.8 1.1.1.1\n    log\n    errors\n}\n\nexample.com:53 {\n    file /root/db.example\n    log\n    errors\n}</code></pre></div></p>\n<p>Here we are configuring <code class=\"language-text\">8.8.8.8</code> and <code class=\"language-text\">1.1.1.1</code> as fallback name servers and single <code class=\"language-text\">example.com</code> zone which might be repeated as many times as we want.</p>\n<p><strong>db.example</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"example\"><pre class=\"language-example\"><code class=\"language-example\">$ORIGIN example.com.  ; designates the start of this zone file in the namespace\n$TTL 1h               ; default expiration time of all resource records without their own TTL value\n\n; =============================== Resource Records ==============================\n@                 IN  SOA     ns.example.com. rtiger.example.com. (\n                                  2020010510     ; Serial\n                                  1d             ; Refresh\n                                  2h             ; Retry\n                                  4w             ; Expire\n                                  1h)            ; Minimum TTL\n@                 IN  A       192.168.1.20       ; Local IPv4 address for example.com.\n@                 IN  NS      ns.example.com.    ; Name server for example.com.\nns                IN  CNAME   @                  ; Alias for name server (points to example.com.)\nwebblog           IN  CNAME   @                  ; Alias for webblog.example.com\nnetprint          IN  CNAME   @                  ; Alias for netprint.example.com\n* IN CNAME @</code></pre></div></p>\n<p>And here we are describing our zone. The simplest way to look of what can be done there is to export real zone from Cloudflare.</p>\n<p>Note: for wildcard subdomain you gonna use <code class=\"language-text\">* IN CNAME @</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>coredns <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> <span class=\"token variable\">${<span class=\"token environment constant\">PWD</span>}</span>/Corefile:/root/Corefile <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> <span class=\"token variable\">${<span class=\"token environment constant\">PWD</span>}</span>/db.example:/root/db.example <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">53</span>:53/udp <span class=\"token punctuation\">\\</span>\n  coredns/coredns <span class=\"token parameter variable\">-conf</span> /root/Corefile</code></pre></div>\n<p>And after that we have our own DNS which we may use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">dig</span> @127.0.0.1 example.com\n\n<span class=\"token function\">nslookup</span> example.com <span class=\"token number\">127.0</span>.0.1</code></pre></div>\n<p>Offtopic, to switch macos dns we may:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># list interfaces</span>\nnetworksetup <span class=\"token parameter variable\">-listnetworkserviceorder</span>\nnetworksetup <span class=\"token parameter variable\">-listallnetworkservices</span>\n\n<span class=\"token comment\"># change dns of Wi-Fi interface</span>\nnetworksetup <span class=\"token parameter variable\">-setdnsservers</span> Wi-Fi <span class=\"token number\">192.168</span>.1.20\n\n<span class=\"token comment\"># reset name servers used to the default</span>\nnetworksetup <span class=\"token parameter variable\">-setdnsservers</span> Wi-Fi empty\n\n<span class=\"token comment\"># get current dns servers</span>\nnetworksetup <span class=\"token parameter variable\">-getdnsservers</span> Wi-Fi</code></pre></div>\n<p>Having that in place the only thing left is to do the same in Kubernetes</p>\n<p>Each pod has configured <code class=\"language-text\">resolv.conf</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> prometheus-0 -- <span class=\"token function\">cat</span> /etc/resolv.conf\n<span class=\"token comment\"># search dev.svc.cluster.local svc.cluster.local cluster.local</span>\n<span class=\"token comment\"># nameserver 10.0.0.10</span></code></pre></div>\n<p>Pointing to coresponding CoreDNS service</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> kube-system get services kube-dns\n<span class=\"token comment\"># NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE</span>\n<span class=\"token comment\"># kube-dns   ClusterIP   10.0.0.10    &lt;none>        53/UDP,53/TCP   78d</span></code></pre></div>\n<p>Thats why resolving inside kubernetes happens via CoreDNS</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> prometheus-0 -- <span class=\"token function\">nc</span> <span class=\"token parameter variable\">-vz</span> myapp <span class=\"token number\">80</span>\n<span class=\"token comment\"># myapp (10.0.232.235:80) open</span></code></pre></div>\n<p>and allows us to make calls to <code class=\"language-text\">http://myapp/</code> which is service name (<code class=\"language-text\">kubectl get service myapp</code>)</p>\n<p>in our setup changes to coredns are disallowed, but there is an dedicated configmap to add modifications</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> kube-system get cm coredns-custom <span class=\"token parameter variable\">-o</span> yaml</code></pre></div>\n<p>which is empty by default</p>\n<p>so we are going to back it up</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> kube-system get cm coredns-custom <span class=\"token parameter variable\">-o</span> yaml <span class=\"token operator\">></span> backup.yml</code></pre></div>\n<p>adding custom hosts</p>\n<p><div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> coredns<span class=\"token punctuation\">-</span>custom\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>system\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">local.override</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span> <span class=\"token comment\"># you may select any name here, but it must end with the .override file extension</span>\n    hosts <span class=\"token punctuation\">{</span> \n      10.0.0.1 example1.org\n      10.0.0.2 example2.org\n      10.0.0.3 example3.org\n      fallthrough\n    <span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>for changes to apply we gonna need to restart dns pods</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> kube-system delete pod <span class=\"token parameter variable\">-l</span> k8s-app<span class=\"token operator\">=</span>kube-dns\nkubectl <span class=\"token parameter variable\">-n</span> kube-system get pod <span class=\"token parameter variable\">-l</span> k8s-app<span class=\"token operator\">=</span>kube-dns\nkubectl <span class=\"token parameter variable\">-n</span> kube-system logs <span class=\"token parameter variable\">-l</span> k8s-app<span class=\"token operator\">=</span>kube-dns</code></pre></div>\n<p>after that we may give it a try</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> prometheus-0 -- <span class=\"token function\">nc</span> <span class=\"token parameter variable\">-vz</span> <span class=\"token parameter variable\">-w</span> <span class=\"token number\">2</span> example3.org\n<span class=\"token comment\"># nc: example3.org (10.0.0.3:0): Connection timed out</span></code></pre></div>\n<p>as a result we have dedicated custom host names</p>\n<p>Trick with hosts file is easy to accomplish but has no wildcard option, thats why we are going hard way with <code class=\"language-text\">file</code> plugin instead</p>\n<p><div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> coredns<span class=\"token punctuation\">-</span>custom\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>system\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">local.server</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span> <span class=\"token comment\"># you may select any name here, but it must end with the .override file extension</span>\n    example.com<span class=\"token punctuation\">:</span>53 <span class=\"token punctuation\">{</span>\n      file /etc/coredns/custom/example.db\n      log\n      errors\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">example.db</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    $ORIGIN example.com.  ; designates the start of this zone file in the namespace\n    $TTL 1h               ; default expiration time of all resource records without their own TTL value</span>\n\n    ; =============================== Resource Records ==============================\n    @                 IN  SOA     ns.example.com. rtiger.example.com. (\n                                      2020010510     ; Serial\n                                      1d             ; Refresh\n                                      2h             ; Retry\n                                      4w             ; Expire\n                                      1h)            ; Minimum TTL\n    @                 IN  A       192.168.1.20       ; Local IPv4 address for example.com.\n    @                 IN  NS      ns.example.com.    ; Name server for example.com.\n    ns                IN  CNAME   @                  ; Alias for name server (points to example.com.)\n    webblog           IN  CNAME   @                  ; Alias for webblog.example.com\n    netprint          IN  CNAME   @                  ; Alias for netprint.example.com</code></pre></div></p>\n<p>Notes:</p>\n<ul>\n<li>in my case by mistake I had <code class=\"language-text\">db.example</code> in <code class=\"language-text\">local.server</code> and <code class=\"language-text\">example.db</code> in config map, inside logs there was errors complaining that <code class=\"language-text\">[ERROR] plugin/file: Failed to open zone \"example.com.\" in \"custom/example.db\": open custom/example.db: no such file or directory</code></li>\n<li>to figure out correct path you may want to look at <code class=\"language-text\">kubectl get deployment coredns -o yaml</code> to see where and how config map is mounted to container, in our case <code class=\"language-text\">mountPath: /etc/coredns/custom</code> thats why we have <code class=\"language-text\">file /etc/coredns/custom/example.db</code></li>\n</ul>\n<p>Once again for changes to take effect do not forget to \"restart\" deploymnet and check its logs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> kube-system delete pod <span class=\"token parameter variable\">-l</span> k8s-app<span class=\"token operator\">=</span>kube-dns\nkubectl <span class=\"token parameter variable\">-n</span> kube-system get pod <span class=\"token parameter variable\">-l</span> k8s-app<span class=\"token operator\">=</span>kube-dns\nkubectl <span class=\"token parameter variable\">-n</span> kube-system logs <span class=\"token parameter variable\">-l</span> k8s-app<span class=\"token operator\">=</span>kube-dns</code></pre></div>\n<p>And final check</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl run mactestdeleteme <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--image</span><span class=\"token operator\">=</span>ubuntu <span class=\"token parameter variable\">--overrides</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"spec\": { \"nodeSelector\": {\"kubernetes.io/os\": \"linux\"}}}'</span> -- <span class=\"token function\">bash</span>\n\n<span class=\"token function\">apt</span> <span class=\"token parameter variable\">-qq</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> <span class=\"token parameter variable\">-qq</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> dnsutils\n\n<span class=\"token function\">nslookup</span> example.com\n<span class=\"token function\">nslookup</span> webblog.example.com</code></pre></div>\n<p>The cools thing with such setup is that we may not only point to internal ingress but to other internal services as well and even more, with trick of ingress with custom internal ip we may configure everything in a such a way that ingress and coredns will be the entrypoints for everything.</p>\n<p>To rollback changes you may apply empty config map</p>\n<p><div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># creationTimestamp: \"2022-09-08T07:06:33Z\"</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">addonmanager.kubernetes.io/mode</span><span class=\"token punctuation\">:</span> EnsureExists\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>dns\n    <span class=\"token key atrule\">kubernetes.io/cluster-service</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> coredns<span class=\"token punctuation\">-</span>custom\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>system\n  <span class=\"token comment\"># resourceVersion: \"318\"</span>\n  <span class=\"token comment\"># uid: a782b320-d90b-4399-8d43-3ebe3d48cc0f</span></code></pre></div></p>\n<p>and once again restart containers.</p>\n<h2>CoreDNS Ingress</h2>\n<p>And there is one more option</p>\n<p>CoreDNS has rewrite plugin that allows you to simply add aliases for any domain pointing to any service</p>\n<p>Ingress itself has service which is used for incomming traffic</p>\n<p>In my case it is something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token parameter variable\">-n</span> ingress get svc ingress\n\n<span class=\"token comment\"># NAME      TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)                      AGE</span>\n<span class=\"token comment\"># ingress   LoadBalancer   10.0.125.37   20.10.170.60   80:31932/TCP,443:30431/TCP   82d</span></code></pre></div>\n<p>What you should not is that it has both external and internal ip addresses</p>\n<p>And if you will apply something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> coredns<span class=\"token punctuation\">-</span>custom\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>system\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rewrite.override</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    rewrite name foo.mac-blog.org.ua ingress.ingress.svc.cluster.local</span></code></pre></div>\n<p>Suddenly inside your cluster all requests to <code class=\"language-text\">foo.mac-blog.org.ua</code> will be resolved to <code class=\"language-text\">10.0.125.37</code> internall ingress service ip</p>\n<p>Also note that it does not matter in which namespaces services are, everything just works</p>\n<p>Rewrite has option to use regex, and to backport some outside services we always may use hosts plugin, so I ended up with something like:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> coredns<span class=\"token punctuation\">-</span>custom\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>system\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hosts.override</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    hosts {\n      10.50.10.4 another-service.mac-blog.org.ua\n      fallthrough\n    }</span>\n  <span class=\"token key atrule\">rewrite.override</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    rewrite regex (.+)\\.mac-blog\\.org\\.ua ingress.ingress.svc.cluster.local</span></code></pre></div></p>\n<p>And from now any subdomain will point to internal ip address of ingress, which means we are free to create as many ingresses as we want and everything will work and thanks to cert-manager we may even have tls for them and it also will work because acme requests will come outside the cluster</p>\n<p>With such setup there is no need in internal and external ingress everything may be covered with a single one</p>\n<p>What is cools it is transparent for applications and if we want some service to be internal only we always may use annotation like: <code class=\"language-text\">nginx.ingress.kubernetes.io/whielist-source-range: 10.50.0.0/16</code> on concrete ingress to disallow external access to it</p>"}},"pageContext":{"id":"808a5a55-6c48-5d3d-8cfa-f3b46fc006ff"}},"staticQueryHashes":[],"slicesMap":{}}