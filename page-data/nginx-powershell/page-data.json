{"componentChunkName":"component---src-templates-note-js","path":"/nginx-powershell/","result":{"data":{"remark":{"fields":{"path":"nginx-powershell"},"meta":{"title":""},"headings":[{"value":"nginx powershell"}],"html":"<h1>nginx powershell</h1>\n<p>From time to time there is a need to create some small service which is not required to be super fast or fancy</p>\n<p>In my case it will be a webhook for external system that will be called few times per day</p>\n<p>I wish not to have some buildable language, docker images, etc</p>\n<p>What if all this will be configured ad-hoc?</p>\n<p>Here is how we can have such service powered by powershell</p>\n<p>We are going to use <a href=\"https://hub.docker.com/_/nginx\">nginx:alpine</a> docker image, install powershell and fastcgi inside and serve our endpoints with powershell scripts</p>\n<p>Here are starting point examples (make sure to make all scripts executable by running <code class=\"language-text\">chmod +x script.file</code>)</p>\n<p><strong>entrypoint.sh</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\napk <span class=\"token function\">add</span> <span class=\"token parameter variable\">-q</span> fcgiwrap spawn-fcgi powershell\n\n/usr/bin/spawn-fcgi <span class=\"token parameter variable\">-s</span> /var/run/fcgiwrap.socket <span class=\"token parameter variable\">-M</span> <span class=\"token number\">766</span> /usr/bin/fcgiwrap</code></pre></div></p>\n<p>Nothing fancy here, just installing required software and instantiating fastcgi</p>\n<p><strong>default.conf</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">server {\n  listen 80;\n  root   /usr/share/nginx/html;\n\n  location /post {\n    fastcgi_pass unix:/var/run/fcgiwrap.socket;\n    fastcgi_param REQUEST_BODY $request_body;\n    fastcgi_param SCRIPT_FILENAME /usr/share/nginx/html/post.ps1;\n  }\n\n  location /query {\n    fastcgi_pass unix:/var/run/fcgiwrap.socket;\n    fastcgi_param NAME $arg_name;\n    fastcgi_param SCRIPT_FILENAME /usr/share/nginx/html/query.ps1;\n  }\n}</code></pre></div></p>\n<p>Here you can see how we are mapping certain urls to our scripts, as well as how to pass request body and query string parameters</p>\n<p>And here are our oversimplified scripts</p>\n<p><strong>post.ps1</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\">#!/usr/bin/pwsh</span>\n\n\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">'content-type: application/json'</span>\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">'cache-control: no-store'</span>\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">''</span>\n<span class=\"token variable\">$body</span> = <span class=\"token variable\">$env</span>:REQUEST_BODY <span class=\"token punctuation\">|</span> <span class=\"token function\">ConvertFrom-Json</span>\n<span class=\"token variable\">$body</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">ConvertTo-Json</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Out-Host</span></code></pre></div></p>\n<p><strong>query.ps1</strong></p>\n<p><div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\">#!/usr/bin/pwsh</span>\n\n\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">'content-type: text/html'</span>\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">'cache-control: no-store'</span>\n<span class=\"token function\">Write-Host</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$env</span>:NAME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"&lt;h1>Hell <span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$env</span>:NAME<span class=\"token punctuation\">)</span></span>&lt;/h1>\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"&lt;h1>Hell World&lt;/h1>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Now we can run container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:80 <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/entrypoint.sh:/docker-entrypoint.d/00-init.sh <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/default.conf:/etc/nginx/conf.d/default.conf <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/post.ps1:/usr/share/nginx/html/post.ps1 <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/query.ps1:/usr/share/nginx/html/query.ps1 nginx:alpine</code></pre></div>\n<p>Usage examples</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8080\n<span class=\"token comment\"># will respond with default nginx page</span>\n\n<span class=\"token function\">curl</span> localhost:8080/query\n<span class=\"token comment\"># &lt;h1>Hello World&lt;/h1></span>\n\n<span class=\"token function\">curl</span> localhost:8080/query?name<span class=\"token operator\">=</span>Alex\n<span class=\"token comment\"># &lt;h1>Hello Alex&lt;/h1></span>\n\n<span class=\"token function\">curl</span> localhost:8080/post <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"foo\":\"bar\"}'</span>\n<span class=\"token comment\"># {</span>\n<span class=\"token comment\">#   \"foo\": \"bar\"</span>\n<span class=\"token comment\"># }</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>because of how locations work, even if you will call <code class=\"language-text\">/query.ps1</code> results will be the same</li>\n<li>make sure to not mess with headers and content</li>\n<li>more complex bash example can be found <a href=\"https://github.com/mac2000/wireguard\">here</a></li>\n</ul>"}},"pageContext":{"id":"70ea904e-db53-5047-ab23-db18c890d0c3"}},"staticQueryHashes":[],"slicesMap":{}}