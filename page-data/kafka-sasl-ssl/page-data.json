{"componentChunkName":"component---src-templates-note-js","path":"/kafka-sasl-ssl","result":{"data":{"remark":{"fields":{"path":"kafka-sasl-ssl"},"meta":{"title":""},"headings":[{"value":"Kafka SASL SSL authentication like in Confluent"},{"value":"So here is our final setup"}],"html":"<h1>Kafka SASL SSL authentication like in Confluent</h1>\n<p>Confluent changed pricing policy which forced us to move all dev environments down to the ground</p>\n<p>But configuring Kafka is not so easy as it seems, especially when we are talking about authentication</p>\n<p>In this note I'm going to recreate step by step actions required to get <code class=\"language-text\">SASL_SSL</code> authentication working same way as in Concluent cloud</p>\n<blockquote>\n<p>TLDR: Jump to \"Kafka SASL_SSL + LetsEncrypt\" for final configuration</p>\n</blockquote>\n<h2>Confluent Kafka</h2>\n<p>To simplify things suppose we have dedicated server with a public ip address</p>\n<p>We wont do any fancy containers/kubernetes for simplicity</p>\n<p>At the very end we want our client to connect to Kafka with config like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-yyyyy.europe-west3.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username=\"mac\" password=\"123\";</span></code></pre></div>\n<p>which was taken from confluent cloud</p>\n<h2>Prerequisites</h2>\n<p>Before anything else we need to perform some house keeping</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$USER</span> <span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span>NOPASSWD: ALL <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/sudoers.d/<span class=\"token environment constant\">$USER</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> dist-upgrade <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">reboot</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoclean <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> timedatectl set-timezone Europe/Kiev</code></pre></div>\n<h2>Plain - aka anonymous http</h2>\n<p>Before doing any authorization lets get up and running as is</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># java is required</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> default-jre\n\n<span class=\"token comment\"># download kafka</span>\n<span class=\"token function\">wget</span> https://archive.apache.org/dist/kafka/2.6.1/kafka_2.12-2.6.1.tgz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzf</span> kafka_2.12-2.6.1.tgz\n<span class=\"token builtin class-name\">cd</span> kafka_2.12-2.6.1\n\n<span class=\"token comment\"># start kafka and zookeeper</span>\nbin/zookeeper-server-start.sh config/zookeeper.properties\nbin/kafka-server-start.sh config/server.properties\n\n<span class=\"token comment\"># demo</span>\nbin/kafka-topics.sh <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> demo --bootstrap-server localhost:9092\nbin/kafka-topics.sh <span class=\"token parameter variable\">--describe</span> <span class=\"token parameter variable\">--topic</span> demo --bootstrap-server localhost:9092\nbin/kafka-console-producer.sh <span class=\"token parameter variable\">--topic</span> demo --bootstrap-server localhost:9092\nbin/kafka-console-consumer.sh <span class=\"token parameter variable\">--topic</span> demo --from-beginning --bootstrap-server localhost:9092\nbin/kafka-topics.sh --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--list</span>\n\n<span class=\"token comment\"># cleanup</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /tmp/kafka-logs /tmp/zookeeper</code></pre></div>\n<p>Because of how Kafka configured by default you wont be able to connect to it from outside</p>\n<p>Try this on a client machine</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://archive.apache.org/dist/kafka/2.6.1/kafka_2.12-2.6.1.tgz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzf</span> kafka_2.12-2.6.1.tgz\n<span class=\"token builtin class-name\">cd</span> kafka_2.12-2.6.1\nbin/kafka-topics.sh --bootstrap-server <span class=\"token number\">178.20</span>.154.77:9092 <span class=\"token parameter variable\">--list</span></code></pre></div>\n<p>You will receive an error complaining:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token punctuation\">[</span><span class=\"token date number\">2021-11-14</span> <span class=\"token time number\">22:41:35,906</span><span class=\"token punctuation\">]</span> <span class=\"token level warning important\">WARN</span> <span class=\"token punctuation\">[</span>AdminClient clientId<span class=\"token operator\">=</span>adminclient<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> Error connecting to node kafka<span class=\"token operator\">:</span><span class=\"token number\">9092</span> <span class=\"token operator\">(</span>id<span class=\"token operator\">:</span> <span class=\"token number\">0</span> rack<span class=\"token operator\">:</span> <span class=\"token boolean\">null</span><span class=\"token operator\">)</span> <span class=\"token operator\">(</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>NetworkClient<span class=\"token operator\">)</span>\n<span class=\"token property\">java.net.UnknownHostException:</span> kafka</code></pre></div>\n<p>By default Kafka listens on all interfaces port 9092, but whenever client is connected Kafka asks him to send requests to its hostname, in my case it is <code class=\"language-text\">kafka</code> and it is not resolvable from outside and as a result not reachable (think of it like if you was trying to <code class=\"language-text\">ping kafka</code>, what is <code class=\"language-text\">kafka</code> where to find its ip address)</p>\n<p>Easy fix is to add kafka public ip address to your hosts like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'178.20.154.77 kafka'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/hosts</code></pre></div>\n<p>After this everything will work as expected</p>\n<p>Notes:</p>\n<ul>\n<li>do not forget to remove this hosts record we wont need it</li>\n<li>if your virtual machine has public ip address never ever leave kafka as is - technically it is publicly accessible and has no authentication at all</li>\n</ul>\n<p>Proper, but still insecure way will be to set hostname to something we can resolve:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> hostnamectl set-hostname kafka.marchenko.net.ua</code></pre></div>\n<p>For this to work - you need to restart kafka, it reads hostname on start only, also be sure to cleanup everything, kafka and zookeeper will rememeber previous setup, actually cleanup on each and every step</p>\n<p>So now we can try:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/kafka-topics.sh --bootstrap-server kafka.marchenko.net.ua:9092 <span class=\"token parameter variable\">--list</span>\nbin/kafka-topics.sh --bootstrap-server <span class=\"token number\">178.20</span>.154.77:9092 <span class=\"token parameter variable\">--list</span></code></pre></div>\n<p>Both should work</p>\n<p><strong>Links:</strong></p>\n<ul>\n<li><a href=\"https://kafka.apache.org/quickstart\">https://kafka.apache.org/quickstart</a></li>\n<li><a href=\"https://kafka.apache.org/downloads\">https://kafka.apache.org/downloads</a></li>\n</ul>\n<p>we will need stop and cleanup kafka often so here is little <code class=\"language-text\">stop.sh</code> script</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">pid</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token function\">java</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $1}'</span><span class=\"token variable\">)</span></span>\n<span class=\"token keyword\">do</span>\n\t<span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token variable\">$pid</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$pid</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /tmp/kafka-logs /tmp/zookeeper</code></pre></div>\n<h2>Listeners &#x26; Advertised Listeners</h2>\n<p>Before moving forward we need to figure out what exactly is <code class=\"language-text\">listeners</code> and <code class=\"language-text\">advertised.listeners</code>, why the heek we need second if we are not building cluster and just trying to build single node Kafka</p>\n<p>Both <code class=\"language-text\">listeners</code> and <code class=\"language-text\">advertised.listeners</code> is a comma separated lists of <code class=\"language-text\">PROTOCOL:IP:PORT</code></p>\n<p><code class=\"language-text\">listeners</code> are describing interfeces to which Kafka will bind on start (e.g. like <code class=\"language-text\">server.listen('0.0.0.0:9092')</code>)</p>\n<p><code class=\"language-text\">advertised.listeners</code> are instructions to clients to where send requests</p>\n<p>Even if you are running single node Kafka cluster it still speaks to itself via <code class=\"language-text\">advertised.listeners</code> rather than <code class=\"language-text\">listeners</code>, also it always prevers <code class=\"language-text\">PLAINTEXT</code></p>\n<p>Deep inside Kafka consists of series components, most important for us are server and controller</p>\n<p>Can viaualize it like</p>\n<svg width=\"114pt\" height=\"229pt\" viewBox=\"0.00 0.00 114.00 228.80\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"max-width: 100%; height: auto;\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 224.8)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-224.8 110,-224.8 110,4 -4,4\"></polygon>\n<g id=\"clust1\" class=\"cluster\">\n<title>cluster_0</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"8,-64 8,-212.8 98,-212.8 98,-64 8,-64\"></polygon>\n<text text-anchor=\"middle\" x=\"53\" y=\"-196.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Broker</text>\n</g>\n<!-- Server -->\n<g id=\"node1\" class=\"node\">\n<title>Server</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"80,-180 26,-180 26,-144 80,-144 80,-180\"></polygon>\n<text text-anchor=\"middle\" x=\"53\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Server</text>\n</g>\n<!-- Controller -->\n<g id=\"node2\" class=\"node\">\n<title>Controller</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"89.5456,-108 16.4544,-108 16.4544,-72 89.5456,-72 89.5456,-108\"></polygon>\n<text text-anchor=\"middle\" x=\"53\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Controller</text>\n</g>\n<!-- Server&#45;&gt;Controller -->\n<g id=\"edge1\" class=\"edge\">\n<title>Server-&gt;Controller</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M53,-143.8314C53,-136.131 53,-126.9743 53,-118.4166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"56.5001,-118.4132 53,-108.4133 49.5001,-118.4133 56.5001,-118.4132\"></polygon>\n</g>\n<!-- Zookeeper -->\n<g id=\"node3\" class=\"node\">\n<title>Zookeeper</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"90.8571,-36 15.1429,-36 15.1429,0 90.8571,0 90.8571,-36\"></polygon>\n<text text-anchor=\"middle\" x=\"53\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Zookeeper</text>\n</g>\n<!-- Controller&#45;&gt;Zookeeper -->\n<g id=\"edge2\" class=\"edge\">\n<title>Controller-&gt;Zookeeper</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M53,-71.8314C53,-64.131 53,-54.9743 53,-46.4166\"></path>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"56.5001,-46.4132 53,-36.4133 49.5001,-46.4133 56.5001,-46.4132\"></polygon>\n</g>\n</g>\n</svg>\n<p>If we have multiple nodes</p>\n<svg width=\"276pt\" height=\"258pt\" viewBox=\"0.00 0.00 275.93 257.60\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"max-width: 100%; height: auto;\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 253.6)\">\n<title>G</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-253.6 271.9285,-253.6 271.9285,4 -4,4\"></polygon>\n<g id=\"clust1\" class=\"cluster\">\n<title>cluster_0</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"139,-92.8 139,-241.6 235,-241.6 235,-92.8 139,-92.8\"></polygon>\n<text text-anchor=\"middle\" x=\"187\" y=\"-225\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Broker 1</text>\n</g>\n<g id=\"clust2\" class=\"cluster\">\n<title>cluster_1</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"8,-8 8,-84.8 182,-84.8 182,-8 8,-8\"></polygon>\n<text text-anchor=\"middle\" x=\"95\" y=\"-68.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Broker 2</text>\n</g>\n<!-- Server1 -->\n<g id=\"node1\" class=\"node\">\n<title>Server1</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"216.5348,-208.8 157.4652,-208.8 157.4652,-172.8 216.5348,-172.8 216.5348,-208.8\"></polygon>\n<text text-anchor=\"middle\" x=\"187\" y=\"-186.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Server1</text>\n</g>\n<!-- Controller1 -->\n<g id=\"node2\" class=\"node\">\n<title>Controller1</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"227.0455,-136.8 146.9545,-136.8 146.9545,-100.8 227.0455,-100.8 227.0455,-136.8\"></polygon>\n<text text-anchor=\"middle\" x=\"187\" y=\"-114.6\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Controller1</text>\n</g>\n<!-- Server1&#45;&gt;Controller1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>Server1-&gt;Controller1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M181.0476,-172.6314C180.2972,-164.931 180.0763,-155.7743 180.3849,-147.2166\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"183.8792,-147.4161 181.024,-137.2133 176.8935,-146.9697 183.8792,-147.4161\"></polygon>\n</g>\n<!-- Controller1&#45;&gt;Server1 -->\n<g id=\"edge4\" class=\"edge\">\n<title>Controller1-&gt;Server1</title>\n<path fill=\"none\" stroke=\"#ffa500\" d=\"M192.976,-137.2133C193.7071,-144.8593 193.9203,-153.9084 193.6155,-162.3726\"></path>\n<polygon fill=\"#ffa500\" stroke=\"#ffa500\" points=\"190.1048,-162.4264 192.9524,-172.6314 197.0902,-162.878 190.1048,-162.4264\"></polygon>\n</g>\n<!-- Server2 -->\n<g id=\"node3\" class=\"node\">\n<title>Server2</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"173.5348,-52 114.4652,-52 114.4652,-16 173.5348,-16 173.5348,-52\"></polygon>\n<text text-anchor=\"middle\" x=\"144\" y=\"-29.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Server2</text>\n</g>\n<!-- Controller1&#45;&gt;Server2 -->\n<g id=\"edge5\" class=\"edge\">\n<title>Controller1-&gt;Server2</title>\n<path fill=\"none\" stroke=\"#ffa500\" d=\"M183.3481,-100.3997C178.663,-88.8756 171.2501,-73.8246 164.0098,-60.9665\"></path>\n<polygon fill=\"#ffa500\" stroke=\"#ffa500\" points=\"166.8787,-58.939 158.8096,-52.0731 160.8359,-62.4724 166.8787,-58.939\"></polygon>\n</g>\n<!-- Zookeeper -->\n<g id=\"node5\" class=\"node\">\n<title>Zookeeper</title>\n<polygon fill=\"none\" stroke=\"#000000\" points=\"267.8571,-52 192.1429,-52 192.1429,-16 267.8571,-16 267.8571,-52\"></polygon>\n<text text-anchor=\"middle\" x=\"230\" y=\"-29.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Zookeeper</text>\n</g>\n<!-- Controller1&#45;&gt;Zookeeper -->\n<g id=\"edge3\" class=\"edge\">\n<title>Controller1-&gt;Zookeeper</title>\n<path fill=\"none\" stroke=\"#0000ff\" d=\"M196.3304,-100.3997C202.1172,-88.9874 209.6579,-74.1165 216.1358,-61.3416\"></path>\n<polygon fill=\"#0000ff\" stroke=\"#0000ff\" points=\"219.4346,-62.5749 220.8356,-52.0731 213.1914,-59.4091 219.4346,-62.5749\"></polygon>\n</g>\n<!-- Server2&#45;&gt;Controller1 -->\n<g id=\"edge2\" class=\"edge\">\n<title>Server2-&gt;Controller1</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M147.5193,-52.0731C152.1522,-63.5297 159.5406,-78.5676 166.784,-91.4668\"></path>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"163.9313,-93.523 171.9912,-100.3997 169.9788,-89.9977 163.9313,-93.523\"></polygon>\n</g>\n<!-- Controller2 -->\n<g id=\"node4\" class=\"node\">\n<title>Controller2</title>\n<polygon fill=\"#d3d3d3\" stroke=\"#000000\" points=\"96.0455,-52 15.9545,-52 15.9545,-16 96.0455,-16 96.0455,-52\"></polygon>\n<text text-anchor=\"middle\" x=\"56\" y=\"-29.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Controller2</text>\n</g>\n</g>\n</svg>\n<p>In cluster only one controller is active master and others are chilling and is here only for failover</p>\n<p>Thats the reason why even in single node Kafka still goes via advertised listeners</p>\n<p>So in default config we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># The address the socket server listens on. It will get the value returned from</span>\n<span class=\"token comment\"># java.net.InetAddress.getCanonicalHostName() if not configured.</span>\n<span class=\"token comment\">#   FORMAT:</span>\n<span class=\"token comment\">#     listeners = listener_name://host_name:port</span>\n<span class=\"token comment\">#   EXAMPLE:</span>\n<span class=\"token comment\">#     listeners = PLAINTEXT://your.host.name:9092</span>\n<span class=\"token comment\">#listeners=PLAINTEXT://:9092</span>\n\n<span class=\"token comment\"># Hostname and port the broker will advertise to producers and consumers. If not set,</span>\n<span class=\"token comment\"># it uses the value for \"listeners\" if configured.  Otherwise, it will use the value</span>\n<span class=\"token comment\"># returned from java.net.InetAddress.getCanonicalHostName().</span>\n<span class=\"token comment\">#advertised.listeners=PLAINTEXT://your.host.name:9092</span></code></pre></div>\n<p>Note that both <code class=\"language-text\">listeners</code> and <code class=\"language-text\">advertised.listeners</code> are configured with <code class=\"language-text\">PLAINTEXT</code> procol which actually means allow anonymous access</p>\n<p>Also <code class=\"language-text\">listeners</code> does not specify ip address which means that we gonna listen all interfaces (aka 0.0.0.0) and our kafka will be open to the whole world IF <code class=\"language-text\">advertised.listeners</code> is not set and hostname can be resolved to reachable ip address</p>\n<p>So for example if we have public ip address <code class=\"language-text\">178.20.154.77</code> and a domain name pointing to it we can configure kafka like</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://178.20.154.77:9092</span></code></pre></div>\n<p>Will allow anonymous connections from inside and outside</p>\n<p>And following config</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://127.0.0.1:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://127.0.0.1:9092</span></code></pre></div>\n<p>Will allow only local connection</p>\n<p>The reason for all this madness will be solved later with authentication, because each option can have comma separated list and brokers tent to use plaintext communications idea here is to have plaintext over private local network for inter broker communications and sasl ssl over public one for clients</p>\n<h2>Kafka Authentication and Encryption</h2>\n<p>Before jumping into both authentication and encryption we need to define some kind of terms</p>\n<h3>Encryption</h3>\n<p>Whenever we are talking aboun encryption in Kafka it is literally the same as talking about HTTP (PLAINTEXT) and HTTPS (SSL)</p>\n<h3>Authentication</h3>\n<p>Under the hood Kafka uses <a href=\"https://en.wikipedia.org/wiki/Java_Authentication_and_Authorization_Service\">JAAS</a> (Java Authentication and Authorization Service)</p>\n<p>JAAS has set of so called mechanisms - ways to verify credentials and prpotocols - thats story about http vs https</p>\n<p>There are numerous of available mechnisms like kerberos and whatsoever, but we are looking for a <code class=\"language-text\">plain</code> one because it is used by confluent cloud and we wish to have exactly the same</p>\n<h3>Kafka Security HTTP Analogy</h3>\n<p>In simple words imagine you have web site</p>\n<p><strong>http, anonymous</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://kafka.marchenko.net.ua:9092</span></code></pre></div>\n<p><strong>https, anonymous</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL://kafka.marchenko.net.ua:9092</span></code></pre></div>\n<p><strong>http, basic auth</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_PLAINTEXT</span>\n<span class=\"token key attr-name\">sasl.enabled.mechanisms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span></code></pre></div>\n<p><strong>https, basic auth</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.enabled.mechanisms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span></code></pre></div>\n<p>Plus specific options, step by step we are going to configure this options till we get desired <code class=\"language-text\">SASL_SSL</code></p>\n<h2>SASL_PLAINTEXT - aka HTTP Basic Auth</h2>\n<p>The easiest possible way to start with authentication is <code class=\"language-text\">SASL_PLAINTEXT</code> for it to work we are using following config on a server:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://0.0.0.0:9093,SASL_PLAINTEXT://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://127.0.0.1:9093,SASL_PLAINTEXT://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_PLAINTEXT</span>\n<span class=\"token key attr-name\">sasl.enabled.mechanisms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">listener.name.sasl_plaintext.plain.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required \\</span>\n  <span class=\"token key attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"admin\" \\</span>\n  <span class=\"token key attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_admin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_mac</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"123\";</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>take a look how we are preventing <code class=\"language-text\">PLAINTEXT</code> access from outside (it will be used by kafka itself)</li>\n<li>take attention to this huge JAAS config, its key has <code class=\"language-text\">sasl_plaintext</code> inside, it is important and should match chosen <code class=\"language-text\">security.protocol</code> (e.g. when you will try <code class=\"language-text\">SASL_SSL</code> do not forget to change it also)</li>\n<li>value of JAAS config has <code class=\"language-text\">username</code> and <code class=\"language-text\">password</code> which are kind of <code class=\"language-text\">root</code> user and will be used by kafka itself if there is no <code class=\"language-text\">PLAINTEXT</code> available, all other stings are describing available users in form <code class=\"language-text\">user_[username]=\"[password]\"</code></li>\n<li>be sure to not have any spaces after <code class=\"language-text\">\\</code></li>\n<li>if you put everything into single line be sure to escape equal signs</li>\n<li>take a note on ports, because we can not bind multiple times we are using non default 9093 port for plain text</li>\n</ul>\n<p>And now on a client side we need config file:</p>\n<p><strong>client.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_PLAINTEXT</span>\n<span class=\"token key attr-name\">sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"mac\" password\\=\"123\";</span></code></pre></div>\n<p>And try to connect:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/kafka-topics.sh --bootstrap-server kafka.marchenko.net.ua:9092 --command-config client.properties <span class=\"token parameter variable\">--list</span></code></pre></div>\n<p>Everything should work fine, but if you will try to connect without providing password it should fail with timeout - here you have your at least very very basic auth</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/kafka-topics.sh --bootstrap-server kafka.marchenko.net.ua:9093 <span class=\"token parameter variable\">--list</span></code></pre></div>\n<p>Note that still from a server we can connect without any passwords because of plaintext, we can remove it, so even local connections will go with authentication</p>\n<h3>SASL_PLAINTEXT interbroker</h3>\n<p>To require authentication even between brokers we need following config:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_PLAINTEXT://0.0.0.0:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_PLAINTEXT://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">security.inter.broker.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_PLAINTEXT</span>\n<span class=\"token key attr-name\">sasl.mechanism.inter.broker.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">sasl.enabled.mechanisms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">listener.name.sasl_plaintext.plain.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required \\</span>\n  <span class=\"token key attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"admin\" \\</span>\n  <span class=\"token key attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_admin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_mac</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"123\";</span></code></pre></div>\n<p>Same way as for client we are defining mechanism and protocol to use</p>\n<p><strong>IMPORTANT:</strong> make sure that your username ini jaas config appears two times, like admin in our example, otherwise Kafka wont start complaining that it can not connect to itsefl because of invalid username or password</p>\n<p>From now on you gonna need <code class=\"language-text\">client.properties</code> on both server and client</p>\n<p>It is the same as configuring basic auth for a http server (still without https)</p>\n<h2>SSL</h2>\n<p>In this part we are going to leave authentication for a moment and configure SSL (HTTPS)</p>\n<h3>Self Signed Certificates</h3>\n<p>For our \"https\" to work we gonna need certificates, you can create self signed certificates like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl req <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=kafka.marchenko.net.ua/\"</span> <span class=\"token parameter variable\">-newkey</span> rsa:2048 <span class=\"token parameter variable\">-nodes</span> <span class=\"token parameter variable\">-keyout</span> kafka.marchenko.net.ua.key <span class=\"token parameter variable\">-x509</span> <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span> <span class=\"token parameter variable\">-out</span> kafka.marchenko.net.ua.pem</code></pre></div>\n<p>This command will create <code class=\"language-text\">kafka.marchenko.net.ua.key</code> which is our private key and should be kept in secret and <code class=\"language-text\">kafka.marchenko.net.ua.pem</code> which is our certificate and can be sent to anyone</p>\n<p>For Kafka to work with this certificates we need to pack them into so called <code class=\"language-text\">pk12</code> keychain</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl pkcs12 <span class=\"token parameter variable\">-export</span> <span class=\"token parameter variable\">-out</span> server.keystore.p12 <span class=\"token parameter variable\">-in</span> kafka.marchenko.net.ua.pem <span class=\"token parameter variable\">-inkey</span> kafka.marchenko.net.ua.key</code></pre></div>\n<p>This one will generate <code class=\"language-text\">server.keystore.p12</code> which will be used by kafka server and inside contains both private key and certificate created before</p>\n<p>But also we need one more so called truststore <code class=\"language-text\">jks</code> for clients (think of it as adding self signed certificates to trusted root)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">keytool <span class=\"token parameter variable\">-keystore</span> client.truststore.jks <span class=\"token parameter variable\">-import</span> <span class=\"token parameter variable\">-file</span> kafka.marchenko.net.ua.pem</code></pre></div>\n<h2>Kafka SSL</h2>\n<p>As with basic auth lets start with both plaintext and ssl in our server properties</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://localhost:9093,SSL://:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://localhost:9093,SSL://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">ssl.keystore.location</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/home/mac/kafka_2.12-2.6.1/server.keystore.p12</span>\n<span class=\"token key attr-name\">ssl.keystore.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></code></pre></div>\n<p>Now for the client we must grab trust store</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> kafka:kafka_2.12-2.6.1/client.truststore.jks <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>And following <code class=\"language-text\">ssl.properties</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL</span>\n\n<span class=\"token key attr-name\">ssl.truststore.location</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/Users/mac/Downloads/kafka_2.12-2.6.1/client.truststore.jks</span>\n<span class=\"token key attr-name\">ssl.truststore.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></code></pre></div>\n<p>Now if we will try to connect from client</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/kafka-topics.sh --bootstrap-server kafka.marchenko.net.ua:9092 --command-config ssl.properties <span class=\"token parameter variable\">--list</span></code></pre></div>\n<h3>Letsencrypt</h3>\n<p>As you can guess it is not actually the same as in confluent cloud, for us to be the same we gonna need valid certificate so it will work without trustore</p>\n<p>First of all install certbot</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> certbot</code></pre></div>\n<p>And start certificate creation wizerd</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot certonly <span class=\"token parameter variable\">--standalone</span></code></pre></div>\n<p>Note that with method expects that port 80 is free and will be used for a challanged, certbot will bring its own web service for this</p>\n<p>After certificates are created you should see congratulations message with following info:</p>\n<ul>\n<li>certificate: /etc/letsencrypt/live/kafka.marchenko.net.ua/fullchain.pem</li>\n<li>private key: /etc/letsencrypt/live/kafka.marchenko.net.ua/privkey.pem</li>\n<li>secrets for upgrade: /etc/letsencrypt</li>\n<li>recommendation to backup this folder</li>\n<li>command to renew certificate: <code class=\"language-text\">certbot renew</code></li>\n</ul>\n<p>Kafka wants p12 keystore so once again lets create it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># just cleaning up everything</span>\n<span class=\"token function\">rm</span> kafka.marchenko.net.ua.* client.truststore.jks server.keystore.p12\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /etc/letsencrypt/live/kafka.marchenko.net.ua/fullchain.pem <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /etc/letsencrypt/live/kafka.marchenko.net.ua/privkey.pem <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> mac:mac fullchain.pem\n<span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> mac:mac privkey.pem\n\n<span class=\"token comment\"># create jks keychain for java/kafka, password 123456</span>\nopenssl pkcs12 <span class=\"token parameter variable\">-export</span> <span class=\"token parameter variable\">-out</span> server.keystore.p12 <span class=\"token parameter variable\">-in</span> fullchain.pem <span class=\"token parameter variable\">-inkey</span> privkey.pem</code></pre></div>\n<p>No need to change anything in server properties, file path and password left the same, but now our client properties might be as simple as <code class=\"language-text\">le.properties</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL</span></code></pre></div>\n<p>And everything should work</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/kafka-topics.sh --bootstrap-server kafka.marchenko.net.ua:9092 --command-config le.properties <span class=\"token parameter variable\">--list</span></code></pre></div>\n<p>One final touch, lets configure our server to work only via ssl</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL://:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL://kafka.marchenko.net.ua:9092</span>\n<span class=\"token key attr-name\">security.inter.broker.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SSL</span>\n\n<span class=\"token key attr-name\">ssl.keystore.location</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/home/mac/kafka_2.12-2.6.1/server.keystore.p12</span>\n<span class=\"token key attr-name\">ssl.keystore.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></code></pre></div>\n<p>Note that from now on even local connections shold be made to fqdn, localhost does not work anymore because certificate was signed for our domain</p>\n<h2>Kafka SASL_SSL + LetsEncrypt</h2>\n<p>Now it is time to combine pieces together - our SSL (HTTPS) and SASL_PLAINTEXT (Basic Auth)</p>\n<p>Once again starting with a PLAINTEXT for simplicity</p>\n<p>Our server properties now will look like</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://:9093,SASL_SSL://:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAINTEXT://127.0.0.1:9093,SASL_SSL://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.enabled.mechanisms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">ssl.keystore.location</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/home/mac/kafka_2.12-2.6.1/server.keystore.p12</span>\n<span class=\"token key attr-name\">ssl.keystore.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span>\n\n<span class=\"token comment\"># do not forget to replace sasl_plaintext to sasl_ssl</span>\n<span class=\"token key attr-name\">listener.name.sasl_ssl.plain.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required \\</span>\n  <span class=\"token key attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"admin\" \\</span>\n  <span class=\"token key attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_admin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_mac</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"123\";</span></code></pre></div>\n<p>And once again our final touch to allow only secure and basic auth so need to configure server</p>\n<h1>So here is our final setup</h1>\n<p><strong>server.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL://:9092</span>\n<span class=\"token key attr-name\">advertised.listeners</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL://kafka.marchenko.net.ua:9092</span>\n\n<span class=\"token key attr-name\">security.inter.broker.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.mechanism.inter.broker.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.enabled.mechanisms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">ssl.keystore.location</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/home/mac/kafka_2.12-2.6.1/server.keystore.p12</span>\n<span class=\"token key attr-name\">ssl.keystore.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span>\n\n<span class=\"token key attr-name\">listener.name.sasl_ssl.plain.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required \\</span>\n  <span class=\"token key attr-name\">username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"admin\" \\</span>\n  <span class=\"token key attr-name\">password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_admin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"hello\" \\</span>\n  <span class=\"token key attr-name\">user_mac</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"123\";</span></code></pre></div>\n<p><strong>client.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required serviceName\\=\"Kafka\" username\\=\"mac\" password\\=\"123\";</span></code></pre></div>\n<h2>TODO</h2>\n<ul>\n<li>Schema Registry</li>\n<li>Rest Proxy</li>\n<li>Connect</li>\n</ul>"}},"pageContext":{"id":"aec928bb-69f8-5725-9d9d-4db52773a5d2"}},"staticQueryHashes":[]}