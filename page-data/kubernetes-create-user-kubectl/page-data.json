{"componentChunkName":"component---src-templates-note-js","path":"/kubernetes-create-user-kubectl/","result":{"data":{"remark":{"fields":{"path":"kubernetes-create-user-kubectl"},"meta":{"title":""},"headings":[{"value":"Kubernetes create RBAC user for kubectl"}],"html":"<h1>Kubernetes create RBAC user for kubectl</h1>\n<p>Suppose we have an Kubernetes cluster with enabled RBAC and want to create dedicated \"user\" for <code class=\"language-text\">kubectl</code></p>\n<blockquote>\n<p>Note: inside Kubernetes there is no such things as \"users\" and for end users it is better to utilize some kind of OpenId Connect provider instead, in this demo we are using certificate based authorization, and certificate subject is used as a \"username\"</p>\n</blockquote>\n<p>The process outline:</p>\n<ul>\n<li>create RSA private key</li>\n<li>create certificate signing request (CSR) for this private key</li>\n<li>send this CSR to Kubernetes and sign it with its CA</li>\n<li>retrieve signed certificate</li>\n<li>create config file for kubectl</li>\n<li>check that we can talk to Kubernetes but do not have privileges</li>\n<li>grant privileges</li>\n</ul>\n<p>The script:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">USERNAME</span><span class=\"token operator\">=</span>demo\n\n<span class=\"token comment\"># create private key (PKCS1, 2048, PEM)</span>\nopenssl genrsa <span class=\"token parameter variable\">-out</span> <span class=\"token variable\">$USERNAME</span>.pem\n\n<span class=\"token comment\"># create signing request (will be used in next step)</span>\nopenssl req <span class=\"token parameter variable\">-new</span> <span class=\"token parameter variable\">-key</span> <span class=\"token variable\">$USERNAME</span>.pem <span class=\"token parameter variable\">-out</span> <span class=\"token variable\">$USERNAME</span>.csr <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=<span class=\"token variable\">$USERNAME</span>\"</span>\n\n<span class=\"token comment\"># pass signing request into kubernetes</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">|</span> kubectl apply <span class=\"token parameter variable\">-f</span> -</span>\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: <span class=\"token variable\">$USERNAME</span>\nspec:\n  request: <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> $USERNAME.csr <span class=\"token operator\">|</span> base64<span class=\"token variable\">)</span></span>\n  signerName: kubernetes.io/kube-apiserver-client\n  expirationSeconds: 600\n  usages:\n  - client auth\nEOF</span>\n\n<span class=\"token comment\"># kubectl get csr $USERNAME # condition - pending</span>\n\n<span class=\"token comment\"># sign requerst</span>\nkubectl certificate approve <span class=\"token variable\">$USERNAME</span>\n\n<span class=\"token comment\"># kubectl get csr $USERNAME # condition -> approved,issued</span>\n\nkubectl get csr <span class=\"token variable\">$USERNAME</span> <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">jsonpath</span><span class=\"token operator\">=</span><span class=\"token string\">'{.status.certificate}'</span> <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">-d</span> <span class=\"token operator\">></span> <span class=\"token variable\">$USERNAME</span>.crt\n\n<span class=\"token comment\"># create conf file, TODO: retrieve kubernetes api endpoint, retrieve CA bundle</span>\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf config set-cluster <span class=\"token builtin class-name\">local</span> --insecure-skip-tls-verify<span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--server</span><span class=\"token operator\">=</span>https://kubernetes.docker.internal:6443\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf config set-credentials <span class=\"token variable\">$USERNAME</span> --client-certificate<span class=\"token operator\">=</span><span class=\"token variable\">$USERNAME</span>.crt --client-key<span class=\"token operator\">=</span><span class=\"token variable\">$USERNAME</span>.pem --embed-certs<span class=\"token operator\">=</span>true\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf config set-context default <span class=\"token parameter variable\">--cluster</span><span class=\"token operator\">=</span>local <span class=\"token parameter variable\">--user</span><span class=\"token operator\">=</span><span class=\"token variable\">$USERNAME</span>\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf config use-context default\n\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf config view\n\n<span class=\"token comment\"># cleanup, we do not need csr anymore, temporary files were embeded into config</span>\nkubectl delete csr <span class=\"token variable\">$USERNAME</span>\n<span class=\"token function\">rm</span> <span class=\"token variable\">$USERNAME</span>.pem <span class=\"token variable\">$USERNAME</span>.crt <span class=\"token variable\">$USERNAME</span>.csr\n\n<span class=\"token comment\"># check that we can talk to kubernetes but do not have privileges it should complain with error: User \"demo\" cannot list resource \"namespaces\" in API group \"\" at the cluster scope</span>\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf get ns\n\n<span class=\"token comment\"># grant cluster admin cluster role to user</span>\nkubectl create clusterrolebinding <span class=\"token variable\">$USERNAME</span> <span class=\"token parameter variable\">--clusterrole</span><span class=\"token operator\">=</span>cluster-admin <span class=\"token parameter variable\">--user</span><span class=\"token operator\">=</span><span class=\"token variable\">$USERNAME</span>\n\n<span class=\"token comment\"># check</span>\nkubectl <span class=\"token parameter variable\">--kubeconfig</span> ./<span class=\"token variable\">$USERNAME</span>.conf get ns\n\n<span class=\"token comment\"># cleanup</span>\n<span class=\"token function\">rm</span> <span class=\"token variable\">$USERNAME</span>.conf\nkubectl delete clusterrolebinding <span class=\"token variable\">$USERNAME</span></code></pre></div></p>\n<p>With that in place we may send config to end user so he may use it to talk to Kubernetes cluster</p>\n<p>Also we may want to use <code class=\"language-text\">expirationSeconds</code> to restrict how long certificate will be valid for</p>\n<p>When we are creating config file we asking kubectl to embed files, so in config:</p>\n<ul>\n<li><code class=\"language-text\">client-key-data</code> - base64 encoded contents of our private rsa key file</li>\n<li><code class=\"language-text\">client-certificate-data</code> - base64 encoded contents of signed certificate we have retrieved from Kubernetes</li>\n</ul>\n<p>Note that there is no way to revoke, signed certificate will be valid forever, but we always may remove cluster role binding like in very last cleanup command, so user may still talk to Kubernetes but has no privileges to do anything</p>\n<p>Also note that having private key we may create and sign as many certificates as we want and because role binding does not care all of them will work</p>"}},"pageContext":{"id":"f2e961a3-0489-5f4a-836e-afb4804b0cd2"}},"staticQueryHashes":[],"slicesMap":{}}