{"componentChunkName":"component---src-templates-note-js","path":"/azure-storage-tables-mass-cleanup/","result":{"data":{"remark":{"fields":{"path":"azure-storage-tables-mass-cleanup"},"meta":{"title":""},"headings":[{"value":"Azure Storage Tables mass cleanup unwanted records"}],"html":"<h1>Azure Storage Tables mass cleanup unwanted records</h1>\n<p>Here is an use case - we have an pretty big table with bunch of unwanted records that we want to remove</p>\n<p>The goal is to remove records older than X months</p>\n<p>Doing thins one by one will be incredibly slow</p>\n<p>But Azure Storage is designed in a way to handle bazillion of requests</p>\n<p>So instead let's parallelize everything</p>\n<p>Here is an conceptual flow</p>\n<p><strong>readers</strong></p>\n<p>First of all we may retriever records like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">client<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TableEntity<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ParititonKey ge '0' and ParittionKey lt '1'\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>which will receive only records where partition key starts from \"0\"</p>\n<p>with this in place we may do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entities <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>TableEntity<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"ParititonKey ge '0' and ParittionKey lt '2'\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ParititonKey ge '2' and ParittionKey lt '4'\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ParititonKey ge '4' and ParittionKey lt '6'\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ParititonKey ge '8'\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nTask<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> filters<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>filter <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entity <span class=\"token keyword\">in</span> client<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TableEntity<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    entities<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>as you can gues we are going to create four connections and read data in parallel, here you will notice slownes of your wifi faster than azure storage which will handle this easily</p>\n<p><strong>grouper</strong></p>\n<p>Even so responses have records sorted by partition key we still need to group them into batches by 100 items for further deletion</p>\n<p>so our readers will push records to blocking collection and we will have dedicated task to process this collection, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> partitions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">&lt;</span>TableEntity<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entity <span class=\"token keyword\">in</span> entities<span class=\"token punctuation\">.</span><span class=\"token function\">GetConsumingEnumerable</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">==</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            prev <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        partitions<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">,</span>\n            key <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>partitions<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Count <span class=\"token operator\">>=</span> <span class=\"token number\">100</span> <span class=\"token operator\">||</span> entity<span class=\"token punctuation\">.</span>PartitionKey <span class=\"token operator\">!=</span> prev<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>partitions<span class=\"token punctuation\">.</span><span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                batches<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prev <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> batch <span class=\"token keyword\">in</span> partitions<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        batches<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    batches<span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>remover</strong></p>\n<p>and finally we have our blocking collection with prepared batches for deletion which may be as easy as</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Parallel<span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Partitioner<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>batches<span class=\"token punctuation\">.</span><span class=\"token function\">GetConsumingEnumerable</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> EnumerablePartitionerOptions<span class=\"token punctuation\">.</span>NoBuffering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ParallelOptions</span> <span class=\"token punctuation\">{</span> MaxDegreeOfParallelism <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span>ProcessorCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> batch <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">SubmitTransactionAsync</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>entity <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TableTransactionAction</span><span class=\"token punctuation\">(</span>TableTransactionActionType<span class=\"token punctuation\">.</span>Delete<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>printer</strong></p>\n<p>just for fun we may want to collect some counters of how we are doing and print them in dedicated thread, in my case output is something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token property\">elapsed:</span>       <span class=\"token time number\">00:00:49</span>\n<span class=\"token property\">rps:</span>              <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">281</span>\n<span class=\"token property\">consumed:</span>       <span class=\"token number\">161</span><span class=\"token punctuation\">,</span><span class=\"token number\">000</span>\n<span class=\"token property\">skipped:</span>        <span class=\"token number\">160</span><span class=\"token punctuation\">,</span><span class=\"token number\">696</span>\n<span class=\"token property\">pushed:</span>             <span class=\"token number\">304</span>\n<span class=\"token property\">partitions:</span>          <span class=\"token number\">58</span>\n<span class=\"token property\">batched:</span>            <span class=\"token number\">188</span>\n<span class=\"token property\">deleted:</span>            <span class=\"token number\">188</span>\n<span class=\"token property\">failures:</span>             <span class=\"token number\">0</span>\n<span class=\"token property\">memory:</span>             <span class=\"token number\">110</span></code></pre></div>\n<p>With all this in place whole table was processed in hour or two, average consumtion speed was approx ~10K documents per seconds, in a minute this scrip did deleted almost ~100K docs</p>\n<p>The interesting fact - replacing table entity with dedicated class tripples memory usage</p>\n<p>Whenever we need to cleanup something big our goal is just to run it somewhere with ethernet connection, as close as possible to the storage and play with number of filters</p>\n<p>From a runner perspective - cpu and disk are not a problem, the network utilization may become a bottleneck, but still you may run multiple such scripts in different places</p>\n<p>Here is what I have end up with</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Concurrent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Azure</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Azure<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>Tables</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dotnet add package Azure.Data.Tables</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TableClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://my-awesome-app.table.core.windows.net/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sample\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TableSharedKeyCredential</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-awesome-app\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxxxxxxxxxxxxxxxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> consumed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> skipped <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pushed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> batched <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> deleted <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> partitions <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> failures <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entities <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>Sample<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> batches <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">BlockingCollection<span class=\"token punctuation\">&lt;</span>IList<span class=\"token punctuation\">&lt;</span>Sample<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"PartitionKey ge '0' and PartitionKey lt '5'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"PartitionKey ge '5'\"</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// \"PartitionKey ge '0' and PartitionKey lt '1' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '1' and PartitionKey lt '2' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '2' and PartitionKey lt '3' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '3' and PartitionKey lt '4' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '4' and PartitionKey lt '5' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '5' and PartitionKey lt '6' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '6' and PartitionKey lt '7' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '7' and PartitionKey lt '8' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '8' and PartitionKey lt '9' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '9' and Timestamp lt datetime'2023-09-01T00:00:00.0000000Z'\",</span>\n\n    <span class=\"token comment\">// \"PartitionKey ge '0' and PartitionKey lt '1'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '1' and PartitionKey lt '2'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '2' and PartitionKey lt '3'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '3' and PartitionKey lt '4'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '4' and PartitionKey lt '5'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '5' and PartitionKey lt '6'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '6' and PartitionKey lt '7'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '7' and PartitionKey lt '8'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '8' and PartitionKey lt '9'\",</span>\n    <span class=\"token comment\">// \"PartitionKey ge '9'\",</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span>CancelKeyPress <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    token<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exiting...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Environment<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> readers <span class=\"token operator\">=</span> filters<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>filter <span class=\"token operator\">=></span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entity <span class=\"token keyword\">in</span> client<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Sample<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"PartitionKey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RowKey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timestamp\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> consumed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>Timestamp <span class=\"token operator\">>=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">AddMonths</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> skipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> pushed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        entities<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> grouper <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dict <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">&lt;</span>Sample<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entity <span class=\"token keyword\">in</span> entities<span class=\"token punctuation\">.</span><span class=\"token function\">GetConsumingEnumerable</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev <span class=\"token operator\">==</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            prev <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        dict<span class=\"token punctuation\">.</span><span class=\"token function\">AddOrUpdate</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">,</span>\n            key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> partitions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Count <span class=\"token operator\">>=</span> <span class=\"token number\">100</span> <span class=\"token operator\">||</span> entity<span class=\"token punctuation\">.</span>PartitionKey <span class=\"token operator\">!=</span> prev<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">TryRemove</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                batches<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prev <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>PartitionKey<span class=\"token punctuation\">;</span>\n                Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> batched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> partitions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> batch <span class=\"token keyword\">in</span> dict<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        batches<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> batched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Decrement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> partitions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    batches<span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> remover <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Parallel<span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Partitioner<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>batches<span class=\"token punctuation\">.</span><span class=\"token function\">GetConsumingEnumerable</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> EnumerablePartitionerOptions<span class=\"token punctuation\">.</span>NoBuffering<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ParallelOptions</span> <span class=\"token punctuation\">{</span> MaxDegreeOfParallelism <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span>ProcessorCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> batch <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">SubmitTransactionAsync</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>entity <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TableTransactionAction</span><span class=\"token punctuation\">(</span>TableTransactionActionType<span class=\"token punctuation\">.</span>Delete<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAwait</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> deleted<span class=\"token punctuation\">,</span> batch<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Interlocked<span class=\"token punctuation\">.</span><span class=\"token function\">Increment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> failures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> printer <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">.</span>IsCancellationRequested <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>batches<span class=\"token punctuation\">.</span>IsCompleted<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> b <span class=\"token operator\">=</span> batches<span class=\"token punctuation\">.</span>IsCompleted <span class=\"token punctuation\">?</span> <span class=\"token string\">\"done\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"running\"</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">SetCursorPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'elapsed:       'hh':'mm':'ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"rps:         </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">consumed <span class=\"token operator\">/</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">.</span>TotalSeconds<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"consumed:    </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">consumed<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"skipped:     </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">skipped<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"pushed:      </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">pushed<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"partitions:  </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">partitions<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"batched:     </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">batched<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"deleted:     </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">deleted<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"failures:    </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">failures<span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"memory:      </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">Process<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>WorkingSet64 <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span></span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>N0</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"batches: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">b</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">WhenAll</span><span class=\"token punctuation\">(</span>readers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nentities<span class=\"token punctuation\">.</span><span class=\"token function\">CompleteAdding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> grouper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> remover<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> printer<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ITableEntity</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PartitionKey <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> RowKey <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTimeOffset<span class=\"token punctuation\">?</span></span> Timestamp <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ETag</span> ETag <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Ideally bunch of code may be removed with help of custom partitioner or may be RX or even better some linq, but it was not the goal</p>"}},"pageContext":{"id":"0d8d7638-653d-5aea-949e-e706e366057d"}},"staticQueryHashes":[],"slicesMap":{}}