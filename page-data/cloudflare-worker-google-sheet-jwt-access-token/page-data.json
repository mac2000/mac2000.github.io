{"componentChunkName":"component---src-templates-note-js","path":"/cloudflare-worker-google-sheet-jwt-access-token/","result":{"data":{"remark":{"fields":{"path":"cloudflare-worker-google-sheet-jwt-access-token"},"meta":{"title":""},"headings":[{"value":"Cloudflare Worker talk to Google Sheets"}],"html":"<h1>Cloudflare Worker talk to Google Sheets</h1>\n<p>I have credentials json for Google Cloud service account</p>\n<p>This service account is allowed to read google sheet</p>\n<p>To do so, we first need form and sign jwt token with private key of our service account</p>\n<p>Then exchange this jwt for access token</p>\n<p>And then we can talk to Google Sheet</p>\n<p>Here is an example of how it may look like from bash script</p>\n<p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># path to our credentials file</span>\n<span class=\"token assign-left variable\">PRIVATE_KEY_FILE_PATH</span><span class=\"token operator\">=~</span>/Downloads/credentials.json\n<span class=\"token comment\"># actually we need only email and private key from it</span>\n<span class=\"token assign-left variable\">CLIENT_EMAIL</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> $PRIVATE_KEY_FILE_PATH <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> <span class=\"token string\">\".client_email\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">PRIVATE_KEY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> $PRIVATE_KEY_FILE_PATH <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> .private_key<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># now we need to form an jwt token and sign it with our private key</span>\n<span class=\"token assign-left variable\">HEADER</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'{\"alg\":\"RS256\",\"typ\":\"JWT\"}'</span> <span class=\"token operator\">|</span> base64 <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token string\">'/+'</span> <span class=\"token string\">'_-'</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'='</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">PAYLOAD</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> \"<span class=\"token punctuation\">{</span><span class=\"token punctuation\">\\</span>\"aud<span class=\"token punctuation\">\\</span>\":<span class=\"token punctuation\">\\</span>\"https://www.googleapis.com/oauth2/v4/token<span class=\"token punctuation\">\\</span>\",<span class=\"token punctuation\">\\</span>\"exp<span class=\"token punctuation\">\\</span>\":<span class=\"token punctuation\">$((</span><span class=\"token punctuation\">$(</span>date +%s<span class=\"token punctuation\">)</span> + <span class=\"token number\">3600</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">\\</span>\"iat<span class=\"token punctuation\">\\</span>\":<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%s<span class=\"token variable\">)</span></span>,<span class=\"token punctuation\">\\</span>\"iss<span class=\"token punctuation\">\\</span>\":<span class=\"token punctuation\">\\</span>\"<span class=\"token variable\">$CLIENT_EMAIL</span><span class=\"token punctuation\">\\</span>\",<span class=\"token punctuation\">\\</span>\"scope<span class=\"token punctuation\">\\</span>\":<span class=\"token punctuation\">\\</span>\"https://www.googleapis.com/auth/spreadsheets<span class=\"token punctuation\">\\</span>\"<span class=\"token punctuation\">}</span><span class=\"token string\">\" | base64 | tr '/+' '_-' | tr -d '=')\nSIGNATURE=$(openssl dgst -sha256 -sign &lt;(echo \"<span class=\"token variable\">$PRIVATE_KEY</span>\") &lt;(printf \"</span><span class=\"token variable\">$HEADER</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$PAYLOAD</span><span class=\"token string\">\") | base64 | tr '/+' '_-' | tr -d '=')\nJWT=\"</span><span class=\"token variable\">$HEADER</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$PAYLOAD</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">$SIGNATURE</span><span class=\"token string\">\"\n\n# then we can exchange it to access token\nACCESS_TOKEN=<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"https://www.googleapis.com/oauth2/v4/token\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"grant_type\":\"urn:ietf:params:oauth:grant-type:jwt-bearer\",\"assertion\":\"'</span>\"$JWT<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">|</span> jq <span class=\"token parameter variable\">-r</span> .access_token<span class=\"token variable\">)</span></span>\n\n# and finally we can fetch data from Google Sheets using the access token\nSPREADSHEET_ID=\"</span>1Eac00000-00000000000000000000000000-0-0Qu9s<span class=\"token string\">\"\nRANGE='Sheet1!A:B'\ncurl -s -H \"</span>Authorization: Bearer <span class=\"token variable\">$ACCESS_TOKEN</span><span class=\"token string\">\" \"</span>https://sheets.googleapis.com/v4/spreadsheets/<span class=\"token variable\">$SPREADSHEET_ID</span>/values/<span class=\"token variable\">$RANGE</span>\" <span class=\"token operator\">|</span> jq <span class=\"token builtin class-name\">.</span></code></pre></div></p>\n<p>Starting point was found in this <a href=\"https://gist.github.com/srusskih/6a1cb7a90ec33bb75139e0d866455b70\">gist</a></p>\n<p>Now, we can try do the same in nodejs</p>\n<p><div class=\"gatsby-highlight\" data-language=\"mjs\"><pre class=\"language-mjs\"><code class=\"language-mjs\">import crypto from &#39;crypto&#39;\nimport fs from &#39;fs&#39;\n\n// actually we need only client email and private key fields from credentials.json\nconst { client_email, private_key } = JSON.parse(fs.readFileSync(&#39;/Users/mac/Downloads/credentials.json&#39;, &#39;utf8&#39;))\n\n// form our jwt token\nvar header = Buffer.from(JSON.stringify({ typ: &#39;JWT&#39;, alg: &#39;RS256&#39; })).toString(&#39;base64url&#39;)\nvar payload = Buffer.from(\n  JSON.stringify({\n    aud: &#39;https://www.googleapis.com/oauth2/v4/token&#39;,\n    iat: Math.floor(Date.now() / 1000) - 10,\n    exp: Math.floor(Date.now() / 1000) + 600,\n    iss: client_email,\n    scope: &#39;https://www.googleapis.com/auth/spreadsheets&#39;,\n  })\n).toString(&#39;base64url&#39;)\n// sign it with our private key\nconst signature = crypto.createSign(&#39;RSA-SHA256&#39;).update(`${header}.${payload}`).sign(private_key, &#39;base64url&#39;)\nvar jwt = `${header}.${payload}.${signature}`\n// console.log(&#39;jwt:&#39;, jwt)\n\n// exchange it for access token\nvar { access_token } = await fetch(`https://www.googleapis.com/oauth2/v4/token`, {\n  method: &#39;POST&#39;,\n  headers: {\n    &#39;content-type&#39;: &#39;application/json&#39;,\n  },\n  body: JSON.stringify({\n    grant_type: &#39;urn:ietf:params:oauth:grant-type:jwt-bearer&#39;,\n    assertion: jwt,\n  }),\n}).then(r =&gt; r.json())\n// console.log(&#39;access_token:&#39;, access_token)\n\n// get google sheet data\nconst spreadsheetId = &#39;1Eac00000-00000000000000000000000000-0-0Qu9s&#39;\nconst range = &#39;Sheet1!A:B&#39;\nconst { values } = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}`, {\n  headers: { authorization: `Bearer ${access_token}` },\n}).then(res =&gt; res.json())\nconsole.log(values)</code></pre></div></p>\n<p>Taken from previous notes about <a href=\"/github-app-jwt/\">authenticating github app</a></p>\n<p>Everything simple so far, implementation is always the same and pretty straight forward, but the cloudflare works runtime is different it is more like browser rather than nodejs, but still doable</p>\n<p><div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/**\n * Converts input string or ArrayBuffer to base64url encoded string\n * @param {string | ArrayBuffer} input\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> uint8Array <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>uint8Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">=</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Converts input string to ArrayBuffer\n * @param {string} str\n * @returns {ArrayBuffer}\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">str2ab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> bufView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bufView<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> buf\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// data from credentials.json that we need to sign jwt token</span>\n<span class=\"token keyword\">const</span> client_email <span class=\"token operator\">=</span> <span class=\"token string\">'your_service_account_email@your_project.iam.gserviceaccount.com'</span>\n<span class=\"token keyword\">const</span> private_key <span class=\"token operator\">=</span> <span class=\"token string\">'-----BEGIN PRIVATE KEY-----\\n\\n-----END PRIVATE KEY-----\\n'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// import our private key</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'pkcs8'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">str2ab</span><span class=\"token punctuation\">(</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>private_key<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----BEGIN PRIVATE KEY-----'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----END PRIVATE KEY-----'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'RSASSA-PKCS1-v1_5'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">'SHA-256'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">'sign'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// form jwt token</span>\n    <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> <span class=\"token function\">b64</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">typ</span><span class=\"token operator\">:</span> <span class=\"token string\">'JWT'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">alg</span><span class=\"token operator\">:</span> <span class=\"token string\">'RS256'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token function\">b64</span><span class=\"token punctuation\">(</span>\n      <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">aud</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://www.googleapis.com/oauth2/v4/token'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">iat</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">exp</span><span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">iss</span><span class=\"token operator\">:</span> client_email<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">scope</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://www.googleapis.com/auth/spreadsheets'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// sign it with private key</span>\n    <span class=\"token keyword\">const</span> signature <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RSASSA-PKCS1-v1_5'</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>header<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>payload<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>header<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>payload<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">b64</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n    <span class=\"token comment\">// exchange jwt for access token</span>\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> access_token <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://www.googleapis.com/oauth2/v4/token</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">grant_type</span><span class=\"token operator\">:</span> <span class=\"token string\">'urn:ietf:params:oauth:grant-type:jwt-bearer'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">assertion</span><span class=\"token operator\">:</span> jwt<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// console.log('access_token:', access_token)</span>\n    <span class=\"token comment\">// return new Response(access_token)</span>\n\n    <span class=\"token comment\">// get google sheet data</span>\n    <span class=\"token keyword\">const</span> spreadsheetId <span class=\"token operator\">=</span> <span class=\"token string\">'1Eac00000-00000000000000000000000000-0-0Qu9s'</span>\n    <span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> <span class=\"token string\">'Sheet1!A:B'</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> values <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://sheets.googleapis.com/v4/spreadsheets/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>spreadsheetId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/values/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>range<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">authorization</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>access_token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>There is an typescript <a href=\"https://github.com/tsndr/cloudflare-worker-jwt\">library</a> doing that in case of need something more complex</p>\n<p>But in my case it is good enough to not depend even on it</p>\n<p>With that we may have small cloudflare worker that will allow us to retrieve google sheets data as an rest endpoint, but for this to work from browser we need add few more things like cors, but this one is not a problem at all</p>\n<p>Alternative, and probably much simpler approach would be to host such function right in Google Cloud - there it will run under service account of othe box and token retrive is automated behind the sceene with client library, aka</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> functions <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@google-cloud/functions-framework'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> google <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'googleapis'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> spreadsheetId <span class=\"token operator\">=</span> <span class=\"token string\">'1Eac00000-00000000000000000000000000-0-0Qu9s'</span>\n<span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> <span class=\"token string\">'Sheet1!A:B'</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getGoogleClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>GoogleAuth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">scopes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'https://www.googleapis.com/auth/spreadsheets'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> google<span class=\"token punctuation\">.</span><span class=\"token function\">sheets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">'v4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">auth</span><span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">getClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfunctions<span class=\"token punctuation\">.</span><span class=\"token function\">http</span><span class=\"token punctuation\">(</span><span class=\"token string\">'handler'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getGoogleClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>spreadsheets<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> spreadsheetId<span class=\"token punctuation\">,</span> range <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But with this examples it is possible to retrieve such data from anywhere</p>\n<p>For an example of how to do it via powershell, check out <a href=\"/github-app-jwt/\">github app</a> example</p>"}},"pageContext":{"id":"1568e5c2-eb7e-5494-a675-9500862c6e33"}},"staticQueryHashes":[],"slicesMap":{}}