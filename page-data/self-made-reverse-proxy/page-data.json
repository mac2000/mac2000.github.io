{"componentChunkName":"component---src-templates-note-js","path":"/self-made-reverse-proxy","result":{"data":{"remark":{"fields":{"path":"self-made-reverse-proxy"},"meta":{"title":""},"headings":[{"value":"Self made reverse proxies"}],"html":"<h1>Self made reverse proxies</h1>\n<p>Do not remember why and for what but from backup have two samples of simple reverse proxies</p>\n<p>In both cases it will be a nano reverse proxy which will proxy requests to <code class=\"language-text\">X-Forwarded-Host</code> and add <code class=\"language-text\">Accept-Language</code> header</p>\n<h2>dotnet reverse proxy</h2>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{*path}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpRequest</span> httpRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpResponse</span> httpResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpRequestMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpRequestMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// request: method</span>\n    httpRequestMessage<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HttpMethod</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// request: url, note: for path and query use something like: `httpRequest.GetEncodedPathAndQuery()` instead of `path`</span>\n    httpRequestMessage<span class=\"token punctuation\">.</span>RequestUri <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">httpRequest<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"X-Forwarded-Proto\"</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">httpRequest<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"X-Forwarded-Host\"</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">path</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// request: body</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>HttpMethods<span class=\"token punctuation\">.</span><span class=\"token function\">IsPost</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        httpRequestMessage<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamContent</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// request: headers</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> httpRequest<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>httpRequestMessage<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">TryAddWithoutValidation</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> httpRequestMessage<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            httpRequestMessage<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">?.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">TryAddWithoutValidation</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    httpRequestMessage<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>Host <span class=\"token operator\">=</span> httpRequest<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"X-Forwarded-Host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// request: override</span>\n    httpRequestMessage<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">TryAddWithoutValidation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpResponseMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">SendAsync</span><span class=\"token punctuation\">(</span>httpRequestMessage<span class=\"token punctuation\">,</span> HttpCompletionOption<span class=\"token punctuation\">.</span>ResponseHeadersRead<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// response: status</span>\n    httpResponse<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>httpResponseMessage<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// response: headers</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> httpResponseMessage<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        httpResponse<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> header <span class=\"token keyword\">in</span> httpResponseMessage<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        httpResponse<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    httpResponse<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transfer-encoding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SendAsync removes chunking from the response. This removes the header so it doesn't expect a chunked response.</span>\n    <span class=\"token comment\">// response: body</span>\n    <span class=\"token keyword\">await</span> httpResponseMessage<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span><span class=\"token function\">CopyToAsync</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></p>\n<p>usage example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"X-Forwarded-Proto: https\"</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"X-Forwarded-Host: gateway.mac-blog.org.ua\"</span> http://localhost:5000/graphql <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"query\": \"{ city(id:1) { name }}\"}'</span></code></pre></div>\n<p>Links:</p>\n<ul>\n<li><a href=\"https://auth0.com/blog/building-a-reverse-proxy-in-dot-net-core/\">Building a Reverse Proxy in .NET Core</a></li>\n<li><a href=\"https://anduin.aiursoft.cn/post/2020/6/12/creating-a-proxy-to-another-url-with-aspnet-core\">Creating a proxy to another URL with ASP.NET Core</a></li>\n</ul>\n<h2>golang reverse proxy</h2>\n<p>The fun fact the same can be acomplished in go lang literally in few lines of code</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"net/http/httputil\"</span>\n\t<span class=\"token string\">\"net/url\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tproxy <span class=\"token operator\">:=</span> httputil<span class=\"token punctuation\">.</span><span class=\"token function\">NewSingleHostReverseProxy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\toriginalDirector <span class=\"token operator\">:=</span> proxy<span class=\"token punctuation\">.</span>Director\n\tproxy<span class=\"token punctuation\">.</span>Director <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">originalDirector</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n\t\treq<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Host <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-Host\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"apply-api.rabota.ua\"</span>\n\t\treq<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-Proto\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"https\"</span>\n\t\treq<span class=\"token punctuation\">.</span>Host <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-Host\"</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// \"apply-api.rabota.ua\"</span>\n\t\treq<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">)</span>              <span class=\"token comment\">// overriding header</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>usage example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"X-Forwarded-Proto: https\"</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"X-Forwarded-Host: gateway.mac-blog.org.ua\"</span> http://localhost:8080/graphql <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"query\": \"{ city(id:1) { name }}\"}'</span></code></pre></div>\n<p>Links:</p>\n<ul>\n<li><a href=\"https://gist.github.com/aicam/81b9c3f37dc812c323c41287d1bbad20\">HttpProxy.go</a></li>\n<li><a href=\"https://gist.github.com/mpfund/b0d06b476a23cc732e61\">simple_proxy.go</a></li>\n<li><a href=\"https://blog.joshsoftware.com/2021/05/25/simple-and-powerful-reverseproxy-in-go/\">The Right Use of ReverseProxy in Golang</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=tWSmUsYLiE4\">FOSDEM 2019: How to write a reverse proxy with Go in 25 minutes</a></li>\n</ul>\n<p>Espacially I did liked that one:</p>\n<p><a href=\"https://www.youtube.com/watch?v=tWSmUsYLiE4\">https://www.youtube.com/watch?v=tWSmUsYLiE4</a></p>"}},"pageContext":{"id":"5a12067c-680e-5d73-9ebe-3f02bf474a0b"}},"staticQueryHashes":[]}