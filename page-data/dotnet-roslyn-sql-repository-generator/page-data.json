{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-roslyn-sql-repository-generator","result":{"data":{"remark":{"fields":{"path":"dotnet-roslyn-sql-repository-generator"},"meta":{"title":""},"headings":[{"value":"dotnet roslyn sql repository genertor"},{"value":"sp_describe_first_result_set"},{"value":"sp_describe_undeclared_parameters"},{"value":"roslyn"},{"value":"How it Works"},{"value":"Workflow"},{"value":"Further ideas"}],"html":"<h1>dotnet roslyn sql repository genertor</h1>\n<p><strong>Problem:</strong> pieces of code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Whatever</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">></span></span> <span class=\"token function\">FindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> <span class=\"token string\">@\"\nSELECT\n    Foo,\n    Bar\nFROM Acme\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>are ugly (ok, we have tripple quotes syntax)</p>\n<p>are error prone:</p>\n<ul>\n<li>no syntax higlight</li>\n<li>no validation</li>\n<li>can forget to modify corresponding response records</li>\n<li>and so on</li>\n</ul>\n<p>previously with help of source generators we managed to at least generate constants class automatically from sql files in project, e.g. in project you have <code class=\"language-text\">GetTopCities.sql</code> and as a result of source generation, suddenly you have something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sql</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> GetTopCities <span class=\"token operator\">=</span> <span class=\"token string\">\"...contents of GetTopCities.sql...\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>so your code becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Whatever</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">></span></span> <span class=\"token function\">FindAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> Sql<span class=\"token punctuation\">.</span>GetTopCities<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>which is not only more readable but as well, because of dedicated sql files your ide will help you with syntax highlighting and validation.</p>\n<p>But there is even more!</p>\n<p>In modern SQL Server there are two amazing stored procedures:</p>\n<ul>\n<li><code class=\"language-text\">sp_describe_first_result_set</code> - returns the shape (schema) of query without running it</li>\n<li><code class=\"language-text\">sp_describe_undeclared_parameters</code> - returns the shape (schema) of query parameters</li>\n</ul>\n<h1>sp_describe_first_result_set</h1>\n<p>here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">exec</span> sp_describe_first_result_set <span class=\"token variable\">@tsql</span><span class=\"token operator\">=</span><span class=\"token string\">\"SELECT TOP 3 Id, Name FROM City WITH(NOLOCK)\"</span></code></pre></div>\n<p>we are interested in name, system type name and is nullable columns, which in this example will be:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>system type name</th>\n<th>is nullable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td>smallint</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>varchar(255)</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>having that in place we technically may produce record like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">GetTopCitiesResponse</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">short</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>sp_describe_undeclared_parameters</h1>\n<p>same way as with response it does allow us to get data for request, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">exec</span> sp_describe_undeclared_parameters <span class=\"token variable\">@tsql</span><span class=\"token operator\">=</span><span class=\"token string\">\"SELECT Id, Name FROM City WITH(NOLOCK) WHERE Id = @Id\"</span></code></pre></div>\n<p>but now we are interested in name and suggested system type name</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>suggested system type name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Id</td>\n<td>smallint</td>\n</tr>\n</tbody>\n</table>\n<p>which once again allow us to generate record like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">FindCityByIdRequest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">short</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, so from now on we may not only generate constants but models for request and response as well, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> DbConnectionExtensions\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumarable<span class=\"token punctuation\">&lt;</span>FindCityByIdResponse<span class=\"token punctuation\">></span></span> <span class=\"token function\">FindCityById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IDbConnection</span> con<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FindCityByIdRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> con<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FindCityByIdResponse<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span>FindCityById<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The benefits here are:</p>\n<ul>\n<li>now sql files are the single source of truth</li>\n<li>if query is incorrect - stored procedures will fail and we will know upfront (aka imagine if you have typo in column name)</li>\n<li>we never ever will forget to modify corresponding records if query changed</li>\n<li>we may generate as much complex code with boilerplate as we want (aka add logging, telemetry, ...)</li>\n</ul>\n<h1>roslyn</h1>\n<p>To generate code we will use Roslyn</p>\n<p>At the minimum it is as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">FluentAssertions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>CodeAnalysis</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>CodeAnalysis<span class=\"token punctuation\">.</span>CSharp</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>CodeAnalysis<span class=\"token punctuation\">.</span>CSharp<span class=\"token punctuation\">.</span>Syntax</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository<span class=\"token punctuation\">.</span>Tests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RoslynGettingStartedExamples</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">EmptyExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        code<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">NamespaceExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ns <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">NamespaceDeclaration</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ParseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        code<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FileScopedNamespaceExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ns <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FileScopedNamespaceDeclaration</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ParseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        code<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository</span><span class=\"token punctuation\">;</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ClassExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ns <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FileScopedNamespaceDeclaration</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ParseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cls <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ClassDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddModifiers</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>PublicKeyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ns <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        code<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PublicStringConstantExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ns <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FileScopedNamespaceDeclaration</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ParseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cls <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ClassDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddModifiers</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>PublicKeyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cls <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FieldDeclaration</span><span class=\"token punctuation\">(</span>\n                SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span>\n                        SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">PredefinedType</span><span class=\"token punctuation\">(</span>\n                            SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>StringKeyword<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithVariables</span><span class=\"token punctuation\">(</span>\n                        SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">SingletonSeparatedList</span><span class=\"token punctuation\">(</span>\n                            SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">VariableDeclarator</span><span class=\"token punctuation\">(</span>\n                                    SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">WithInitializer</span><span class=\"token punctuation\">(</span>\n                                    SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">EqualsValueClause</span><span class=\"token punctuation\">(</span>\n                                        SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">LiteralExpression</span><span class=\"token punctuation\">(</span>\n                                            SyntaxKind<span class=\"token punctuation\">.</span>StringLiteralExpression<span class=\"token punctuation\">,</span>\n                                            SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>\n                                        <span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithModifiers</span><span class=\"token punctuation\">(</span>\n                SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">TokenList</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>PublicKeyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>ConstKeyword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ns <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        code<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Hello <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ParseExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"record Demo {{ public string Name {{ get; init; }} = default!; }}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> inner <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">RecordDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> prop <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">PropertyDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ns <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FileScopedNamespaceDeclaration</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ParseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cls <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ClassDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddModifiers</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>PublicKeyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cls <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ns <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory\n            <span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        code<span class=\"token punctuation\">.</span><span class=\"token function\">Should</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Be</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span>\"\n        <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is an online resource: <a href=\"https://roslynquoter.azurewebsites.net/\">https://roslynquoter.azurewebsites.net/</a></p>\n<p>Which may be used to quickly convert source code to its roslyn syntax declaration presentation.</p>\n<p>For me the best usage was after enabling \"Do not require 'using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;'\" and \"Closing parenthesis on a new line\" checkboxes.</p>\n<h1>How it Works</h1>\n<p>Idea here is that we have dedicated repository project, containing sql files and single generated c# file with all wanted models, interfaces, etc</p>\n<p>So for example if we will have single <code class=\"language-text\">GetTopCities.sql</code> with query <code class=\"language-text\">SELECT TOP 5 Id, Name FROM City</code> generated code will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//------------------------------------------------------------------------------</span>\n<span class=\"token comment\">// &lt;auto-generated></span>\n<span class=\"token comment\">//     This code was generated by a tool.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//     Changes to this file may cause incorrect behavior and will be lost if</span>\n<span class=\"token comment\">//     the code is regenerated.</span>\n<span class=\"token comment\">// &lt;/auto-generated></span>\n<span class=\"token comment\">//------------------------------------------------------------------------------</span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">nullable</span> enable</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CodeDom<span class=\"token punctuation\">.</span>Compiler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Logging<span class=\"token punctuation\">.</span>Abstractions</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Logging</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>DependencyInjection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>SqlClient</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Dapper</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">GetTopCitiesResponse</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">short</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Constants</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> GetTopCities <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT \\n    TOP 10 \\n    Id, \\n    Name\\nFROM City WITH (NOLOCK)\\nORDER BY Id ASC\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRepository</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>GetTopCitiesResponse<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetTopCitiesAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IRepository</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ActivitySource</span> ActivitySource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Repository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _connection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Repository</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">?</span></span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _connection <span class=\"token operator\">=</span> connection <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _logger <span class=\"token operator\">=</span> logger <span class=\"token operator\">??</span> NullLogger<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>GetTopCitiesResponse<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetTopCitiesAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> ActivitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span>GetTopCities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ActivityKind<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetTopCities\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GetTopCitiesResponse<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandDefinition</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span>GetTopCities<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceCollectionExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IServiceCollection</span> <span class=\"token function\">AddRepository</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connectionStringName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Repository</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConfiguration<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span>connectionStringName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which means that from our API we may consume it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Repository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddRepository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RabotaUA2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IRepository</span> repo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">GetTopCitiesAsync</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>this is just an example of what's possible</li>\n<li>by intent we are hiding all implementations and exposing only interfaces</li>\n<li>for example we are providing extensions to hide service registration as well</li>\n<li>for example we are adding some logging and telemetry boilerplate code</li>\n</ul>\n<h1>Workflow</h1>\n<p>Having such an setup if I add yet another <code class=\"language-text\">GetResumesByCityId.sql</code> file with query like:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n    <span class=\"token keyword\">TOP</span> <span class=\"token number\">10</span>\n    Id<span class=\"token punctuation\">,</span> Speciality\n<span class=\"token keyword\">FROM</span> Resume\n<span class=\"token keyword\">WHERE</span> CityId <span class=\"token operator\">=</span> <span class=\"token variable\">@CityId</span></code></pre></div>\n<p>Suddenly in generated code following will appear:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">GetResumesByCityIdResponse</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Speciality <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">GetResumesByCityIdRequest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">short</span></span> CityId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Constants</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> GetResumesByCityId <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT \\n    TOP 10\\n    Id, Speciality\\nFROM Resume\\nWHERE CityId = @CityId\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRepository</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>GetResumesByCityIdResponse<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetResumesByCityIdAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GetResumesByCityIdRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IRepository</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>GetResumesByCityIdResponse<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetResumesByCityIdAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GetResumesByCityIdRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> ActivitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span>GetResumesByCityId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ActivityKind<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetResumesByCityId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>GetResumesByCityIdResponse<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandDefinition</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span>GetResumesByCityId<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>And I can use it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FromServices</span></span><span class=\"token punctuation\">]</span><span class=\"token class-name\">IRepository</span> repo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> repo<span class=\"token punctuation\">.</span><span class=\"token function\">GetResumesByCityIdAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GetResumesByCityIdRequest</span> <span class=\"token punctuation\">{</span> CityId <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And because we have single source of truth imagine how it will look like if I will remove or rename some columns from response or modify input variables - after code generation, if query is still valid, project wont compile and point me to places which are broken by this changes</p>\n<p>Which is exactly desired behavior</p>\n<h1>Further ideas</h1>\n<h2>Source Code Generation</h2>\n<p>I was not able to run SQL queries in Source Generator, there is a bunch of issues and open tickets in GitHub so probably it is for future</p>\n<p>At moment it might be done as dedicated dotnet tool, build step or like in my case - simple test (I did it in that way only because it is so much easier to debug it)</p>\n<h2>Nested Namespaces</h2>\n<p>For a big project there will be bunch of SQL files and will be nice to group them in folders, aka put <code class=\"language-text\">GetTopCities.sql</code>, <code class=\"language-text\">FindCityById.sql</code> to <code class=\"language-text\">Cities</code> folder and do the same for vacancy related files.</p>\n<p>As a result to avoid collisions we gonna need to generate nested namespaces, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository<span class=\"token punctuation\">.</span>Cities</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// GetTopCities.sql</span>\n    <span class=\"token comment\">// FindCityById.sql</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository<span class=\"token punctuation\">.</span>Vacancies</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Source Code Generated Wrapper</h2>\n<p>Theoretically with such approach we may generate wrappers for classes</p>\n<p>Imagine you have some class like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClient</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Foo<span class=\"token punctuation\">></span></span> <span class=\"token function\">Method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Bar<span class=\"token punctuation\">></span></span> <span class=\"token function\">MethodN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It should be possible to create class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClientWrapped</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">SomeClient</span> _someClient<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>SomeClientWrapped<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">SomeClientWrapped</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SomeClient</span> someClient<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>SomeClientWrapped<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _someClient <span class=\"token operator\">=</span> someClient<span class=\"token punctuation\">;</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Foo<span class=\"token punctuation\">></span></span> <span class=\"token function\">Method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> _someClient<span class=\"token punctuation\">.</span><span class=\"token function\">Method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method1 done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Bar<span class=\"token punctuation\">></span></span> <span class=\"token function\">MethodN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// wrap with timer, logging, promtheus, retry, circuit braker, etc</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Imagine how much of boiler plate code might be removed</p>\n<h2>Generator</h2>\n<p>Here is what I have ended up with for now:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Json</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Dapper</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>CodeAnalysis</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>CodeAnalysis<span class=\"token punctuation\">.</span>CSharp</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>CodeAnalysis<span class=\"token punctuation\">.</span>CSharp<span class=\"token punctuation\">.</span>Syntax</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">.</span>SqlClient</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Repository<span class=\"token punctuation\">.</span>Tests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Generator</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        DefaultTypeMap<span class=\"token punctuation\">.</span>MatchNamesWithUnderscores <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ns <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FileScopedNamespaceDeclaration</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">ParseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> constants <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConstantsBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> inter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InterfaceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> impl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ImplementationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connectionString <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AppSettings<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../../../Api/appsettings.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>ConnectionStrings<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> files <span class=\"token operator\">=</span> Directory<span class=\"token punctuation\">.</span><span class=\"token function\">GetFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../../../Repository/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.sql\"</span><span class=\"token punctuation\">,</span> SearchOption<span class=\"token punctuation\">.</span>AllDirectories<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">.</span>GetFullPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> file <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> name <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetFileNameWithoutExtension</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllText</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parameters <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DescribeUndeclaredParameters<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp_describe_undeclared_parameters\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> tsql <span class=\"token operator\">=</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">commandType</span><span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> columns <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DescribeFirstResultSetResponse<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp_describe_first_result_set\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> tsql <span class=\"token operator\">=</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">commandType</span><span class=\"token punctuation\">:</span> CommandType<span class=\"token punctuation\">.</span>StoredProcedure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hasResponse <span class=\"token operator\">=</span> columns<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hasRequest <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            constants<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasResponse<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RecordBuilder</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Response\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> column <span class=\"token keyword\">in</span> columns<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span>column<span class=\"token punctuation\">.</span>SystemTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">.</span>IsNullable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                ns <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RecordBuilder</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Request\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parameter <span class=\"token keyword\">in</span> parameters<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    request<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span>SuggestedSystemTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                ns <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            inter<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> hasResponse<span class=\"token punctuation\">,</span> hasRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            impl<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> hasResponse<span class=\"token punctuation\">,</span> hasRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> code <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CompilationUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.CodeDom.Compiler\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.Extensions.Logging.Abstractions\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.Extensions.Logging\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.Extensions.DependencyInjection\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.Data.SqlClient\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.Extensions.Configuration\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.Diagnostics\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.Data\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dapper\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>constants<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>inter<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ServiceExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">NormalizeWhitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ToFullString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../../../Repository/Generated.cs\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">PrependWithAutoGeneratedComment</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ClassDeclarationSyntax</span> <span class=\"token function\">ServiceExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceCollectionExtensions</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IServiceCollection</span> <span class=\"token function\">AddRepository</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connectionStringName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Repository</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlConnection</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConfiguration<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span>connectionStringName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ClassDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> sqlType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sqlType<span class=\"token punctuation\">?.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">switch</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"smallint\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"short\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"int\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"varchar\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected type\"</span><span class=\"token punctuation\">,</span> sqlType<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">PrependWithAutoGeneratedComment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> code<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token string\">\"\"</span>\"\n        <span class=\"token comment\">//------------------------------------------------------------------------------</span>\n        <span class=\"token comment\">// &lt;auto-generated></span>\n        <span class=\"token comment\">//     This code was generated by a tool.</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">//     Changes to this file may cause incorrect behavior and will be lost if</span>\n        <span class=\"token comment\">//     the code is regenerated.</span>\n        <span class=\"token comment\">// &lt;/auto-generated></span>\n        <span class=\"token comment\">//------------------------------------------------------------------------------</span>\n\n        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">nullable</span> enable</span>\n\n        <span class=\"token string\">\"\"</span>\" <span class=\"token operator\">+</span> code<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfile <span class=\"token keyword\">record</span> <span class=\"token class-name\">AppSettings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> ConnectionStrings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfile <span class=\"token keyword\">record</span> <span class=\"token class-name\">DescribeUndeclaredParameters</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> SuggestedSystemTypeName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfile <span class=\"token keyword\">record</span> <span class=\"token class-name\">DescribeFirstResultSetResponse</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> SystemTypeName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsNullable <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\nfile <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SyntaxExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">CompilationUnitSyntax</span> <span class=\"token function\">WithUsing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">CompilationUnitSyntax</span> ns<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> assembly<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ns<span class=\"token punctuation\">.</span><span class=\"token function\">AddUsings</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateUsingDirective</span><span class=\"token punctuation\">(</span>assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">UsingDirectiveSyntax</span> <span class=\"token function\">CreateUsingDirective</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> usingName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NameSyntax<span class=\"token punctuation\">?</span></span> qualifiedName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identifier <span class=\"token keyword\">in</span> usingName<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> name <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">IdentifierName</span><span class=\"token punctuation\">(</span>identifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qualifiedName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                qualifiedName <span class=\"token operator\">=</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">QualifiedName</span><span class=\"token punctuation\">(</span>qualifiedName<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">{</span>\n                qualifiedName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">UsingDirective</span><span class=\"token punctuation\">(</span>qualifiedName <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>usingName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nfile <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecordBuilder</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RecordDeclarationSyntax</span> _declarationSyntax<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RecordBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"[GeneratedCode(\\\"Repository.Generator\\\", \\\"1.0.0.0\\\")]public record </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> {{}}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _declarationSyntax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">RecordDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">PropertyDeclarationSyntax</span> <span class=\"token function\">ParseProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> code<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"public record Demo {{ </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">code</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> }}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cls <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">RecordDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">PropertyDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> nullable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">TrimStart</span><span class=\"token punctuation\">(</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> initializer <span class=\"token operator\">=</span> type <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"=default!;\"</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n        _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseProperty</span><span class=\"token punctuation\">(</span>nullable\n            <span class=\"token punctuation\">?</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"public </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">? </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> {{ get; init; }}\"</span></span>\n            <span class=\"token punctuation\">:</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"public </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> {{ get; init; }}</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">initializer</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">RecordDeclarationSyntax</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _declarationSyntax<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfile <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplementationBuilder</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ClassDeclarationSyntax</span> _declarationSyntax<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ImplementationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCode</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repository.Generator\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IRepository</span></span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ActivitySource</span> ActivitySource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Repository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDbConnection</span> _connection<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">public</span> <span class=\"token function\">Repository</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IDbConnection</span> connection<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">?</span></span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _connection <span class=\"token operator\">=</span> connection <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentNullException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger <span class=\"token operator\">=</span> logger <span class=\"token operator\">??</span> NullLogger<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _declarationSyntax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ClassDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MethodDeclarationSyntax</span> <span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> code<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cls <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ClassDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">MethodDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> hasResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> hasRequest<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Response<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> ActivitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ActivityKind<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{{name}}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">try</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>{{name}}Response<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandDefinition</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Response<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Async</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> ActivitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ActivityKind<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{{name}}\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">try</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">QueryAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>{{name}}Response<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandDefinition</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> ActivitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ActivityKind<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{{name}}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">try</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandDefinition</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span>$<span class=\"token interpolation-string\"><span class=\"token string\">$\"\"</span></span>\"\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Repository</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> Task <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Async</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> ActivitySource<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ActivityKind<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">BeginScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>KeyValuePair<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{{name}}\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> timer <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">try</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">await</span> _connection<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandDefinition</span><span class=\"token punctuation\">(</span>Constants<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">cancellationToken</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Debug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogDebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done in {Elapsed}\"</span><span class=\"token punctuation\">,</span> timer<span class=\"token punctuation\">.</span>Elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            activity<span class=\"token punctuation\">?.</span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>ActivityStatusCode<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_logger<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabled</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n                                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{Message}\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// _declarationSyntax = _declarationSyntax.AddMembers();</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ClassDeclarationSyntax</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _declarationSyntax<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfile <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterfaceBuilder</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InterfaceDeclarationSyntax</span> _declarationSyntax<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">InterfaceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[GeneratedCode(\\\"Repository.Generator\\\", \\\"1.0.0.0\\\")] public interface IRepository {}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _declarationSyntax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">InterfaceDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MethodDeclarationSyntax</span> <span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> code<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cls <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">InterfaceDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">MethodDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> hasResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> hasRequest<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"interface IRepository {{ Task&lt;IEnumerable&lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Response>> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Async(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Request request, CancellationToken token = default); }}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"interface IRepository {{ Task&lt;IEnumerable&lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Response>> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Async(CancellationToken token = default); }}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"interface IRepository {{ Task </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Async(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Request request, CancellationToken token = default); }}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasResponse <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>hasRequest<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span><span class=\"token function\">ParseMethodDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"interface IRepository {{ Task </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">Async(CancellationToken token = default); }}\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">InterfaceDeclarationSyntax</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _declarationSyntax<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfile <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstantsBuilder</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ClassDeclarationSyntax</span> _declarationSyntax<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ConstantsBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tree <span class=\"token operator\">=</span> CSharpSyntaxTree<span class=\"token punctuation\">.</span><span class=\"token function\">ParseText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[GeneratedCode(\\\"Repository.Generator\\\", \\\"1.0.0.0\\\")] internal static class Constants {}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CompilationUnitSyntax<span class=\"token punctuation\">)</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">GetRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _declarationSyntax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Members<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ClassDeclarationSyntax</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _declarationSyntax <span class=\"token operator\">=</span> _declarationSyntax<span class=\"token punctuation\">.</span><span class=\"token function\">AddMembers</span><span class=\"token punctuation\">(</span>SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FieldDeclaration</span><span class=\"token punctuation\">(</span>\n                SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span>\n                        SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">PredefinedType</span><span class=\"token punctuation\">(</span>\n                            SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>StringKeyword<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">WithVariables</span><span class=\"token punctuation\">(</span>\n                        SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">SingletonSeparatedList</span><span class=\"token punctuation\">(</span>\n                            SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">VariableDeclarator</span><span class=\"token punctuation\">(</span>\n                                    SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">WithInitializer</span><span class=\"token punctuation\">(</span>\n                                    SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">EqualsValueClause</span><span class=\"token punctuation\">(</span>\n                                        SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">LiteralExpression</span><span class=\"token punctuation\">(</span>\n                                            SyntaxKind<span class=\"token punctuation\">.</span>StringLiteralExpression<span class=\"token punctuation\">,</span>\n                                            SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Literal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n                                        <span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithModifiers</span><span class=\"token punctuation\">(</span>\n                SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">TokenList</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>PublicKeyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SyntaxFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span>SyntaxKind<span class=\"token punctuation\">.</span>ConstKeyword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ClassDeclarationSyntax</span> <span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _declarationSyntax<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"pageContext":{"id":"50ffcb5e-ac03-5092-84c3-a069823084d4"}},"staticQueryHashes":[]}