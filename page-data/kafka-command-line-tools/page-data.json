{"componentChunkName":"component---src-templates-note-js","path":"/kafka-command-line-tools/","result":{"data":{"remark":{"fields":{"path":"kafka-command-line-tools"},"meta":{"title":""},"headings":[{"value":"kafka command line tools"},{"value":"Kafka topics"},{"value":"Console producer and consumers"},{"value":"Confluent Cloud"},{"value":"Kafka connect"},{"value":"Standalone connect worker with confluent.cloud"},{"value":"Distributed Worker"},{"value":"Bash aliases"}],"html":"<h1>kafka command line tools</h1>\n<p>First of all we gonna need kafka itself, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>kafka <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">SAMPLEDATA</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RUNNING_SAMPLEDATA</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RUNTESTS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">FORWARDLOGS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ADV_HOST</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3030</span>:3030 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>-8083:8081-8083 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9581</span>-9585:9581-9585 lensesio/fast-data-dev:2.3.0</code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://raw.githubusercontent.com/confluentinc/examples/5.3.1-post/cp-all-in-one/docker-compose.yml\n<span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre></div>\n<p>or</p>\n<p>run everything by hands on your own like described in <a href=\"https://kafka.apache.org/quickstart\">quickstart</a></p>\n<p>or</p>\n<p>get <a href=\"https://confluent.cloud\">confluent.cloud</a></p>\n<h1>Kafka topics</h1>\n<p>The most basic and needed</p>\n<h2>List topics</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--list</span></code></pre></div>\n<h2>Create topic</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> demo2 <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<h2>Delete topic</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--delete</span> <span class=\"token parameter variable\">--topic</span> demo2</code></pre></div>\n<h1>Console producer and consumers</h1>\n<p>Here are examples for following use cases:</p>\n<ul>\n<li>simple without key</li>\n<li>simple with string key</li>\n<li>simple with integer key</li>\n<li>json without key</li>\n<li>json with string key</li>\n<li>json with ingeteger key</li>\n<li>json with json key</li>\n<li>avro without key</li>\n<li>avro with string key</li>\n<li>avro with integer key</li>\n<li>avro with avro key</li>\n</ul>\n<p>By deafult in all following examples messages delimited by new line, e.g. start producer, type something, press enter.</p>\n<p>All follogin examples are run agains</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>kafka <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">SAMPLEDATA</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RUNNING_SAMPLEDATA</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RUNTESTS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">FORWARDLOGS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ADV_HOST</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3030</span>:3030 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>-8083:8081-8083 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9581</span>-9585:9581-9585 lensesio/fast-data-dev:2.3.0</code></pre></div>\n<h2>String producer and consumer</h2>\n<h3>Simple without key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> SimpleWithoutKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-producer</code> which will produce simple string messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> SimpleWithoutKey</code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-consumer</code> to consume simple string messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> SimpleWithoutKey --from-beginning</code></pre></div>\n<p>Produce simple messages like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hello\nworld</code></pre></div>\n<p>And you should see them in consumer as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hello\nworld</code></pre></div>\n<h3>Simple with string key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> SimpleWithStringKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-producer</code> which will produce simple string messages with string key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> SimpleWithStringKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">parse.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span>:</code></pre></div>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">--property parse.key=true</code> our consumer will expect us to enter key along side value</li>\n<li><code class=\"language-text\">--property key.separator=:</code> is optional and by default is space</li>\n</ul>\n<p>Start <code class=\"language-text\">kafka-console-consumer</code> to consume simple string messages with string key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> SimpleWithStringKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true --from-beginning</code></pre></div>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">--property print.key=true</code> will print key</li>\n</ul>\n<p>Produce messages like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>:one\n<span class=\"token number\">2</span>:two</code></pre></div>\n<p>And you should see them in consumer as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\tone\n<span class=\"token number\">2</span>\ttwo</code></pre></div>\n<p>If you try to produce message without key you should see an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>message without key\norg.apache.kafka.common.KafkaException: No key found on line 3: acme\n\tat kafka.tools.ConsoleProducer$LineMessageReader.readMessage(ConsoleProducer.scala:265)\n\tat kafka.tools.ConsoleProducer$.main(ConsoleProducer.scala:54)\n\tat kafka.tools.ConsoleProducer.main(ConsoleProducer.scala)</code></pre></div>\n<h3>Simple with integer key</h3>\n<p>Not fully possible at moment, here are some links:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44803392/\">kafka-console-producer ignores value serializer?</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/KAFKA-2526\">Console Producer / Consumer's serde config is not working</a></li>\n<li><a href=\"https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/tools/ConsoleProducer.scala#L96\">Console Producer sources</a></li>\n</ul>\n<p>The problem is that no matter what you will pass to console producer it still will send bytes</p>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> SimpleWithIntKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-producer</code> which will produce simple string messages with integer key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> SimpleWithIntKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">parse.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.serializer</span><span class=\"token operator\">=</span>org.apache.kafka.common.serialization.IntegerDeserializer <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.serializer</span><span class=\"token operator\">=</span>org.apache.kafka.common.serialization.StringDeserializer <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span>:</code></pre></div>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">--property key.serializer=org.apache.kafka.common.serialization.IntegerDeserializer</code> defines which deserializer should be used for key</li>\n<li><code class=\"language-text\">--property value.serializer=org.apache.kafka.common.serialization.StringDeserializer</code> defines which deserializer should be user for value</li>\n<li>both not being applied</li>\n</ul>\n<p>Start <code class=\"language-text\">kafka-console-consumer</code> to consume simple string messages with integer key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> SimpleWithIntKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.common.serialization.StringDeserializer <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.common.serialization.StringDeserializer --skip-message-on-error</code></pre></div>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">key.deserializer=org.apache.kafka.common.serialization.StringDeserializer</code> we are forced to use string instead of integer deserializer here, otherwise will receive an error <code class=\"language-text\">ERROR Error processing message, skipping this message: (kafka.tools.ConsoleConsumer$) org.apache.kafka.common.errors.SerializationException: Size of data received by IntegerDeserializer is not 4</code></li>\n<li><code class=\"language-text\">--skip-message-on-error</code> do not crash on bad message, just skip it</li>\n</ul>\n<p>Produce messages like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>:one\n<span class=\"token number\">2</span>:two</code></pre></div>\n<p>And you should see them in consumer as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\tone\n<span class=\"token number\">2</span>\ttwo</code></pre></div>\n<h2>Json producer and consumer</h2>\n<h3>Json without key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> JsonWithoutKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-producer</code> which will produce json messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> JsonWithoutKey</code></pre></div>\n<p>Note that like in previous example with integer key, <code class=\"language-text\">kafka-console-producer</code> does not respect given serializers so we will just put string which looks like json but still sent as bytes</p>\n<p>Start <code class=\"language-text\">kafka-console-consumer</code> to consume json messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> JsonWithoutKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonDeserializer --skip-message-on-error --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.timestamp</span><span class=\"token operator\">=</span>true</code></pre></div>\n<p>Produce json messages like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"foo\": \"bar\"}\n{\"acme\": 42}</code></pre></div>\n<p>And you should see them like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CreateTime:1578081298745        {\"foo\":\"bar\"}\nCreateTime:1578081304001        {\"acme\":42}</code></pre></div>\n<p>There is not checks in producer but if you send something wrong you will see an error in consumer</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CreateTime:1578081353956        [2020-01-03 19:55:54,970] ERROR Error processing message, skipping this message:  (kafka.tools.ConsoleConsumer$)\norg.apache.kafka.common.errors.SerializationException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'foo': was expecting 'null', 'true', 'false' or NaN\n at [Source: (byte[])\"foo\"; line: 1, column: 7]\nCaused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'foo': was expecting 'null', 'true', 'false' or NaN\n at [Source: (byte[])\"foo\"; line: 1, column: 7]</code></pre></div>\n<h3>Json with string key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> JsonWithStringKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-producer</code> which will produce json messages with string key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> JsonWithStringKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">parse.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span>:</code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-consumer</code> to consume json messages with string key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> JsonWithStringKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonDeserializer</code></pre></div>\n<p>Produce messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1:{\"foo\":\"bar\"}\n2:{\"acme\":42}</code></pre></div>\n<p>And you should see:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1       {\"foo\":\"bar\"}\n2       {\"acme\":42}</code></pre></div>\n<p>Note that there is the same problem with keys as in previous examples, and you can not force integer key.</p>\n<h3>Json with json key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> JsonWithJsonKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-producer</code> which will produce json messages with json keys</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> JsonWithJsonKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">parse.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span><span class=\"token string\">\"|\"</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-console-consumer</code> to consume json messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> JsonWithJsonKey  <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonDeserializer <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonDeserializer --skip-message-on-error --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true</code></pre></div>\n<p>Produce messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"id\":1}|{\"foo\":\"bar\"}\n{\"id\":2}|{\"acme\":42}</code></pre></div>\n<p>And you should see:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"id\":1}        {\"foo\":\"bar\"}\n{\"id\":2}        {\"acme\":42}</code></pre></div>\n<p>If you will produce bad key or value you will get:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ERROR Error processing message, skipping this message:  (kafka.tools.ConsoleConsumer$)\norg.apache.kafka.common.errors.SerializationException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'foo': was expecting 'null', 'true', 'false' or NaN\n at [Source: (byte[])\"foo\"; line: 1, column: 7]\nCaused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'foo': was expecting 'null', 'true', 'false' or NaN\n at [Source: (byte[])\"foo\"; line: 1, column: 7]</code></pre></div>\n<h2>Avro producer and consumer</h2>\n<h3>Avro without key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> AvroWithoutKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-producer</code> to produce avro messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithoutKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"record\",\"name\":\"AvroWithoutKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"string\"}]}'</span></code></pre></div>\n<p>Note that from now on we are using <code class=\"language-text\">kafka-avro-console-producer</code> instead of <code class=\"language-text\">kafka-console-producer</code> which has few additional properties like <code class=\"language-text\">--property value.schema='{\"type\":\"record\",\"name\":\"AvroWithoutKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"string\"}]}'</code> messages published via this consumer will be validated against given schema. Also note that this producer does not show <code class=\"language-text\">></code> symbol, so do not wait for it.</p>\n<p>Start <code class=\"language-text\">kafka-avro-console-consumer</code> to consume avro messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithoutKey --from-beginning</code></pre></div>\n<p>Try sending something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"foo\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"foo\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>and you should see exactly the same output in consumer.</p>\n<p>If you will try send something wrong you will receive an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"acme\":42}\norg.apache.kafka.common.errors.SerializationException: Error deserializing json {\"acme\":42} to Avro of schema {\"type\":\"record\",\"name\":\"AvroWithoutKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"string\"}]}\nCaused by: org.apache.avro.AvroTypeException: Expected field name not found: foo\n        at org.apache.avro.io.JsonDecoder.doAction(JsonDecoder.java:477)\n        at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)</code></pre></div>\n<p>but still if something you are sending is schema compatible everything should be ok, try sending <code class=\"language-text\">{\"foo\":\"bar\",\"acme\":42}</code> and you will receive <code class=\"language-text\">{\"foo\":\"bar\"}</code> in your consumer</p>\n<h3>Avro with string key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> AvroWithStringKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-producer</code> to produce avro messages with primitive string key</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithStringKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"record\",\"name\":\"AvroWithStringKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"string\"}]}'</span> <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">parse.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"string\"}'</span> <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span><span class=\"token string\">\" \"</span></code></pre></div>\n<p>Not that we have added <code class=\"language-text\">--property key.schema='{\"type\":\"string\"}'</code> which allow us to use primitives as key and they still will be validated.</p>\n<p>Start <code class=\"language-text\">kafka-avro-console-consumer</code> to consume avro messages with string keys</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithStringKey --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.common.serialization.StringDeserializer</code></pre></div>\n<p>Try send something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"one\" {\"foo\":\"1\"}\n\"two\" {\"foo\":\"2\"}</code></pre></div>\n<p>and you should get:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">one     {\"foo\":\"1\"}\ntwo     {\"foo\":\"2\"}</code></pre></div>\n<p>Do not forget to wrap key with double quotes otherwise you will get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">org.apache.kafka.common.errors.SerializationException: Error deserializing json one to Avro of schema \"string\"\nCaused by: org.codehaus.jackson.JsonParseException: Unexpected character ('o' (code 111)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\n at [Source: java.io.StringReader@3feb2dda; line: 1, column: 2]</code></pre></div>\n<h3>Avro with int key</h3>\n<p>Does not work, in example below after trying to send <code class=\"language-text\">1|{\"foo\":\"bar\"}</code> receiving an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">org.apache.kafka.common.errors.SerializationException: Error deserializing json 1|{\"foo\":\"hello\"} to Avro of schema {\"type\":\"record\",\"name\":\"AvroWithIntKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"int\"}]}\nCaused by: org.apache.avro.AvroTypeException: Expected record-start. Got VALUE_NUMBER_INT</code></pre></div>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> AvroWithIntKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-producer</code> to produce avro messages with integer keys</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithIntKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"record\",\"name\":\"AvroWithIntKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"int\"}]}'</span> <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span><span class=\"token string\">\"|\"</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-consumer</code> to consume avro messages</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithIntKey --from-beginning</code></pre></div>\n<h3>Avro with avro key</h3>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> AvroWithAvroKey <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-producer</code> which will produce avro messages with avro keys</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithAvroKey <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"record\", \"name\": \"AvroWithAvroKey\", \"fields\":[{\"name\":\"foo\",\"type\":\"string\"}]}'</span> <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">parse.key</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"record\",\"name\": \"key\", \"fields\":[{\"name\":\"id\",\"type\":\"int\"}]}'</span> <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">key.separator</span><span class=\"token operator\">=</span><span class=\"token string\">\" \"</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-consumer</code> to consume avro messages with avro keys</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroWithAvroKey --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true</code></pre></div>\n<p>Try send</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"id\":1} {\"foo\":\"hello\"}\n{\"id\":2} {\"foo\":\"world\"}</code></pre></div>\n<p>and you should receive</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"id\":1}        {\"foo\":\"hello\"}\n{\"id\":2}        {\"foo\":\"world\"}</code></pre></div>\n<p>if you will try send wrong key like <code class=\"language-text\">{\"id\":\"guid\"}</code> you will receive an error</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">org.apache.kafka.common.errors.SerializationException: Error deserializing json {\"id\":\"guid\"} to Avro of schema {\"type\":\"record\",\"name\":\"key\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"}]}\nCaused by: org.apache.avro.AvroTypeException: Expected int. Got VALUE_STRING</code></pre></div>\n<h1>Confluent Cloud</h1>\n<p>If you are using <a href=\"https://confluent.cloud/\">confluent.cloud</a> from <a href=\"https://confluent.io/\">confluent.io</a> you still able to do all this with few more params added for commands</p>\n<p>More examples can be found <a href=\"https://github.com/confluentinc/examples/tree/5.3.2-post/clients/cloud/kafka-commands\">here</a></p>\n<h2>Topics</h2>\n<p>You gonna need properties file which you can retrieve from <code class=\"language-text\">https://confluent.cloud/environments/*****/clusters/***-*****/integrations/clients#java</code> by navigating cluster then \"CLI &#x26; client configuration\"</p>\n<p><strong>cloud.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-xxxxx.us-east1.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-topics <span class=\"token punctuation\">\\</span>\n  --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  --command-config /cloud.properties <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--list</span></code></pre></div>\n<p>all other commands will work as expected</p>\n<h2>Produce &#x26; consume simple messages</h2>\n<p>If you are going to run simple producer without avro and schema registry then properties file from previous example should be enough</p>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-topics <span class=\"token punctuation\">\\</span>\n  --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  --command-config /cloud.properties <span class=\"token punctuation\">\\</span>\n   <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> simple1 <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">3</span></code></pre></div>\n<p>Start producer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-console-producer <span class=\"token punctuation\">\\</span>\n  --broker-list xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--producer.config</span> /cloud.properties <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--topic</span> simple1</code></pre></div>\n<p>Start consumer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-console-consumer <span class=\"token punctuation\">\\</span>\n  --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--consumer.config</span> /cloud.properties <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--topic</span> simple1</code></pre></div>\n<p>Cleanup</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-topics <span class=\"token punctuation\">\\</span>\n  --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  --command-config /cloud.properties <span class=\"token punctuation\">\\</span>\n   <span class=\"token parameter variable\">--delete</span> <span class=\"token parameter variable\">--topic</span> simple1</code></pre></div>\n<p>Note that you are not restricted to strings only, you can also use all previous examples with different keys and json</p>\n<h2>Produce &#x26; consume AVRO messages in confluent.cloud</h2>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-topics <span class=\"token punctuation\">\\</span>\n  --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  --command-config /cloud.properties <span class=\"token punctuation\">\\</span>\n   <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> avro1 <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">3</span></code></pre></div>\n<p>Start producer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-schema-registry:5.3.2 kafka-avro-console-producer <span class=\"token punctuation\">\\</span>\n    --broker-list xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--topic</span> avro1 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.schema</span><span class=\"token operator\">=</span><span class=\"token string\">'{\"type\":\"record\",\"name\":\"AvroWithoutKey\",\"fields\":[{\"name\":\"foo\",\"type\":\"string\"}]}'</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--producer.config</span> /cloud.properties <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">schema.registry.url</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://xxxx-xxxxx.us-east1.gcp.confluent.cloud\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">schema.registry.basic.auth.user.info</span><span class=\"token operator\">=</span><span class=\"token string\">\"xxxxxxx:xxxxxxx\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">basic.auth.credentials.source</span><span class=\"token operator\">=</span>USER_INFO</code></pre></div>\n<p>Start consumer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-schema-registry:5.3.2 kafka-avro-console-consumer <span class=\"token punctuation\">\\</span>\n    --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--topic</span> avro1 <span class=\"token punctuation\">\\</span>\n    --from-beginning <span class=\"token punctuation\">\\</span>\n    --value-deserializer io.confluent.kafka.serializers.KafkaAvroDeserializer <span class=\"token punctuation\">\\</span>\n    --key-deserializer org.apache.kafka.common.serialization.StringDeserializer <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--consumer.config</span> /cloud.properties <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">schema.registry.url</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://xxxx-xxxxx.us-east1.gcp.confluent.cloud\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">schema.registry.basic.auth.user.info</span><span class=\"token operator\">=</span><span class=\"token string\">\"xxxxxxx:xxxxxxx\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">basic.auth.credentials.source</span><span class=\"token operator\">=</span>USER_INFO</code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>we are using another docker image <code class=\"language-text\">confluentinc/cp-schema-registry:5.3.2</code> because of kafka avro console consumer and producer</li>\n<li><code class=\"language-text\">cloud.properties</code> is still enough but schema registry settings should be passed via command line arguments</li>\n</ul>\n<h1>Kafka connect</h1>\n<p>We are going to use kafka connect to:</p>\n<ul>\n<li>produce predefined messages from a file to replay some sequence of events</li>\n<li>produce generated messages to get millions of them for test purposes</li>\n<li>have sample sink connector to save messages to a file</li>\n</ul>\n<p>All example will be made as standalone worker which should not be used in production and used here only because of its easy to use</p>\n<p>At very end worker command looks liks like this: <code class=\"language-text\">connect-standalone worker.properties task1.properties task2.properties</code> where <code class=\"language-text\">worker.properties</code> contains configuration for worker itself and some defaults for tasks, <code class=\"language-text\">taskX.properties</code> is task configuration, you can have many of them, for example your worker might have few tasks which will produce messages from different files and one task to consume them into elasticsearch.</p>\n<p>Tasks producing data into kafka called <code class=\"language-text\">source</code>, tasks consuming data from kafka called <code class=\"language-text\">sink</code>.</p>\n<p>Be aware of advertised hosts and rest ports, if you are connecting to dockerized kafka which have localhost as advertised host from your worker which is also run in container nothing will work, use <code class=\"language-text\">--net=host</code> for such scenarios, but then you gonna need to change <code class=\"language-text\">rest.port</code> to avoid conflict with already taken port.</p>\n<p>More links about worker properties:</p>\n<ul>\n<li><a href=\"https://docs.confluent.io/3.2.0/connect/userguide.html#common-worker-configs\">common worker configs</a></li>\n<li><a href=\"https://docs.confluent.io/current/installation/configuration/connect/index.html\">connect configurations</a></li>\n</ul>\n<p>Also you can get samples like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> confluentinc/cp-kafka-connect:5.3.2 <span class=\"token function\">cat</span> /etc/schema-registry/connect-avro-standalone.properties</code></pre></div>\n<h2>Local kafka connect</h2>\n<p>Start your kafka</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>kafka <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">SAMPLEDATA</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RUNNING_SAMPLEDATA</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RUNTESTS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">FORWARDLOGS</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ADV_HOST</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3030</span>:3030 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>-8082:8081-8082 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9581</span>-9585:9581-9585 lensesio/fast-data-dev:2.3.0</code></pre></div>\n<p>Note that I'm not exposing <code class=\"language-text\">8083</code> which is used by kafka connect rest api to avoid conflicts, otherwise do not forget to change <code class=\"language-text\">rest.port</code> in <code class=\"language-text\">worker.properties</code></p>\n<h3>Simple messages</h3>\n<p><strong>worker.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">localhost:9092</span>\n\n<span class=\"token comment\"># do not forget to change me to avoid conflicts</span>\n<span class=\"token key attr-name\">rest.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8083</span>\n\n<span class=\"token comment\"># required for standalone workers</span>\n<span class=\"token key attr-name\">offset.storage.file.filename</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/tmp/standalone.offsets</span>\n\n<span class=\"token comment\"># where to look for additional plugins</span>\n<span class=\"token key attr-name\">plugin.path</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/usr/share/java,/usr/share/confluent-hub-components</span>\n\n<span class=\"token comment\"># optional, defaults for tasks</span>\n<span class=\"token key attr-name\">key.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.storage.StringConverter</span>\n<span class=\"token key attr-name\">value.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.storage.StringConverter</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>key and value converters are optional and can be overriden in tasks</li>\n<li>most used converters are: <code class=\"language-text\">org.apache.kafka.connect.storage.StringConverter</code>, <code class=\"language-text\">org.apache.kafka.connect.json.JsonConverter</code>, <code class=\"language-text\">io.confluent.connect.avro.AvroConverter</code></li>\n<li>avro converter requires schema registry</li>\n<li>for json converter do not forget to add <code class=\"language-text\">value.converter.schemas.enable=false</code> if you wish not to receive schema, e.g. by sending <code class=\"language-text\">{\"foo\":\"bar\"}</code> you will receive <code class=\"language-text\">{\"schema\":{\"type\":\"string\",\"optional\":false},\"payload\":\"{\\\"foo\\\": \\\"bar\\\"}\"}</code></li>\n</ul>\n<h3>Kafka Connect Source Text File</h3>\n<p>Notes on task configuration properties:</p>\n<ul>\n<li>do not forget that each task should have unique <code class=\"language-text\">name</code> it will be used to watch for offsets and for distributed wrokers it will be used for topic names</li>\n<li><code class=\"language-text\">connector.class</code> is a kind of plugin, you can choose from <a href=\"https://hub.confluent.io/\">hub.confluent.io</a></li>\n<li><code class=\"language-text\">tasks.max</code> control parallelism, for sink tasks can not be bigger that number of topic partitions</li>\n</ul>\n<p><strong>source-text-file.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">source-text-file</span>\n<span class=\"token key attr-name\">connector.class</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.file.FileStreamSourceConnector</span>\n<span class=\"token comment\"># optional, override worker defaults</span>\n<span class=\"token key attr-name\">value.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.storage.StringConverter</span>\n<span class=\"token key attr-name\">topic</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DemoTextFile</span>\n<span class=\"token key attr-name\">file</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">demo-text-file.txt</span></code></pre></div>\n<p><strong>demo-text-file.txt</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hello\nworld\nmac\nwas\nhere</code></pre></div>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> DemoTextFile <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start consumer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> DemoTextFile --from-beginning</code></pre></div>\n<p>Start worker</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>standalone <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/data <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-w</span> /data <span class=\"token punctuation\">\\</span>\n    confluentinc/cp-kafka-connect:5.3.2 connect-standalone worker.properties source-text-file.properties</code></pre></div>\n<p>Note that we are bypassing our current directory into container so worker has access to all configuration files</p>\n<p>If everything is ok after some while you will see your messages from a source file in your consumer</p>\n<h3>Kafka Connect Source JSON File</h3>\n<p>This one will work same way as previous</p>\n<p><strong>source-json-file.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">source-json-file</span>\n<span class=\"token key attr-name\">connector.class</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.file.FileStreamSourceConnector</span>\n<span class=\"token comment\"># optional, override worker defaults</span>\n<span class=\"token comment\"># value.converter=org.apache.kafka.connect.json.JsonConverter</span>\n<span class=\"token comment\"># value.converter.schemas.enable=false</span>\n<span class=\"token comment\"># if your will use JsonConverter here you will receive string with escaped json</span>\n<span class=\"token key attr-name\">value.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.storage.StringConverter</span>\n<span class=\"token key attr-name\">topic</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DemoJsonFile</span>\n<span class=\"token key attr-name\">file</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">demo-json-file.ndjson</span></code></pre></div>\n<p><strong>demo-json-file.ndjson</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"foo\": \"hello\"}\n{\"foo\": \"world\"}\n{\"foo\": \"bar\"}\n{\"acme\": 42}</code></pre></div>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> DemoJsonFile <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start consumer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> DemoJsonFile <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">value.deserializer</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonDeserializer --skip-message-on-error --from-beginning</code></pre></div>\n<p>Start worker</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>standalone <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/data <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-w</span> /data <span class=\"token punctuation\">\\</span>\n    confluentinc/cp-kafka-connect:5.3.2 connect-standalone worker.properties source-json-file.properties</code></pre></div>\n<p>While everything running, try add more records to a source file and save it, you should immediatelly see them in consumer.</p>\n<p>Also try to add non json line to a source file, you will get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[2020-01-04 10:09:00,896] ERROR Error processing message, skipping this message:  (kafka.tools.ConsoleConsumer$)\norg.apache.kafka.common.errors.SerializationException: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'non': was expecting 'null', 'true', 'false' or NaN\n at [Source: (byte[])\"non json\"; line: 1, column: 5]\nCaused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'non': was expecting 'null', 'true', 'false' or NaN\n at [Source: (byte[])\"non json\"; line: 1, column: 5]</code></pre></div>\n<p>but because we are running consumer with a <code class=\"language-text\">--skip-message-on-error</code> flag it should not die and continue listening to new records</p>\n<p>unfortunatelly there is no way to produce messages with keys from simple files, if you will look at <a href=\"https://github.com/apache/kafka/blob/trunk/connect/file/src/main/java/org/apache/kafka/connect/file/FileStreamSourceTask.java#L153\">sources</a> you will see that <code class=\"language-text\">null</code> is passed as key</p>\n<p>If you wish to have keys you should run configured console producer and pipe file contents into it</p>\n<h3>Replaying Avro Messages With Key Value</h3>\n<p>This particular example does not use Kafka Connect but still might be used to replay some sequence of messages</p>\n<p>Lets suppose that our <code class=\"language-text\">source.txt</code> file will look like:</p>\n<p><strong>source.txt</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"id\":1}|{\"foo\":\"hello\"}\n{\"id\":2}|{\"foo\":\"world\"}</code></pre></div>\n<p>where each line is an message with key and value separated by pipe</p>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> AvroFromFile <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-consumer</code> to consume avro messages from file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host confluentinc/cp-schema-registry:5.3.2 kafka-avro-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroFromFile --from-beginning <span class=\"token parameter variable\">--property</span> <span class=\"token assign-left variable\">print.key</span><span class=\"token operator\">=</span>true</code></pre></div>\n<p>Start <code class=\"language-text\">kafka-avro-console-producer</code> which will produce avro messages from a file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/data <span class=\"token parameter variable\">-w</span> /data confluentinc/cp-schema-registry:5.3.2 <span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"kafka-avro-console-producer --broker-list localhost:9092 --topic AvroFromFile --property value.schema='{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>type<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>record<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>name<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>AvroFromFile<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>fields<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:[{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>name<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>foo<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>type<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>string<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}]}' --property parse.key=true --property key.schema='{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>type<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>record<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>name<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>key<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>fields<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:[{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>name<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>id<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>type<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>int<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}]}' --property key.separator=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>|<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &lt; source.txt\"</span></code></pre></div>\n<p>And you should see your desired messages in consumer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\"id\":1}\t{\"foo\":\"hello\"}\n{\"id\":2}\t{\"foo\":\"world\"}</code></pre></div>\n<p>Note that I have used <code class=\"language-text\">sh -c \"....\"</code> here because of bash can not understand whether last <code class=\"language-text\">&lt; source.txt</code> should be ran inside docker or not</p>\n<h3>Kafka Connect Source DataGen Avro</h3>\n<p>In following example we are going to generate tousand of recods based on given avro schema</p>\n<p><strong>source.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">source</span>\n<span class=\"token key attr-name\">connector.class</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">io.confluent.kafka.connect.datagen.DatagenConnector</span>\n<span class=\"token key attr-name\">kafka.topic</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">AvroDatagen</span>\n<span class=\"token comment\"># override worker.properties</span>\n<span class=\"token key attr-name\">value.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">io.confluent.connect.avro.AvroConverter</span>\n<span class=\"token key attr-name\">value.converter.schema.registry.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">http://localhost:8081</span>\n<span class=\"token key attr-name\">key.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">io.confluent.connect.avro.AvroConverter</span>\n<span class=\"token key attr-name\">key.converter.schema.registry.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">http://localhost:8081</span>\n<span class=\"token comment\"># number of messages to generate</span>\n<span class=\"token key attr-name\">iterations</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span>\n<span class=\"token key attr-name\">tasks.max</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span>\n<span class=\"token comment\"># avro schema</span>\n<span class=\"token key attr-name\">schema.filename</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/data/AvroDatagen.avsc</span></code></pre></div>\n<p>Some additional properties can be found <a href=\"https://docs.confluent.io/current/schema-registry/connect.html\">here</a></p>\n<p>Note that by default <code class=\"language-text\">auto.register.schemas</code> is set to <code class=\"language-text\">true</code> so you do not need to register schemas upfront everything will be done automatically. Also note that both <code class=\"language-text\">key.subject.name.strategy</code> and <code class=\"language-text\">value.subject.name.strategy</code> are set to <code class=\"language-text\">io.confluent.kafka.serializers.subject.SubjectNameStrategy</code> so schema names will be <code class=\"language-text\">AvroDatagen-key</code> and <code class=\"language-text\">AvroDatagen-value</code> retrospectively.</p>\n<p><strong>AvroDatagen.avsc</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"type\": \"record\",\n  \"name\": \"AvroDatagen\",\n  \"namespace\": \"ua.rabota.topics\",\n  \"fields\": [\n    {\n      \"name\": \"userId\",\n      \"type\": {\n        \"type\": \"int\",\n        \"arg.properties\": {\n          \"range\": {\n            \"min\": 1,\n            \"max\": 100\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"vacancyId\",\n      \"type\": {\n        \"type\": \"long\",\n        \"arg.properties\": {\n          \"range\": {\n            \"min\": 7710732,\n            \"max\": 7711732\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"platform\",\n      \"type\": [\"null\", {\n        \"type\": \"string\",\n        \"arg.properties\": {\n          \"options\": [\"desktop\", \"mobile\", \"ios\", \"android\"]\n        }\n      }],\n      \"default\": null\n    }\n  ]\n}</code></pre></div>\n<p>Note that usually in avro schema you defining properties like <code class=\"language-text\">{\"name\": \"foo\", \"type\": \"string\"}</code> where <code class=\"language-text\">type</code> is usually primitive string with type name, for datagen we are describing type as object with additional <code class=\"language-text\">arg.properties</code></p>\n<ul>\n<li><a href=\"https://github.com/confluentinc/kafka-connect-datagen/tree/master/src/main/resources\">avro schema examples</a></li>\n<li><a href=\"https://github.com/confluentinc/kafka-connect-datagen/tree/0.2.x/config\">connector config examples</a></li>\n<li><a href=\"https://github.com/confluentinc/avro-random-generator\">avro generator args</a></li>\n</ul>\n<p>Crate topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> AvroDatagen <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start consumer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-avro-console-consumer --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> AvroDatagen --from-beginning</code></pre></div>\n<p>Start avro datagen producer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>standalone <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/data <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-w</span> /data <span class=\"token punctuation\">\\</span>\n    confluentinc/cp-kafka-connect:5.3.2 <span class=\"token function\">bash</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.2.0 &amp;&amp; connect-standalone worker.properties source.properties\"</span></code></pre></div>\n<p>Note how we are installing <code class=\"language-text\">kafka-connect-datagen</code> before starting <code class=\"language-text\">connect-standalone</code> it does not shipped by deafult</p>\n<p>After a while, when everything will boot up you should see incomming messages in consumer</p>\n<p>When datagen will produce desired 1000 messages it will die and you will see something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[2020-01-04 11:22:37,984] ERROR WorkerSourceTask{id=source-0} Task threw an uncaught and unrecoverable exception (org.apache.kafka.connect.runtime.WorkerTask:179)\norg.apache.kafka.connect.errors.ConnectException: Stopping connector: generated the configured 1000 number of messages</code></pre></div>\n<p>Unfortunatelly datagen is quite limited about keys only way you can have keys is to provide <code class=\"language-text\">schema.keyfield</code> which will use one of generated properties as message key, and according to <a href=\"https://github.com/confluentinc/kafka-connect-datagen/blob/0.2.x/src/main/java/io/confluent/kafka/connect/datagen/DatagenTask.java#L255\">sources</a> it still will be simple string key.</p>\n<h3>Kafka Connect Simple Sink To Text File</h3>\n<p>This might be used for debug and log</p>\n<p><strong>sink.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">sink</span>\n<span class=\"token key attr-name\">connector.class</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.file.FileStreamSinkConnector</span>\n<span class=\"token key attr-name\">tasks.max</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span>\n<span class=\"token key attr-name\">topics</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SinkDemo</span>\n<span class=\"token key attr-name\">file</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/data/data.txt</span></code></pre></div>\n<p>Create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> SinkDemo <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">1</span></code></pre></div>\n<p>Start Kafka Connect Sink to save messages to a text file</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>standalone <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/data <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-w</span> /data <span class=\"token punctuation\">\\</span>\n    confluentinc/cp-kafka-connect:5.3.2 connect-standalone worker.properties sink.properties</code></pre></div>\n<p>Start console producer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-producer --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> SinkDemo</code></pre></div>\n<p>and start typing messages into it, you should immediatelly see them in text file</p>\n<p>Do not forget that you can run some tricky setups like <code class=\"language-text\">connect-standalone worker.properties source.properties sink.properties</code> which might generate data into topic and immediatelly sink them into source</p>\n<h1>Standalone connect worker with confluent.cloud</h1>\n<p>All previous examples should work well with confluent.cloud if you will provide required configuration options</p>\n<p>What you gonna need</p>\n<p><strong>cloud.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-xxxxx.us-east1.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span></code></pre></div>\n<p>this file will be used by <code class=\"language-text\">kafka-topics</code> to create topic</p>\n<p><strong>worker.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-xxxxx.us-east1.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">plugin.path</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/usr/share/java,/usr/share/confluent-hub-components</span>\n\n<span class=\"token key attr-name\">offset.storage.file.filename</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/tmp/standalone.offsets</span>\n\n<span class=\"token comment\"># TODO: check whether this is a deafults</span>\n<span class=\"token comment\"># default 60000</span>\n<span class=\"token key attr-name\">offset.flush.interval.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span>\n<span class=\"token comment\"># default 40000</span>\n<span class=\"token key attr-name\">request.timeout.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">20000</span>\n<span class=\"token comment\"># 100</span>\n<span class=\"token key attr-name\">retry.backoff.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">500</span>\n<span class=\"token key attr-name\">consumer.request.timeout.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">20000</span>\n<span class=\"token key attr-name\">consumer.retry.backoff.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">500</span>\n<span class=\"token key attr-name\">producer.request.timeout.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">20000</span>\n<span class=\"token key attr-name\">producer.retry.backoff.ms</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">500</span>\n\n<span class=\"token comment\"># deafult https</span>\n<span class=\"token key attr-name\">ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token comment\"># default PLAINTEXT</span>\n<span class=\"token key attr-name\">security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token comment\"># default GSSAPI</span>\n<span class=\"token key attr-name\">sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n\n<span class=\"token comment\"># Connect producer and consumer specific configuration</span>\n<span class=\"token key attr-name\">producer.ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">producer.confluent.monitoring.interceptor.ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">consumer.ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">consumer.confluent.monitoring.interceptor.ssl.endpoint.identification.algorithm</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https</span>\n<span class=\"token key attr-name\">producer.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">producer.confluent.monitoring.interceptor.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">consumer.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">consumer.confluent.monitoring.interceptor.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">producer.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">producer.confluent.monitoring.interceptor.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">consumer.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">consumer.confluent.monitoring.interceptor.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n<span class=\"token key attr-name\">producer.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n<span class=\"token key attr-name\">producer.confluent.monitoring.interceptor.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n<span class=\"token key attr-name\">consumer.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n<span class=\"token key attr-name\">consumer.confluent.monitoring.interceptor.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n\n<span class=\"token comment\"># Confluent Schema Registry for Kafka Connect</span>\n<span class=\"token key attr-name\">value.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">io.confluent.connect.avro.AvroConverter</span>\n<span class=\"token key attr-name\">value.converter.basic.auth.credentials.source</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">USER_INFO</span>\n<span class=\"token key attr-name\">value.converter.schema.registry.basic.auth.user.info</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxxxxxx:xxxxxxx</span>\n<span class=\"token key attr-name\">value.converter.schema.registry.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https://xxxx-xxxxx.us-east1.gcp.confluent.cloud</span>\n\n<span class=\"token key attr-name\">key.converter</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">io.confluent.connect.avro.AvroConverter</span>\n<span class=\"token key attr-name\">key.converter.basic.auth.credentials.source</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">USER_INFO</span>\n<span class=\"token key attr-name\">key.converter.schema.registry.basic.auth.user.info</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxxxxxx:xxxxxxx</span>\n<span class=\"token key attr-name\">key.converter.schema.registry.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https://xxxx-xxxxx.us-east1.gcp.confluent.cloud</span>\n\n\n<span class=\"token comment\"># additions - https://docs.confluent.io/current/cloud/connect/connect-cloud-config.html</span>\n\n<span class=\"token key attr-name\">confluent.topic.bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-xxxxx.us-east1.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">confluent.topic.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n<span class=\"token key attr-name\">confluent.topic.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">confluent.topic.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">reporter.admin.bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-xxxxx.us-east1.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">reporter.admin.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n<span class=\"token key attr-name\">reporter.admin.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">reporter.admin.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span>\n\n<span class=\"token key attr-name\">reporter.producer.bootstrap.servers</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx-xxxxx.us-east1.gcp.confluent.cloud:9092</span>\n<span class=\"token key attr-name\">reporter.producer.sasl.jaas.config</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.common.security.plain.PlainLoginModule required username\\=\"xxxxxxx\" password\\=\"xxxxxxx\";</span>\n<span class=\"token key attr-name\">reporter.producer.security.protocol</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SASL_SSL</span>\n<span class=\"token key attr-name\">reporter.producer.sasl.mechanism</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">PLAIN</span></code></pre></div>\n<p>this one is for worker to be able to comminicate with confluent cloud</p>\n<p><strong>source.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">source</span>\n<span class=\"token key attr-name\">tasks.max</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span>\n\n<span class=\"token key attr-name\">connector.class</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">io.confluent.kafka.connect.datagen.DatagenConnector</span>\n<span class=\"token key attr-name\">kafka.topic</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">demo1</span>\n<span class=\"token key attr-name\">iterations</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span>\n<span class=\"token key attr-name\">schema.filename</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/data/demo1.avsc</span></code></pre></div>\n<p>this one will be used by datagen connector to generate random data into given topic</p>\n<p><strong>sink.properties</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">sink</span>\n<span class=\"token key attr-name\">connector.class</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.kafka.connect.file.FileStreamSinkConnector</span>\n<span class=\"token key attr-name\">topics</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">demo1</span>\n<span class=\"token key attr-name\">file</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/data/data.txt</span></code></pre></div>\n<p>sing generated messages back from cloud to local file</p>\n<p><strong>demo1.avsc</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"type\": \"record\",\n  \"name\": \"demo1\",\n  \"namespace\": \"ua.rabota.topics\",\n  \"fields\": [\n    {\n      \"name\": \"userId\",\n      \"type\": {\n        \"type\": \"int\",\n        \"arg.properties\": {\n          \"range\": {\n            \"min\": 1,\n            \"max\": 100\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"vacancyId\",\n      \"type\": {\n        \"type\": \"long\",\n        \"arg.properties\": {\n          \"range\": {\n            \"min\": 7710732,\n            \"max\": 7711732\n          }\n        }\n      }\n    },\n    {\n      \"name\": \"platform\",\n      \"type\": [\"null\", {\n        \"type\": \"string\",\n        \"arg.properties\": {\n          \"options\": [\"desktop\", \"mobile\", \"ios\", \"android\"]\n        }\n      }],\n      \"default\": null\n    }\n  ]\n}</code></pre></div>\n<p>schema for messages to be generated</p>\n<p>create topic</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>/cloud.properties:/cloud.properties confluentinc/cp-kafka:5.3.2 kafka-topics <span class=\"token punctuation\">\\</span>\n  --bootstrap-server xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n  --command-config /cloud.properties <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> demo1  <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">3</span> --replication-factor <span class=\"token number\">3</span></code></pre></div>\n<p>start worker</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>standalone <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-v</span> <span class=\"token environment constant\">$PWD</span>:/data <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-w</span> /data <span class=\"token punctuation\">\\</span>\n    confluentinc/cp-kafka-connect:5.3.2 <span class=\"token function\">bash</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.2.0 &amp;&amp; connect-standalone worker.properties source.properties sink.properties\"</span></code></pre></div>\n<p>after a while you will see that your data.txt file becomes full of random generated messages</p>\n<p>So now you can quickly send batch of messages both generated and predefined not only to local kafka but also to your confluent cloud one - profit</p>\n<h1>Distributed Worker</h1>\n<p>Confluent cloud not giving you distributed workers for some reasons. Seems like it is because they do not know how much of them you gonna need. To start your own connect cluster you will need <code class=\"language-text\">worker.properties</code> from previous example just remove <code class=\"language-text\">offset.storage.file.filename</code> from it and add</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">group.id=mac1\noffset.storage.topic=mac1-offsets\nconfig.storage.topic=mac1-configs\nstatus.storage.topic=mac1-status\n\noffset.storage.partitions=3\nreplication.factor=3\nconfig.storage.replication.factor=3\noffset.storage.replication.factor=3\nstatus.storage.replication.factor=3</code></pre></div>\n<p>take a closer look to first four settings, make sure they are unique</p>\n<p>The difference between standalone and distributed worker is that from now you going to add and remove your tasks via <a href=\"https://docs.confluent.io/current/connect/references/restapi.html\">rest api</a></p>\n<p>In most of the cases everything will look the same as in previous examples, except that now you are going to post json instead of property files like in example from docs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">POST /connectors HTTP/1.1\nHost: connect.example.com\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"name\": \"hdfs-sink-connector\",\n    \"config\": {\n        \"connector.class\": \"io.confluent.connect.hdfs.HdfsSinkConnector\",\n        \"tasks.max\": \"10\",\n        \"topics\": \"test-topic\",\n        \"hdfs.url\": \"hdfs://fakehost:9000\",\n        \"hadoop.conf.dir\": \"/opt/hadoop/conf\",\n        \"hadoop.home\": \"/opt/hadoop\",\n        \"flush.size\": \"100\",\n        \"rotate.interval.ms\": \"1000\"\n    }\n}</code></pre></div>\n<p>Here is an example of docker run which is a good starting point to run your connect cluster in kubernetes</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>mac1 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8083</span>:8083 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_BOOTSTRAP_SERVERS</span><span class=\"token operator\">=</span>xxx-xxxxx.us-east1.gcp.confluent.cloud:9092 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_GROUP_ID</span><span class=\"token operator\">=</span>mac1 <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_OFFSET_STORAGE_TOPIC</span><span class=\"token operator\">=</span>mac1-offsets <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONFIG_STORAGE_TOPIC</span><span class=\"token operator\">=</span>mac1-configs <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_STATUS_STORAGE_TOPIC</span><span class=\"token operator\">=</span>mac1-status <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_OFFSET_STORAGE_PARTITIONS</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_REPLICATION_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_STATUS_STORAGE_REPLICATION_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_OFFSET_FLUSH_INTERVAL_MS</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_REQUEST_TIMEOUT_MS</span><span class=\"token operator\">=</span><span class=\"token number\">20000</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_RETRY_BACKOFF_MS</span><span class=\"token operator\">=</span><span class=\"token number\">500</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_REQUEST_TIMEOUT_MS</span><span class=\"token operator\">=</span><span class=\"token number\">20000</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_RETRY_BACKOFF_MS</span><span class=\"token operator\">=</span><span class=\"token number\">500</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_REQUEST_TIMEOUT_MS</span><span class=\"token operator\">=</span><span class=\"token number\">20000</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_RETRY_BACKOFF_MS</span><span class=\"token operator\">=</span><span class=\"token number\">500</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM</span><span class=\"token operator\">=</span>https <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_SECURITY_PROTOCOL</span><span class=\"token operator\">=</span>SASL_SSL <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_SASL_MECHANISM</span><span class=\"token operator\">=</span>PLAIN <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_SASL_JAAS_CONFIG</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.kafka.common.security.plain.PlainLoginModule required username=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> password=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>;\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM</span><span class=\"token operator\">=</span>https <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM</span><span class=\"token operator\">=</span>https <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM</span><span class=\"token operator\">=</span>https <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM</span><span class=\"token operator\">=</span>https <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_SECURITY_PROTOCOL</span><span class=\"token operator\">=</span>SASL_SSL <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL</span><span class=\"token operator\">=</span>SASL_SSL <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_SECURITY_PROTOCOL</span><span class=\"token operator\">=</span>SASL_SSL <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL</span><span class=\"token operator\">=</span>SASL_SSL <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_SASL_MECHANISM</span><span class=\"token operator\">=</span>PLAIN <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM</span><span class=\"token operator\">=</span>PLAIN <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_SASL_MECHANISM</span><span class=\"token operator\">=</span>PLAIN <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM</span><span class=\"token operator\">=</span>PLAIN <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_SASL_JAAS_CONFIG</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.kafka.common.security.plain.PlainLoginModule required username=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> password=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>;\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.kafka.common.security.plain.PlainLoginModule required username=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> password=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>;\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_SASL_JAAS_CONFIG</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.kafka.common.security.plain.PlainLoginModule required username=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> password=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>;\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.kafka.common.security.plain.PlainLoginModule required username=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> password=<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>xxxxxxx<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>;\"</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_VALUE_CONVERTER</span><span class=\"token operator\">=</span>io.confluent.connect.avro.AvroConverter <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE</span><span class=\"token operator\">=</span>USER_INFO <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO</span><span class=\"token operator\">=</span>xxxxxxx:xxxxxxx <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL</span><span class=\"token operator\">=</span>https://xxxx-xxxxx.us-east1.gcp.confluent.cloud <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_KEY_CONVERTER</span><span class=\"token operator\">=</span>io.confluent.connect.avro.AvroConverter <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_REST_POST</span><span class=\"token operator\">=</span><span class=\"token number\">8083</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_REST_ADVERTISED_HOST_NAME</span><span class=\"token operator\">=</span>localhost <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE</span><span class=\"token operator\">=</span>USER_INFO <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO</span><span class=\"token operator\">=</span>xxxxxxx:xxxxxxx <span class=\"token punctuation\">\\</span>\n    <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL</span><span class=\"token operator\">=</span>https://xxxx-xxxxx.us-east1.gcp.confluent.cloud\n    confluentinc/cp-kafka-connect:5.3.2</code></pre></div>\n<h1>Bash aliases</h1>\n<p>Even simple operations like creating topic becomes not easy to remember especially if you will have local, dev, prod kafka clusters</p>\n<p>If you are using <a href=\"https://docs.confluent.io/current/cloud/cli/command-reference/ccloud.html\">ccloud</a> command line tool you already should have <code class=\"language-text\">~/.ccloud/</code> which to me seems a good place to save my <code class=\"language-text\">cloud.properties</code> files in my case it will be <code class=\"language-text\">dev.properties</code> and <code class=\"language-text\">prod.peroperties</code></p>\n<p>Here are few starting point examples</p>\n<h2>Local kafka bash aliases</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> local-topic<span class=\"token operator\">=</span><span class=\"token string\">\"docker run -it --rm --net=host confluentinc/cp-kafka:5.3.2 kafka-topics --bootstrap-server localhost:9092\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-topic-list<span class=\"token operator\">=</span><span class=\"token string\">\"local-topic --list\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-topic-delete<span class=\"token operator\">=</span><span class=\"token string\">\"local-topic --delete --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-topic-describe<span class=\"token operator\">=</span><span class=\"token string\">\"local-topic --describe --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-topic-create<span class=\"token operator\">=</span><span class=\"token string\">\"local-topic --create --replication-factor 1 --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-topic-create1<span class=\"token operator\">=</span><span class=\"token string\">\"local-topic --create --replication-factor 1 --partitions 1 --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-topic-create2<span class=\"token operator\">=</span><span class=\"token string\">\"local-topic --create --replication-factor 1 --partitions 2 --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-console-consumer<span class=\"token operator\">=</span><span class=\"token string\">\"docker run -it --rm --net=host confluentinc/cp-kafka:5.3.2 kafka-console-consumer --bootstrap-server localhost:9092 --from-beginning --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> local-console-producer<span class=\"token operator\">=</span><span class=\"token string\">\"docker run -it --rm --net=host confluentinc/cp-kafka:5.3.2 kafka-console-producer --broker-list localhost:9092 --topic\"</span></code></pre></div>\n<h2>Confluent cloud kafka bash aliases</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> dev-topic<span class=\"token operator\">=</span><span class=\"token string\">\"docker run -it --rm -v /Users/mac/.ccloud/dev.properties:/dev.properties confluentinc/cp-kafka:5.3.2 kafka-topics --bootstrap-server <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> bootstrap.server ~/.ccloud/dev.properties <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-1</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">'='</span> <span class=\"token parameter variable\">-f2</span><span class=\"token variable\">)</span></span> --command-config dev.properties\"</span>\n\n<span class=\"token builtin class-name\">alias</span> dev-topic-list<span class=\"token operator\">=</span><span class=\"token string\">\"dev-topic --list\"</span>\n\n<span class=\"token builtin class-name\">alias</span> dev-topic-delete<span class=\"token operator\">=</span><span class=\"token string\">\"dev-topic --delete --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> dev-topic-describe<span class=\"token operator\">=</span><span class=\"token string\">\"dev-topic --describe --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> dev-topic-create<span class=\"token operator\">=</span><span class=\"token string\">\"dev-topic --create  --replication-factor 3 --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> dev-console-consumer<span class=\"token operator\">=</span><span class=\"token string\">\"docker run -it --rm -v /Users/mac/.ccloud/dev.properties:/dev.properties confluentinc/cp-kafka:5.3.2 kafka-console-consumer --bootstrap-server <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> bootstrap.server ~/.ccloud/dev.properties <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-1</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">'='</span> <span class=\"token parameter variable\">-f2</span><span class=\"token variable\">)</span></span> --consumer.config dev.properties --topic\"</span>\n\n<span class=\"token builtin class-name\">alias</span> dev-console-producer<span class=\"token operator\">=</span><span class=\"token string\">\"docker run -it --rm -v /Users/mac/.ccloud/dev.properties:/dev.properties confluentinc/cp-kafka:5.3.2 kafka-console-producer --broker-list <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> bootstrap.server ~/.ccloud/dev.properties <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-1</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">'='</span> <span class=\"token parameter variable\">-f2</span><span class=\"token variable\">)</span></span> --producer.config dev.properties --topic\"</span></code></pre></div>"}},"pageContext":{"id":"7afe6926-d329-5f95-ad8f-47097b51aa01"}},"staticQueryHashes":[],"slicesMap":{}}