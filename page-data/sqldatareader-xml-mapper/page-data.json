{"componentChunkName":"component---src-templates-note-js","path":"/sqldatareader-xml-mapper/","result":{"data":{"remark":{"fields":{"path":"sqldatareader-xml-mapper"},"meta":{"title":""},"headings":[{"value":"SqlDataReader Mapper"}],"html":"<h1>SqlDataReader Mapper</h1>\n<p>SqlDataReader simple mapper extension with XML support</p>\n<p>In my case I have following setup:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">USE</span> master\nGO\n<span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> sys<span class=\"token punctuation\">.</span><span class=\"token keyword\">databases</span> <span class=\"token keyword\">WHERE</span> name<span class=\"token operator\">=</span><span class=\"token string\">'DataMapperTests'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DATABASE</span> DataMapperTests <span class=\"token keyword\">SET</span> SINGLE_USER <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">ROLLBACK</span> IMMEDIATE\n\t<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> DataMapperTests\n<span class=\"token keyword\">END</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> DataMapperTests\nGO\n<span class=\"token keyword\">USE</span> DataMapperTests\nGO\n\n<span class=\"token keyword\">PRINT</span> <span class=\"token string\">'Creating tables'</span>\nGO\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> Tag <span class=\"token punctuation\">(</span>\n\tId <span class=\"token keyword\">INT</span> <span class=\"token keyword\">IDENTITY</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\tName NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> Post <span class=\"token punctuation\">(</span>\n\tId <span class=\"token keyword\">INT</span> <span class=\"token keyword\">IDENTITY</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\tTitle NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tPublished <span class=\"token keyword\">BIT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tCreatedAt DATETIME2 <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CONVERT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span> GETDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tPublishedAt DATETIME2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> PostTags <span class=\"token punctuation\">(</span>\n\tPostId <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\tTagId <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>PostId<span class=\"token punctuation\">,</span> TagId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">CONSTRAINT</span> FK_Post <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>PostId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> Post<span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">CONSTRAINT</span> FK_Tag <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>TagId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> Tag<span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">CASCADE</span>\n<span class=\"token punctuation\">)</span>\nGO\n\n<span class=\"token keyword\">PRINT</span> <span class=\"token string\">'Seed tables'</span>\nGO\n\n<span class=\"token keyword\">SET</span> NOCOUNT <span class=\"token keyword\">ON</span>\n\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">IDENTITY_INSERT</span> Tag <span class=\"token keyword\">ON</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> Tag <span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">,</span> Name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tag 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tag 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">IDENTITY_INSERT</span> Tag <span class=\"token keyword\">OFF</span>\nGO\n\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">IDENTITY_INSERT</span> Post <span class=\"token keyword\">ON</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> Post <span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">,</span> Title<span class=\"token punctuation\">,</span> Published<span class=\"token punctuation\">,</span> PublishedAt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Post 1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">CONVERT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span> GETDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Post 2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Post 3'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">CONVERT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DATE</span><span class=\"token punctuation\">,</span> GETDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">IDENTITY_INSERT</span> Post <span class=\"token keyword\">OFF</span>\nGO\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> PostTags <span class=\"token punctuation\">(</span>PostId<span class=\"token punctuation\">,</span> TagId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nGO\n\n<span class=\"token keyword\">PRINT</span> <span class=\"token string\">'Create view'</span>\nGO\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> SampleView <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span>\n\tId<span class=\"token punctuation\">,</span>\n\tTitle<span class=\"token punctuation\">,</span>\n\tCreatedAt<span class=\"token punctuation\">,</span>\n\tPublished<span class=\"token punctuation\">,</span>\n\tPublishedAt<span class=\"token punctuation\">,</span>\n\n\tISNULL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n\t\tLTRIM<span class=\"token punctuation\">(</span>RTRIM<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">FROM</span> PostTags <span class=\"token keyword\">AS</span> PT\n\t\t<span class=\"token keyword\">JOIN</span> Tag <span class=\"token keyword\">AS</span> T <span class=\"token keyword\">ON</span> PT<span class=\"token punctuation\">.</span>TagId <span class=\"token operator\">=</span> T<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">AND</span> PT<span class=\"token punctuation\">.</span>PostId <span class=\"token operator\">=</span> P<span class=\"token punctuation\">.</span>Id\n\t\t<span class=\"token keyword\">FOR</span> XML PATH <span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ROOT<span class=\"token punctuation\">(</span><span class=\"token string\">'ArrayOfString'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">TYPE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;ArrayOfString>&lt;/ArrayOfString>'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ListString<span class=\"token punctuation\">,</span>\n\n\tISNULL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n\t\tLTRIM<span class=\"token punctuation\">(</span>RTRIM<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">FROM</span> PostTags <span class=\"token keyword\">AS</span> PT\n\t\t<span class=\"token keyword\">JOIN</span> Tag <span class=\"token keyword\">AS</span> T <span class=\"token keyword\">ON</span> PT<span class=\"token punctuation\">.</span>TagId <span class=\"token operator\">=</span> T<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">AND</span> PT<span class=\"token punctuation\">.</span>PostId <span class=\"token operator\">=</span> P<span class=\"token punctuation\">.</span>Id\n\t\t<span class=\"token keyword\">FOR</span> XML PATH <span class=\"token punctuation\">(</span><span class=\"token string\">'int'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ROOT<span class=\"token punctuation\">(</span><span class=\"token string\">'ArrayOfInt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">TYPE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;ArrayOfInt>&lt;/ArrayOfInt>'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ListInt<span class=\"token punctuation\">,</span>\n\n\tISNULL<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span>\n\t\tT<span class=\"token punctuation\">.</span>Id <span class=\"token keyword\">AS</span> Id<span class=\"token punctuation\">,</span>\n\t\tLTRIM<span class=\"token punctuation\">(</span>RTRIM<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> Name\n\t\t<span class=\"token keyword\">FROM</span> PostTags <span class=\"token keyword\">AS</span> PT\n\t\t<span class=\"token keyword\">JOIN</span> Tag <span class=\"token keyword\">AS</span> T <span class=\"token keyword\">ON</span> PT<span class=\"token punctuation\">.</span>TagId <span class=\"token operator\">=</span> T<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">AND</span> PT<span class=\"token punctuation\">.</span>PostId <span class=\"token operator\">=</span> P<span class=\"token punctuation\">.</span>Id\n\t\t<span class=\"token keyword\">FOR</span> XML PATH <span class=\"token punctuation\">(</span><span class=\"token string\">'Tag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ROOT<span class=\"token punctuation\">(</span><span class=\"token string\">'ArrayOfTag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">TYPE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;ArrayOfTag>&lt;/ArrayOfTag>'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ListTag\n\n<span class=\"token keyword\">FROM</span> Post <span class=\"token keyword\">AS</span> P\nGO</code></pre></div>\n<p>Sample view is returning following data:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| Name        | Type               |\n| ----------- | ------------------ |\n| Id          | int                |\n| Title       | string             |\n| CreatedAt   | DateTime           |\n| Published   | bool               |\n| PublishedAt | DateTime           |\n| ListString  | List&amp;lt;string&amp;gt; |\n| ListInt     | List&amp;lt;int&amp;gt;    |\n| ListTag     | List&amp;lt;Tag&amp;gt;    |</code></pre></div>\n<p>Our models are:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tag</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Title <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> Published <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> PublishedAt <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> CreatedAt <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> ListInt <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> ListString <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>Tag<span class=\"token punctuation\">></span></span> ListTag <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here is SqlDataReaderMapperExtension:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlDataReaderExtensions</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">MemoryCache</span> Cache <span class=\"token operator\">=</span> MemoryCache<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">Map</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">SqlDataReader</span> reader<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> properties <span class=\"token operator\">=</span> <span class=\"token function\">GetProperties</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> reader<span class=\"token punctuation\">.</span>FieldCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">IsDBNull</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> property <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">[</span><span class=\"token function\">NormalizeKey</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>property <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetFieldType</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> property<span class=\"token punctuation\">.</span>PropertyType<span class=\"token punctuation\">)</span>\n\t\t\t\tproperty<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetProviderSpecificFieldType</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">SqlXml</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\tproperty<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XmlSerializer</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>PropertyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Deserialize</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetXmlReader</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ILookup<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> PropertyInfo<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cacheKey <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>SqlDataReaderExtensions<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type<span class=\"token punctuation\">.</span>FullName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">ILookup<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> PropertyInfo<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n\t\tresult <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">GetProperties</span><span class=\"token punctuation\">(</span>BindingFlags<span class=\"token punctuation\">.</span>Public <span class=\"token operator\">|</span> BindingFlags<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>CanWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLookup</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token function\">NormalizeKey</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tCache<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>cacheKey<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">NormalizeKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>which will allow you to get objects like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlCommand</span><span class=\"token punctuation\">(</span>Query<span class=\"token punctuation\">,</span> <span class=\"token function\">GetSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tcommand<span class=\"token punctuation\">.</span>Connection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span>HasRows<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> post <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Map</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Post<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and here is event shorten way with command extension</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlCommandExtensions</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">ExecuteReader</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">SqlCommand</span> command<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n\t<span class=\"token punctuation\">{</span>\n\t\tcommand<span class=\"token punctuation\">.</span>Connection<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reader<span class=\"token punctuation\">.</span>HasRows<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Map</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcommand<span class=\"token punctuation\">.</span>Connection<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and now you can do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SqlCommand</span><span class=\"token punctuation\">(</span>Query<span class=\"token punctuation\">,</span> <span class=\"token function\">GetSqlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> posts <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ExecuteReader</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Post<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Extension were written to handle xml in first place and for demo purposes</p>"}},"pageContext":{"id":"6623bf4f-d314-56b9-8766-d23714e33016"}},"staticQueryHashes":[],"slicesMap":{}}