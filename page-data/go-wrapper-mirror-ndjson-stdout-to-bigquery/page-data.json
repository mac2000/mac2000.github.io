{"componentChunkName":"component---src-templates-note-js","path":"/go-wrapper-mirror-ndjson-stdout-to-bigquery/","result":{"data":{"remark":{"fields":{"path":"go-wrapper-mirror-ndjson-stdout-to-bigquery"},"meta":{"title":""},"headings":[{"value":"wrapper to send logs of any program to bigquery"}],"html":"<h1>wrapper to send logs of any program to bigquery</h1>\n<p>Imagine you have some service running somewhere on VM</p>\n<p>This service has json logs which you want to have in BigQuery</p>\n<p>To do so usually we are start fighting with things like <a href=\"https://mac-blog.org.ua/logstash-decode-mime-mail-subject\">logstash</a>, <a href=\"https://mac-blog.org.ua/fluentbit-postfix-bounced-bigquery\">fluentbit</a>, etc</p>\n<p>Which at the end may be written as a simple tools that reads file, stores offset, parses lines and send them to BigQuery</p>\n<p>But the question is: why at all we need to touch disk and do all that?</p>\n<p>Why not instead wrap service and mirror its stdout</p>\n<p>Here is pseudo code of what it might look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">cmd <span class=\"token operator\">:=</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/usr/bin/some-service\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arg1\"</span><span class=\"token punctuation\">)</span>\ncmd<span class=\"token punctuation\">.</span>Stdout <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">MultiWriter</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> mirror<span class=\"token punctuation\">)</span> <span class=\"token comment\">// here is the trick</span>\ncmd<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>For example lets have small http server</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting server\"</span><span class=\"token punctuation\">)</span>\n\n  http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    q <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">:=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">`{\"name\":\"%s\",\"message\":\"request\",\"level\":\"info\"}`</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n      w<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">`{\"name\":\"unknown\",\"message\":\"request\",\"level\":\"warn\"}`</span><span class=\"token punctuation\">)</span>\n      w<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"got request without name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Listening localhost:8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>By intent it is trying to behave like an app writing json logs but from time to time there are non json output</p>\n<p>And here is our mirrorer:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"os/exec\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// TODO: pass os.Args to aka exec.Command(os.Args[1], os.Args[2:])</span>\n\t<span class=\"token comment\">// cmd := exec.Command(\"ping\", \"-c\", \"2\", \"www.google.com\")</span>\n\t<span class=\"token comment\">// cmd := exec.Command(\"ls\", \"-lah\", \".\")</span>\n\t<span class=\"token comment\">// cmd := exec.Command(\"node\", \"/Users/mac/Desktop/server.js\")</span>\n  <span class=\"token comment\">// cmd := exec.Command(\"./server/server\")</span>\n  cmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"go\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"run\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./server/server.go\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// TODO: there should be a way to ask kill child process in case of crash</span>\n\t<span class=\"token comment\">// cmd.SysProcAttr = &amp;syscall.SysProcAttr{</span>\n\t<span class=\"token comment\">// \tPdeathsig: syscall.SIGTERM,</span>\n\t<span class=\"token comment\">// }</span>\n\n\t<span class=\"token comment\">// NOTE: simples way to mirror child process stdout and stderr</span>\n\t<span class=\"token comment\">// cmd.Stdout = os.Stdout</span>\n\t<span class=\"token comment\">// cmd.Stderr = os.Stderr</span>\n\n  <span class=\"token comment\">// NOTE: each Write to the PipeWriter blocks until it has satisfied one or more Reads from the PipeReader that fully consume the written data</span>\n  pr<span class=\"token punctuation\">,</span> pw <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Pipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcmd<span class=\"token punctuation\">.</span>Stdout <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">MultiWriter</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> pw<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// NOTE: thanks to buffer we have non blocking writes, but from time to time it crashes with \"signal: broken pipe\" error</span>\n  <span class=\"token comment\">// buf := bytes.NewBuffer([]byte{})</span>\n\t<span class=\"token comment\">// cmd.Stdout = io.MultiWriter(os.Stdout, buf) // here is the trick, mirror child process stdout to our stdout and to buffer</span>\n\n  <span class=\"token comment\">// NOTE: because of pipe is blocking and we do not want to block stdout in any case we are creating buffer very big one, it does not take memory until is used, by intent i put really huge number here</span>\n  <span class=\"token comment\">// TODO: return back to 1K or 1M</span>\n  <span class=\"token comment\">// NOTE: 1_000_000_000 ~ 8Gb, 1_000_000 ~ 10Mb</span>\n  queue <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000_000</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>pr<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">go</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// start child process and wait till it ends</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child process ended\"</span><span class=\"token punctuation\">)</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// infinite loop, trying to read and parse json, all successfull entries are send then into queue for batching</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>reader io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> queue <span class=\"token keyword\">chan</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  scanner <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">)</span>\n  scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>bufio<span class=\"token punctuation\">.</span>ScanLines<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    line <span class=\"token operator\">:=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// fmt.Printf(\"# skipped '%s' is does not look like JSON\\n\", strings.TrimSuffix(line, \"\\n\"))</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n\n    err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// fmt.Printf(\"# unable parse '%s'\\n\", strings.TrimSuffix(line, \"\\n\"))</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">[</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    queue <span class=\"token operator\">&lt;-</span> data\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Should not land here until child process closed\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// size := 1000 // BigQuery allows up to 1K of rows to be inserted at once</span>\n\t<span class=\"token comment\">// timeout := 30 // We are going to flush every 30sec even if we have less than 1K entries</span>\n  size <span class=\"token operator\">:=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// For demo purposes reduce numbers</span>\n  timeout <span class=\"token operator\">:=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token comment\">// NOTE: go get cloud.google.com/go/bigquery, commented out for demo purposes</span>\n  <span class=\"token comment\">// ctx := context.Background()</span>\n\t<span class=\"token comment\">// client, err := bigquery.NewClient(ctx, \"project-x\")</span>\n\t<span class=\"token comment\">// if err != nil {</span>\n\t<span class=\"token comment\">// \tlog.Fatal(err)</span>\n\t<span class=\"token comment\">// }</span>\n\t<span class=\"token comment\">// defer client.Close()</span>\n  <span class=\"token comment\">// inserter := client.Dataset(\"dataset1\").Table(\"logs\").Inserter()</span>\n\n  counter <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> batch <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">batch</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// err = inserter.Put(ctx, batch)</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// pretend we are saving entries to BigQuery, this one needed to check if we will block stdout</span>\n    counter <span class=\"token operator\">+=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"saved batch of %d entries, %d total\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// https://elliotchance.medium.com/batch-a-channel-by-size-or-time-in-go-92fa3098f65</span>\n<span class=\"token comment\">// NOTE: check this out, `goto` still alive :)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">batch</span><span class=\"token punctuation\">(</span>values <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> maxItems <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> maxTimeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n\tbatches <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>batches<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">for</span> keepGoing <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> keepGoing<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">var</span> batch <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\texpire <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>maxTimeout<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">case</span> value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>values<span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tkeepGoing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t\t\t\t<span class=\"token keyword\">goto</span> done\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\tbatch <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxItems <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">goto</span> done\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>expire<span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">goto</span> done\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\tdone<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tbatches <span class=\"token operator\">&lt;-</span> batch\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> batches\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Notes to consider:</p>\n<ul>\n<li><code class=\"language-text\">io.Pipe</code> is blocking, which means if we have non buffered channel everything will be blocked till data is processed and if child process is dependant on stdout it will also be blocked, that's why we are creating buffered channel</li>\n<li>from my experiments it seems that it does eat predictable amount of memory which may be even better, e.g. won't grow forewer and cause OOM</li>\n</ul>\n<p>Having that we may wrap call to our service with this wrapper and have all our logs being send directly to BigQuery without need to touch disk at all</p>\n<p>To check how it works i ran something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token function\">curl</span> <span class=\"token string\">\"http://localhost:8080/?name=<span class=\"token variable\">$i</span>\"</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>as expected stdout on both sides was written immediatelly and little bit later i see desired</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Starting server\n{\"name\":\"1\",\"message\":\"request\",\"level\":\"info\"}\n...\n{\"name\":\"20\",\"message\":\"request\",\"level\":\"info\"}\nsaved batch of 5 entries, 5 total\nsaved batch of 5 entries, 10 total\nsaved batch of 5 entries, 15 total\nsaved batch of 5 entries, 20 total</code></pre></div>\n<p>The only thing left is to modify systemd config to run wrapper instead of actual program and we are done</p>"}},"pageContext":{"id":"e37b34a8-0382-579e-9a4a-f6691fe1c208"}},"staticQueryHashes":[],"slicesMap":{}}