{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-core-firebase-jwt/","result":{"data":{"remark":{"fields":{"path":"dotnet-core-firebase-jwt"},"meta":{"title":""},"headings":[{"value":"Generate custom JWT token for Firebase from dotnet core"}],"html":"<h1>Generate custom JWT token for Firebase from dotnet core</h1>\n<p>In my case I were trying to marry our office Active Directory with <a href=\"https://firebase.google.com/docs/auth/admin/create-custom-tokens\">Firebase Custom Authentication</a></p>\n<p>That is preatty easy task if you are using anything except C# :)</p>\n<p>In dotnet core at moment even talking to ldap is made via 3rd party library</p>\n<p>After googling have found nice article: <a href=\"http://www.donaldsbaconbytes.com/2016/08/create-jwt-with-a-private-rsa-key/\">Create JWT with a Private RSA Key</a></p>\n<p>And after few attempts at least got working sample:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Cryptography</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Jose</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Org<span class=\"token punctuation\">.</span>BouncyCastle<span class=\"token punctuation\">.</span>Crypto<span class=\"token punctuation\">.</span>Parameters</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Org<span class=\"token punctuation\">.</span>BouncyCastle<span class=\"token punctuation\">.</span>OpenSsl</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">WebApplication1<span class=\"token punctuation\">.</span>Services</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/// &lt;summary></span>\n\t<span class=\"token comment\">/// Firebase Custom Token Generator</span>\n\t<span class=\"token comment\">///</span>\n\t<span class=\"token comment\">/// Authenticate with Firebase in JavaScript Using a Custom Authentication System</span>\n\t<span class=\"token comment\">/// Docs: https://firebase.google.com/docs/auth/web/custom-auth</span>\n\t<span class=\"token comment\">/// Client (firebase service account) email and private key can be retrieved here:</span>\n\t<span class=\"token comment\">/// https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk</span>\n\t<span class=\"token comment\">///</span>\n\t<span class=\"token comment\">/// Required packages: BouncyCastle.NetCore, jose-jwt</span>\n\t<span class=\"token comment\">///</span>\n\t<span class=\"token comment\">/// Usage example:</span>\n\t<span class=\"token comment\">/// var firebase = new FirabaseCustomToken(clientEmail, privateKey);</span>\n\t<span class=\"token comment\">/// var token = firebase.CreateToken(\"alexandrm@rabota.ua\");</span>\n\t<span class=\"token comment\">/// &lt;/summary></span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirabaseCustomToken</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _clientEmail<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _privateKey<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token function\">FirabaseCustomToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> clientEmail<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> privateKey<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t_privateKey <span class=\"token operator\">=</span> privateKey<span class=\"token punctuation\">;</span>\n\t\t\t_clientEmail <span class=\"token operator\">=</span> clientEmail<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">CreateToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> uid<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> claims <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> now <span class=\"token operator\">=</span> DateTimeOffset<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span><span class=\"token function\">ToUnixTimeSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> payload <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"alg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RS256\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"iss\"</span><span class=\"token punctuation\">,</span> _clientEmail <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">,</span> _clientEmail <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"aud\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"iat\"</span><span class=\"token punctuation\">,</span> now <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"exp\"</span><span class=\"token punctuation\">,</span> now <span class=\"token operator\">+</span> <span class=\"token number\">3600</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">,</span> uid <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">{</span> <span class=\"token string\">\"claims\"</span><span class=\"token punctuation\">,</span> claims <span class=\"token operator\">??</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">SignToken</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">SignToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> payload<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> jwt<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">RsaPrivateCrtKeyParameters</span> key<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stringReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringReader</span><span class=\"token punctuation\">(</span>_privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pemReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PemReader</span><span class=\"token punctuation\">(</span>stringReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tkey <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>RsaPrivateCrtKeyParameters<span class=\"token punctuation\">)</span>pemReader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rsa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RSACryptoServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\trsa<span class=\"token punctuation\">.</span><span class=\"token function\">ImportParameters</span><span class=\"token punctuation\">(</span><span class=\"token function\">ToRsaParameters</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tjwt <span class=\"token operator\">=</span> JWT<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> rsa<span class=\"token punctuation\">,</span> JwsAlgorithm<span class=\"token punctuation\">.</span>RS256<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> jwt<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/// &lt;summary></span>\n\t\t<span class=\"token comment\">/// https://github.com/neoeinstein/bouncycastle/blob/master/crypto/src/security/DotNetUtilities.cs</span>\n\t\t<span class=\"token comment\">/// &lt;/summary></span>\n\t\t<span class=\"token comment\">/// &lt;param name=\"privKey\">string&lt;/param></span>\n\t\t<span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">RSAParameters</span> <span class=\"token function\">ToRsaParameters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RsaPrivateCrtKeyParameters</span> privKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RSAParameters</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tModulus <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>Modulus<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tExponent <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>PublicExponent<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tD <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>Exponent<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tP <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tQ <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tDP <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>DP<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tDQ <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>DQ<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tInverseQ <span class=\"token operator\">=</span> privKey<span class=\"token punctuation\">.</span>QInv<span class=\"token punctuation\">.</span><span class=\"token function\">ToByteArrayUnsigned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Further improvements may be accepting claims instead of dictionary, but unfortunatelly it seam that firebase itself does not respect claims from cutom tokens, so it is not an issue</p>\n<p>As for Active Directory in .Net Core working sample is:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">ActiveDirectoryJsonWebToken<span class=\"token punctuation\">.</span>Models</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Options</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Novell<span class=\"token punctuation\">.</span>Directory<span class=\"token punctuation\">.</span>Ldap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Principal</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ActiveDirectoryJsonWebToken<span class=\"token punctuation\">.</span>Services</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IdentityService</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">LdapConfig</span> _config<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token function\">IdentityService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOptions<span class=\"token punctuation\">&lt;</span>LdapConfig<span class=\"token punctuation\">></span></span> config<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t_config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ClaimsIdentity</span> <span class=\"token function\">GetIdentity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginModel</span> login<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LdapConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">try</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\tcn<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>_config<span class=\"token punctuation\">.</span>Hostname<span class=\"token punctuation\">,</span> LdapConnection<span class=\"token punctuation\">.</span>DEFAULT_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcn<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"RABOTA\\\\</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">login<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> claims <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> results <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">.</span><span class=\"token function\">Search</span><span class=\"token punctuation\">(</span>_config<span class=\"token punctuation\">.</span>BaseDn<span class=\"token punctuation\">,</span> LdapConnection<span class=\"token punctuation\">.</span>SCOPE_ONE<span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"(mail=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">login<span class=\"token punctuation\">.</span>Username</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entry <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tclaims<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>Email<span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tclaims<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>GivenName<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>StringValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groups <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MemberOf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>StringValues<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>groups<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">group</span> <span class=\"token operator\">=</span> groups<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">?.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CN=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tclaims<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>Role<span class=\"token punctuation\">,</span> <span class=\"token keyword\">group</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tcn<span class=\"token punctuation\">.</span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsIdentity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GenericIdentity</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LdapException</span> e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>ResultCode <span class=\"token operator\">==</span> LdapException<span class=\"token punctuation\">.</span>INVALID_CREDENTIALS<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It does require <code class=\"language-text\">Novell.Directory.Ldap.NETStandard</code> package to be installed to work</p>\n<p>All is left is just to marry all this, but after playing around I have decided to run stuff in node windows container so having best from both worlds, leaving this just for future possible reuse</p>"}},"pageContext":{"id":"f52bd583-97b9-5292-bcab-476814cfa199"}},"staticQueryHashes":[],"slicesMap":{}}