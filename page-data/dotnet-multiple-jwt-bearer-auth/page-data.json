{"componentChunkName":"component---src-templates-note-js","path":"/dotnet-multiple-jwt-bearer-auth/","result":{"data":{"remark":{"fields":{"path":"dotnet-multiple-jwt-bearer-auth"},"meta":{"title":""},"headings":[{"value":"dotnet multiple jwt bearer"}],"html":"<h1>dotnet multiple jwt bearer</h1>\n<p>From time to time auth topic appears and is always painfull</p>\n<p>In this note going to collect some observations and samples</p>\n<p>We are going to figure out how to have multiple bearer jwt auth plus api key auth combined in single app</p>\n<h2>Movies App</h2>\n<p>Let's pretend we are build an movies service, where users adding and liking movies, aka as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> movies\n<span class=\"token builtin class-name\">cd</span> movies\ndotnet new web --exclude-launch-settings</code></pre></div>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"die-hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Die Hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1988</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1979</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"terminator-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminator 2: Judgment Day\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1991</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2008</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClaimsPrincipal</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    authenticated <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>IsAuthenticated<span class=\"token punctuation\">,</span>\n    scheme <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>AuthenticationType<span class=\"token punctuation\">,</span>\n    user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name<span class=\"token punctuation\">,</span>\n    claims <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapDelete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}/likes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Likes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Year<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Likes <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Notes:</p>\n<ul>\n<li>as you can see we are not bothering with validations at all and auth yet, this is by intent, just to have something to start from, key goal here is to have some sample app</li>\n<li>there is no dependencies, so should be repeatable from scratch</li>\n</ul>\n<p>As you can imagine usage is:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/movies <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/movies/die-hard <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> PATCH http://localhost:5000/movies/die-hard/likes <span class=\"token operator\">|</span> jq</code></pre></div>\n<p>Also note how we are using default endpoint to retrieve current user info even so we did not touched auth at all</p>\n<p>The key idea here is that it does not matter what and which auth approach we are going to use at the end it should fill current user <code class=\"language-text\">ClaimsPrincipal</code></p>\n<p>For anonymous request it will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"authenticated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scheme\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"claims\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All examples below will be kind of copy pasta of this demo app</p>\n<h2>Authentication vs Authorization</h2>\n<p>Refresher:</p>\n<ul>\n<li>authentication - are you logged int?</li>\n<li>authorization - do you have permissions to do that?</li>\n</ul>\n<h3>JWT token</h3>\n<p>Before proceeding to JWT Authentication we need somehow create JWT tokens.</p>\n<p>Let's pretend we have an auth service that produces them.</p>\n<p>For simplicity and local tests here is an console app to do it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> jwtcli\n<span class=\"token builtin class-name\">cd</span> jwtcli\ndotnet new console\ndotnet <span class=\"token function\">add</span> package System.IdentityModel.Tokens.Jwt</code></pre></div>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens<span class=\"token punctuation\">.</span>Jwt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> user <span class=\"token operator\">=</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">JwtSecurityTokenHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> token <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">CreateEncodedJwt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SecurityTokenDescriptor</span> <span class=\"token punctuation\">{</span>\n  SigningCredentials <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SigningCredentials</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SecurityAlgorithms<span class=\"token punctuation\">.</span>HmacSha256Signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Audience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// is important if target server checks audience</span>\n  Expires <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">.</span><span class=\"token function\">AddMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Issuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// is important if target server checks issuer</span>\n  Subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsIdentity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>JwtRegisteredClaimNames<span class=\"token punctuation\">.</span>Sub<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// \"sub\" is a well known subject identifier type - aka user identifier</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"unique_name\" is a claim dotnet will use for current user identity name</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></p>\n<p>It will give us token like this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsInVuaXF1ZV9uYW1lIjoidXNlcjEiLCJuYmYiOjE3MDM5MzE4OTcsImV4cCI6MTcwNDUzMTg5NywiaWF0IjoxNzAzOTMxODk3LCJpc3MiOiJodHRwczovL2NvbnRvc28uY29tIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIn0.R5IDO3_YSg0pfp7gmhMLl9rQW4xHQzlA-F9YA3luj5I</code></pre></div>\n<p>We can see whats inside and verify signature <a href=\"https://jwt.io\">here</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"unique_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"nbf\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1703931897</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1704531897</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1703931897</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I will save it to <code class=\"language-text\">$token</code> environment variable and use it in bash script samples to keep them small and readable, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>dotnet run <span class=\"token parameter variable\">--project</span> jwtcli<span class=\"token variable\">)</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$token</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">sub</code> is a well known claim for subject, aka user identifier, but later we will see how dot net wants dedicated claim for user name and will \"alias\" it</li>\n<li>as a subject we may use whatever we want, from email to phone or like in our case dedicated string identifier</li>\n</ul>\n<h2>JWT Authentication</h2>\n<p>Here is the simples ever way to add authentication to your app</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> jwtauth\n<span class=\"token builtin class-name\">cd</span> jwtauth\ndotnet new web --exclude-launch-settings\ndotnet <span class=\"token function\">add</span> package Microsoft.Identity.Web</code></pre></div>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Authentication<span class=\"token punctuation\">.</span>JwtBearer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"die-hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Die Hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1988</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1979</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"terminator-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminator 2: Judgment Day\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1991</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2008</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ADD JWT AUTH</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span>JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// USE JWT AUTH</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClaimsPrincipal</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    authenticated <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>IsAuthenticated<span class=\"token punctuation\">,</span>\n    scheme <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>AuthenticationType<span class=\"token punctuation\">,</span>\n    user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name<span class=\"token punctuation\">,</span>\n    claims <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- REQUIRES AUTH</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapDelete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}/likes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Likes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Year<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Likes <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Now here are few tests:</p>\n<p>first lets check that we are still returnin nothing for anonymous user</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000 <span class=\"token operator\">|</span> jq</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"authenticated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scheme\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"claims\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now for authenticated (we have saved token to <code class=\"language-text\">$token</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000 <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"authenticated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scheme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AuthenticationTypes.Federation\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"claims\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nbf\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1703931897\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1704531897\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1703931897\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>scheme is being set to <code class=\"language-text\">AuthenticationTypes.Federation</code> rather than <code class=\"language-text\">Bearer</code> but we do not care at moment</li>\n<li><code class=\"language-text\">nameidentifier</code> claim comes from <code class=\"language-text\">sub</code> of our token</li>\n<li><code class=\"language-text\">name</code> claim comes from <code class=\"language-text\">unique_name</code> of our token and is used as current username</li>\n<li>both <code class=\"language-text\">sub</code> and <code class=\"language-text\">unique_name</code> were removed/replaced deep inside auth library</li>\n</ul>\n<p>And now lets check that we wired up everything:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># should respond with 401 unauthorized</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"contact\", \"title\": \"Contact\", \"year\": 1997, \"owner\": \"user1\"}'</span>\n\n<span class=\"token comment\"># should work</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"contact\", \"title\": \"Contact\", \"year\": 1997, \"owner\": \"user1\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<h2>ApiKey auth</h2>\n<p>Ok, now we are going to do something similar but for api key</p>\n<p>Idea behind this:</p>\n<ul>\n<li>we allowing access from sibling services which know secret api key only</li>\n<li>we want to add it alone for a next steps when we will combine different auth methods</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> apikeyauth\n<span class=\"token builtin class-name\">cd</span> apikeyauth\ndotnet new web --exclude-launch-settings</code></pre></div>\n<p>Here is the code:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encodings<span class=\"token punctuation\">.</span>Web</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Authentication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Options</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"die-hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Die Hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1988</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1979</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"terminator-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminator 2: Judgment Day\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1991</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2008</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ADD API KEY AUTH</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScheme</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">,</span> ApiKeyAuthenticationHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// USE API KEY AUTH</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClaimsPrincipal</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    authenticated <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>IsAuthenticated<span class=\"token punctuation\">,</span>\n    scheme <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>AuthenticationType<span class=\"token punctuation\">,</span>\n    user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name<span class=\"token punctuation\">,</span>\n    claims <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapDelete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}/likes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Likes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Year<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Likes <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// API KEY AUTH IMPLEMENTATION DETAILS</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiKeyAuthenticationOptions</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AuthenticationSchemeOptions</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Scheme <span class=\"token operator\">=</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Secret <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SecretApiKey\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiKeyAuthenticationHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOptionsMonitor<span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">></span></span> options<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILoggerFactory</span> logger<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UrlEncoder</span> encoder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token generic-method\"><span class=\"token function\">AuthenticationHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">,</span> encoder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>AuthenticateResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">HandleAuthenticateAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>AuthenticationHeaderValue<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>Authorization<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing Authorization header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">!=</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Authorization Scheme\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Parameter <span class=\"token operator\">!=</span> options<span class=\"token punctuation\">.</span>CurrentValue<span class=\"token punctuation\">.</span>Secret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid ApiKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> claims <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> \n          <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"service2service\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the same way as with JWT, we are going to add \"unique_name\" claim which will be recognized and used by dotnet whenever we want current username</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsIdentity</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">,</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> principal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsPrincipal</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ticket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AuthenticationTicket</span><span class=\"token punctuation\">(</span>principal<span class=\"token punctuation\">,</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>The same way as before we are going to check that neither anonymour nor jwt request are considered authenticated:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<p>in both cases response is:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"authenticated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scheme\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"claims\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But for api key auth we got our suer</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"authenticated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scheme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"service2service\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"claims\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"service2service\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>note that we have only one <code class=\"language-text\">name</code> claim</li>\n<li>which is used by dotnet to access current username</li>\n<li>also now we are in charge of current auth schema</li>\n<li>just for example we are adding <code class=\"language-text\">service2service</code> username so it is definitely clear whats going on, but any other claims can be used and we will play with all that little bit later</li>\n</ul>\n<h2>Combine JWT and ApiKet auth</h2>\n<p>So here is the question how should we combine both jwt and api key authentication in dotnet</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> combinejwtapikey\n<span class=\"token builtin class-name\">cd</span> combinejwtapikey\ndotnet new web --exclude-launch-settings\ndotnet <span class=\"token function\">add</span> package Microsoft.Identity.Web</code></pre></div>\n<p>Here is the catch, our first attempt may be something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// ADD BOTH JWT AND API KEY AUTH</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// JWT</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span>JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// API KEY</span>\n<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScheme</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">,</span> ApiKeyAuthenticationHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Everything will compile and start, but not matter what we will send - we will be treated as anonymous user</p>\n<p>Thats because it is now not clear what authentication to use and what to do if both present etc</p>\n<p>From one side we can set \"default\" authentication scheme like so <code class=\"language-text\">.AddAuthentication(\"ApiKey\")</code> or like so <code class=\"language-text\">.AddAuthentication(\"Bearer\")</code> but will it actualy solve something?</p>\n<p>It will add following behaviour to our application - everywhere in our app whenever we are injecting current user, if api key auth is passent it will be filled, but if we are going to pass jwt - user will still be anonymous, which will be our first WTF</p>\n<p>One of workarounds may be to create authorization policy allowing any of schemes, but how about endpoins that supposed to be called for both anonymous and authenticated users?</p>\n<p>Found really good article with explanations of how it should be done:</p>\n<p><a href=\"https://damienbod.com/2022/09/19/asp-net-core-api-auth-with-multiple-identity-providers/\">https://damienbod.com/2022/09/19/asp-net-core-api-auth-with-multiple-identity-providers/</a></p>\n<p>In short, we are going to add <code class=\"language-text\">.AddAuthentication(\"Unknown\")</code>, then <code class=\"language-text\">.AddJwtBearer()</code>, then <code class=\"language-text\">.AddApiKey()</code> and then we will add an policy which job is to return scheme name for incoming request, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// ADD BOTH JWT AND API KEY AUTH</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// JWT</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span>JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// API KEY</span>\n<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScheme</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">,</span> ApiKeyAuthenticationHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// WIREUP BOTH AUTHENTICATIONS</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicyScheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"figure out scheme for incomming request\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>ForwardDefault <span class=\"token operator\">=</span> JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>ForwardDefaultSelector <span class=\"token operator\">=</span> context <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>AuthenticationHeaderValue<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>Authorization<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">==</span> JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">==</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that we still need some schema that will mark request as authenticated or anonymous, thats why we must set <code class=\"language-text\">ForwardDefault</code> to something, otherwise you will receive <code class=\"language-text\">The method or operation is not implemented</code> at <code class=\"language-text\">Microsoft.AspNetCore.Authentication.PolicySchemeHandler.HandleAuthenticateAsync</code></p>\n<p>Here is what I have ended up with:</p>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Authentication<span class=\"token punctuation\">.</span>JwtBearer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"die-hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Die Hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1988</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1979</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"terminator-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminator 2: Judgment Day\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1991</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2008</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ADD JWT AUTH</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span>JwtBearerDefaults<span class=\"token punctuation\">.</span>AuthenticationScheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// USE JWT AUTH</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClaimsPrincipal</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    authenticated <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>IsAuthenticated<span class=\"token punctuation\">,</span>\n    scheme <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>AuthenticationType<span class=\"token punctuation\">,</span>\n    user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name<span class=\"token punctuation\">,</span>\n    claims <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- REQUIRES AUTH</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapDelete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}/likes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Likes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Year<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Likes <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>And samples for default endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<p>Note that we are not adding <code class=\"language-text\">[Athorization]</code> nor <code class=\"language-text\">.RequireAuthorization()</code>, endpoint is accessible by both anonymous and authenticated users and based on request correct handler is choosen, which then fills current user, profit.</p>\n<p>And as you can guess the same is true for endpoints requiring authentication</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># should respond with 401 unauthorized</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"contact\", \"title\": \"Contact\", \"year\": 1997, \"owner\": \"user1\"}'</span>\n\n<span class=\"token comment\"># jwt should work</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"contact\", \"title\": \"Contact\", \"year\": 1997, \"owner\": \"user1\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n\n<span class=\"token comment\"># api key should workd</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"predator\", \"title\": \"Predator\", \"year\": 1987, \"owner\": \"user1\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<h2>Combining multiple JWT authorities</h2>\n<p>Previous step was crusial for this example</p>\n<p>What if we have multiple JWT Bearer authentications, or may be we are in the middle of migration, or may be we want to combine our auth service with Azure Active Directory tokens generated for service account to accomplish service to service communications</p>\n<p>In all that cases incomming requests will have <code class=\"language-text\">Authorization: Bearer xxxx</code> with tokens signed by different authorities</p>\n<p>By different authorities we may think of Google, Microsoft, Okta, Identity Server and so on, especially OpenId Connect providers will work nicely out of the box</p>\n<p>For now, to keep things simple, lets reuse our console app, by changing authority and signing secret, aka:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMiIsInVuaXF1ZV9uYW1lIjoidXNlcjIiLCJuYmYiOjE3MDM5NDQ4MzMsImV4cCI6MTcwNDU0NDgzMywiaWF0IjoxNzAzOTQ0ODMzLCJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIn0.EboZv59hfZ0HadaxswedxRi2nfz2UUEYnOgEi3xvClk</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"unique_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"nbf\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1703944833</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1704544833</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1703944833</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>signed by <code class=\"language-text\">SECOND_SECRET_FOR_JWT_TOKEN_SIGN</code></p>\n<p>because it has only issued at <code class=\"language-text\">iat</code> claim and has no expirity <code class=\"language-text\">exp</code> we will be validating it little bit different</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> multiplejwt\n<span class=\"token builtin class-name\">cd</span> multiplejwt\ndotnet new web --exclude-launch-settings\ndotnet <span class=\"token function\">add</span> package Microsoft.Identity.Web</code></pre></div>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens<span class=\"token punctuation\">.</span>Jwt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> movies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Movie<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"die-hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Die Hard\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1988</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alien\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1979</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"terminator-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Terminator 2: Judgment Day\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1991</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rambo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2008</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ADD MULTIPLE JWT</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// FIRST JWT</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SECOND JWT</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SecondJwt\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECOND_SECRET_FOR_JWT_TOKEN_SIGN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// WIREUP BOTH AUTHENTICATIONS</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicyScheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dynamically depetermine which JWT to use\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  options<span class=\"token punctuation\">.</span>ForwardDefault <span class=\"token operator\">=</span> <span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fallback</span>\n  options<span class=\"token punctuation\">.</span>ForwardDefaultSelector <span class=\"token operator\">=</span> context <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>AuthenticationHeaderValue<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>Authorization<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">!=</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">JwtSecurityTokenHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">CanReadToken</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> issuer <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">ReadJwtToken</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Issuer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>issuer <span class=\"token operator\">==</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>issuer <span class=\"token operator\">==</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"SecondJwt\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// USE BOTH JWT AND API KEY AUTH</span>\n<span class=\"token comment\">// not how it always stays the same</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClaimsPrincipal</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    authenticated <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>IsAuthenticated<span class=\"token punctuation\">,</span>\n    scheme <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>AuthenticationType<span class=\"token punctuation\">,</span>\n    user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name<span class=\"token punctuation\">,</span>\n    claims <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- REQUIRES AUTH</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Movie</span> movie<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> movie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movie<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapDelete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapPatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/movies/{id}/likes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> index <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span><span class=\"token function\">FindIndex</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Likes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> movies<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Movie</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Id<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Year<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Likes <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># check main endpoint</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMiIsInVuaXF1ZV9uYW1lIjoidXNlcjIiLCJuYmYiOjE3MDM5NDQ4MzMsImV4cCI6MTcwNDU0NDgzMywiaWF0IjoxNzAzOTQ0ODMzLCJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIn0.EboZv59hfZ0HadaxswedxRi2nfz2UUEYnOgEi3xvClk\"</span> <span class=\"token operator\">|</span> jq\n\n<span class=\"token comment\"># should respond with 401 unauthorized</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-i</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"contact\", \"title\": \"Contact\", \"year\": 1997, \"owner\": \"user1\"}'</span>\n\n<span class=\"token comment\"># jwt should work</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"contact\", \"title\": \"Contact\", \"year\": 1997, \"owner\": \"user1\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n\n<span class=\"token comment\"># api key should workd</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:5000/movies <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-Type: application/json'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"predator\", \"title\": \"Predator\", \"year\": 1987, \"owner\": \"user1\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMiIsInVuaXF1ZV9uYW1lIjoidXNlcjIiLCJuYmYiOjE3MDM5NDQ4MzMsImV4cCI6MTcwNDU0NDgzMywiaWF0IjoxNzAzOTQ0ODMzLCJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIn0.EboZv59hfZ0HadaxswedxRi2nfz2UUEYnOgEi3xvClk\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<p>As you can guess you can combine many jwt and api keys together with this approach.</p>\n<h2>Authorization</h2>\n<p>On top of that you may want to add some additional policies that will tune access to your service</p>\n<p>Aka require api key authentication for one endpoints and any jwt for another</p>\n<p>Or having certain roles or any other claims in token</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> policies\n<span class=\"token builtin class-name\">cd</span> policies\ndotnet new web --exclude-launch-settings\ndotnet <span class=\"token function\">add</span> package Microsoft.Identity.Web</code></pre></div>\n<p><div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens<span class=\"token punctuation\">.</span>Jwt</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>Headers</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Claims</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>Encodings<span class=\"token punctuation\">.</span>Web</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Authentication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Authentication<span class=\"token punctuation\">.</span>JwtBearer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Options</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>IdentityModel<span class=\"token punctuation\">.</span>Tokens</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ADD MULTIPLE JWT</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// FIRST JWT</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_USED_TO_SIGN_OUR_CUSTOM_JWT_TOKENS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SECOND JWT</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddJwtBearer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SecondJwt\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    options<span class=\"token punctuation\">.</span>TokenValidationParameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TokenValidationParameters</span> <span class=\"token punctuation\">{</span>\n        ValidateIssuer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateAudience <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateLifetime <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidateIssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        ValidIssuer <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">,</span>\n        ValidAudience <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n        IssuerSigningKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SymmetricSecurityKey</span><span class=\"token punctuation\">(</span>Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECOND_SECRET_FOR_JWT_TOKEN_SIGN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// API KEY</span>\n<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScheme</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">,</span> ApiKeyAuthenticationHandler<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// WIREUP BOTH AUTHENTICATIONS</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicyScheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dynamically depetermine which auth to use\"</span><span class=\"token punctuation\">,</span> options <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  options<span class=\"token punctuation\">.</span>ForwardDefault <span class=\"token operator\">=</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fallback</span>\n  options<span class=\"token punctuation\">.</span>ForwardDefaultSelector <span class=\"token operator\">=</span> context <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>AuthenticationHeaderValue<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>Authorization<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">==</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">!=</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">JwtSecurityTokenHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">CanReadToken</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> issuer <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">ReadJwtToken</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Issuer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>issuer <span class=\"token operator\">==</span> <span class=\"token string\">\"https://contoso.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>issuer <span class=\"token operator\">==</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"SecondJwt\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// AUTHORIZATION POLICIES</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthorizationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthenticatedWithAnyScheme\"</span><span class=\"token punctuation\">,</span> policy <span class=\"token operator\">=></span> policy<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthenticationSchemes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SecondJwt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthenticatedUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthenticatedWithJwt\"</span><span class=\"token punctuation\">,</span> policy <span class=\"token operator\">=></span> policy<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthenticationSchemes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstJwt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SecondJwt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthenticatedUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthenticatedWithApiKey\"</span><span class=\"token punctuation\">,</span> policy <span class=\"token operator\">=></span> policy<span class=\"token punctuation\">.</span><span class=\"token function\">AddAuthenticationSchemes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthenticatedUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// USE BOTH JWT AND API KEY AUTH</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> demo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClaimsPrincipal</span> user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>\n    authenticated <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>IsAuthenticated<span class=\"token punctuation\">,</span>\n    scheme <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>AuthenticationType<span class=\"token punctuation\">,</span>\n    user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Identity<span class=\"token punctuation\">?.</span>Name<span class=\"token punctuation\">,</span>\n    claims <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>Claims<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/any\"</span><span class=\"token punctuation\">,</span> demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthenticatedWithAnyScheme\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwt\"</span><span class=\"token punctuation\">,</span> demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthenticatedWithJwt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/apikey\"</span><span class=\"token punctuation\">,</span> demo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">RequireAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthenticatedWithApiKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// API KEY IMPLEMENTATION DETAILS</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiKeyAuthenticationOptions</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AuthenticationSchemeOptions</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Scheme <span class=\"token operator\">=</span> <span class=\"token string\">\"ApiKey\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Secret <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SecretApiKey\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiKeyAuthenticationHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOptionsMonitor<span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">></span></span> options<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILoggerFactory</span> logger<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UrlEncoder</span> encoder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token generic-method\"><span class=\"token function\">AuthenticationHandler</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ApiKeyAuthenticationOptions<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">,</span> encoder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>AuthenticateResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">HandleAuthenticateAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>AuthenticationHeaderValue<span class=\"token punctuation\">.</span><span class=\"token function\">TryParse</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>Authorization<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing Authorization header\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">!=</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Authorization Scheme\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">.</span>Parameter <span class=\"token operator\">!=</span> options<span class=\"token punctuation\">.</span>CurrentValue<span class=\"token punctuation\">.</span>Secret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid ApiKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> claims <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Claim</span><span class=\"token punctuation\">(</span>ClaimTypes<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"service2service\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsIdentity</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">,</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> principal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ClaimsPrincipal</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ticket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AuthenticationTicket</span><span class=\"token punctuation\">(</span>principal<span class=\"token punctuation\">,</span> ApiKeyAuthenticationOptions<span class=\"token punctuation\">.</span>Scheme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>AuthenticateResult<span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>As you can guess endpoints will allow requests only via certain authentication</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># main endpoint allow everything</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/ <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMiIsInVuaXF1ZV9uYW1lIjoidXNlcjIiLCJuYmYiOjE3MDM5NDQ4MzMsImV4cCI6MTcwNDU0NDgzMywiaWF0IjoxNzAzOTQ0ODMzLCJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIn0.EboZv59hfZ0HadaxswedxRi2nfz2UUEYnOgEi3xvClk\"</span> <span class=\"token operator\">|</span> jq\n\n<span class=\"token comment\"># /any - works the same way, except it does require auth, so anymous request will receive 401</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/any <span class=\"token parameter variable\">-i</span>\n<span class=\"token comment\"># but rest will work</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/any <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token operator\">|</span> jq\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/any <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n\n<span class=\"token comment\"># /jwt - requiers jwt auth</span>\n<span class=\"token comment\"># so this one wont work</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/jwt <span class=\"token parameter variable\">-i</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/jwt <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token parameter variable\">-i</span>\n<span class=\"token comment\"># and this will</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/jwt <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token operator\">|</span> jq\n\n<span class=\"token comment\"># /apikey - wise versa, for apikey</span>\n<span class=\"token comment\"># non api key requests will receive 401</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/apikey <span class=\"token parameter variable\">-i</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/apikey <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">$token</span>\"</span> <span class=\"token parameter variable\">-i</span>\n<span class=\"token comment\"># api key will work</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> http://localhost:5000/apikey <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: ApiKey SecretApiKey\"</span> <span class=\"token operator\">|</span> jq</code></pre></div>\n<p>In token you may want to pass role claim and add it to requirement or do some other fancy things, but in general thats it.</p>\n<p>Here are few related notes:</p>\n<ul>\n<li><a href=\"https://mac-blog.org.ua/kubernetes-oidc-between-services/\">Kubernetes OpenId Connect auth between services</a></li>\n<li><a href=\"https://mac-blog.org.ua/oauth-oidc-journey/\">OAuth 2.0 and OpenID Connect journey</a></li>\n</ul>"}},"pageContext":{"id":"36ffa36e-ae1f-52b6-b5d4-698a0b41326c"}},"staticQueryHashes":[],"slicesMap":{}}