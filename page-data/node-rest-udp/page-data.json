{"componentChunkName":"component---src-templates-note-js","path":"/node-rest-udp","result":{"data":{"remark":{"fields":{"path":"node-rest-udp"},"meta":{"title":""},"headings":[{"value":"Node.js HTTP rest server side by side with UDP on same port"}],"html":"<h1>Node.js HTTP rest server side by side with UDP on same port</h1>\n<p>We are going to build service which will be able to respond to both HTTP requests and UDP messages comming to the same port.</p>\n<p>UDP might be used to broadcast messages which might be used to service discovery like things if all services are running in same network.</p>\n<p><strong>server.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> dgram <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dgram'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> StringDecoder <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string_decoder'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n\n<span class=\"token comment\">// http/tcp server</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> parsed<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/+|\\/+$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> parsed<span class=\"token punctuation\">.</span>query\n  <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers\n\n  <span class=\"token keyword\">const</span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>body <span class=\"token operator\">+=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    body <span class=\"token operator\">+=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'HTTP_REQUEST'</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">,</span>\n      query<span class=\"token punctuation\">,</span>\n      headers<span class=\"token punctuation\">,</span>\n      body\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// TODO: process request</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json; charset=utf-8'</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">success</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'ok'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// udp server</span>\n<span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> dgram<span class=\"token punctuation\">.</span><span class=\"token function\">createSocket</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'udp4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">reuseAddr</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// &lt;- NOTE: we are asking OS to let us reuse port</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer<span class=\"token punctuation\">,</span> sender</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'UDP_MESSAGE'</span><span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n      sender\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// demo: respond to sender</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sender<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> sender<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'RESPOND'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          sender\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// POI: bind two servers to same port</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">socket</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And here is simple client which will send broadcast udp message to whole network and print response if any, after that it closes socket and exits.</p>\n<p><strong>client.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dgram <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dgram'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> dgram<span class=\"token punctuation\">.</span><span class=\"token function\">createSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'udp4'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span>\n\n<span class=\"token function\">socket</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">setBroadcast</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 255.255.255.255 - boradcast for local network - RFC922</span>\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'255.255.255.255'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">?</span> err <span class=\"token operator\">:</span> <span class=\"token string\">'Sended'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// socket.close();</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer<span class=\"token punctuation\">,</span> sender</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received message: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sender<span class=\"token punctuation\">.</span>address<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now is you start server and try to run following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> client.js\nSended\nReceived message: HI from <span class=\"token number\">192.168</span>.105.108\n$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST http://localhost:6000/foo?acme<span class=\"token operator\">=</span><span class=\"token number\">42</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"foo\":\"bar\"}'</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"success\"</span>:true,<span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>On a server console you will see:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span> kind: <span class=\"token string\">'UDP_MESSAGE'</span>,\n  message: <span class=\"token string\">'hi'</span>,\n  sender:\n   <span class=\"token punctuation\">{</span> address: <span class=\"token string\">'192.168.105.108'</span>,\n     family: <span class=\"token string\">'IPv4'</span>,\n     port: <span class=\"token number\">56939</span>,\n     size: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> kind: <span class=\"token string\">'RESPOND'</span>,\n  message: <span class=\"token string\">'HI'</span>,\n  sender:\n   <span class=\"token punctuation\">{</span> address: <span class=\"token string\">'192.168.105.108'</span>,\n     family: <span class=\"token string\">'IPv4'</span>,\n     port: <span class=\"token number\">56939</span>,\n     size: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> kind: <span class=\"token string\">'HTTP_REQUEST'</span>,\n  method: <span class=\"token string\">'post'</span>,\n  path: <span class=\"token string\">'foo'</span>,\n  query: <span class=\"token punctuation\">{</span> acme: <span class=\"token string\">'42'</span> <span class=\"token punctuation\">}</span>,\n  headers:\n   <span class=\"token punctuation\">{</span> host: <span class=\"token string\">'localhost:3000'</span>,\n     <span class=\"token string\">'user-agent'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'curl/7.54.0'</span>,\n     accept: <span class=\"token string\">'*/*'</span>,\n     <span class=\"token string\">'content-length'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'13'</span>,\n     <span class=\"token string\">'content-type'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span> <span class=\"token punctuation\">}</span>,\n  body: <span class=\"token string\">'{\"foo\":\"bar\"}'</span> <span class=\"token punctuation\">}</span></code></pre></div>"}},"pageContext":{"id":"50b42edd-0e60-5628-8584-1567bd8dae3f"}},"staticQueryHashes":[]}