{"componentChunkName":"component---src-templates-note-js","path":"/go-aes/","result":{"data":{"remark":{"fields":{"path":"go-aes"},"meta":{"title":""},"headings":[{"value":"GO Lang AES Encrypt/Decrypt"}],"html":"<h1>GO Lang AES Encrypt/Decrypt</h1>\n<p>From time to time there is a need to encrypt/decrypt something</p>\n<p>Based on <a href=\"https://github.com/mac2000/cryptography\">previous notes</a> here is small helper</p>\n<p><div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"crypto/aes\"</span>\n\t<span class=\"token string\">\"crypto/cipher\"</span>\n\t<span class=\"token string\">\"crypto/rand\"</span>\n\t<span class=\"token string\">\"encoding/base64\"</span>\n\t<span class=\"token string\">\"errors\"</span>\n\t<span class=\"token string\">\"io\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttext <span class=\"token operator\">:=</span> <span class=\"token string\">\"Hello, World!\"</span>\n\n\tcryptographer<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tencrypted<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cryptographer<span class=\"token punctuation\">.</span><span class=\"token function\">Encrypt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tdecrypted<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cryptographer<span class=\"token punctuation\">.</span><span class=\"token function\">Decrypt</span><span class=\"token punctuation\">(</span>encrypted<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> text <span class=\"token operator\">!=</span> decrypted <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decrypted text does not match original\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original:\"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypted:\"</span><span class=\"token punctuation\">,</span> encrypted<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decrypted:\"</span><span class=\"token punctuation\">,</span> decrypted<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Cryptographer <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tblock cipher<span class=\"token punctuation\">.</span>Block\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// func NewWithKey(secret []byte) (*Cryptographer, error) {</span>\n<span class=\"token comment\">// \tif len(secret) != 32 {</span>\n<span class=\"token comment\">// \t\treturn nil, errors.New(\"cryptographer: invalid key size\")</span>\n<span class=\"token comment\">// \t}</span>\n\n<span class=\"token comment\">// \tblock, err := aes.NewCipher(secret)</span>\n<span class=\"token comment\">// \tif err != nil {</span>\n<span class=\"token comment\">// \t\treturn nil, err</span>\n<span class=\"token comment\">// \t}</span>\n\n<span class=\"token comment\">// \treturn &amp;Cryptographer{block: block}, nil</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Cryptographer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsecret <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tblock<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">NewCipher</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Cryptographer<span class=\"token punctuation\">{</span>block<span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cryptographer<span class=\"token punctuation\">)</span> <span class=\"token function\">Encrypt</span><span class=\"token punctuation\">(</span>input <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> input <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cryptographer: empty input\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tbytes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\toutput <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> aes<span class=\"token punctuation\">.</span>BlockSize<span class=\"token operator\">+</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tiv <span class=\"token operator\">:=</span> output<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>aes<span class=\"token punctuation\">.</span>BlockSize<span class=\"token punctuation\">]</span>           <span class=\"token comment\">// get first N (aes.BlockSize) bytes</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFull</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span> <span class=\"token comment\">// fill the iv with random bytes</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// encrypt</span>\n\tstream <span class=\"token operator\">:=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">NewCTR</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\n\tstream<span class=\"token punctuation\">.</span><span class=\"token function\">XORKeyStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">[</span>aes<span class=\"token punctuation\">.</span>BlockSize<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// encode</span>\n\t<span class=\"token keyword\">return</span> base64<span class=\"token punctuation\">.</span>URLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeToString</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cryptographer<span class=\"token punctuation\">)</span> <span class=\"token function\">Decrypt</span><span class=\"token punctuation\">(</span>input <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> input <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cryptographer: empty input\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// decode</span>\n\tbytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> base64<span class=\"token punctuation\">.</span>URLEncoding<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeString</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> aes<span class=\"token punctuation\">.</span>BlockSize <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cryptographer: ciphertext too short\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// split bytes into iv and encrypted</span>\n\tiv <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>aes<span class=\"token punctuation\">.</span>BlockSize<span class=\"token punctuation\">]</span>\n\tencrypted <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">[</span>aes<span class=\"token punctuation\">.</span>BlockSize<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n\toutput <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>encrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// decrypt</span>\n\tstream <span class=\"token operator\">:=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">NewCTR</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\n\tstream<span class=\"token punctuation\">.</span><span class=\"token function\">XORKeyStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> encrypted<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div></p>\n<p>Notes:</p>\n<ul>\n<li>in my case, it is used to encrypt/decrypt short living cookies, so by intent, i want <code class=\"language-text\">key</code> to be generated each time - aka it will rotate eventually and there is no need to hide/steal it</li>\n<li>in case of persistance is required just pass key from outside</li>\n<li>for AES key must be 32 bytes and IV - 16 bytes</li>\n<li>to simplify things we are writing/reading IV first, and then dealing with rest of the bytes, otherwise they should be passed separate</li>\n</ul>"}},"pageContext":{"id":"ae381ddb-1bf3-5c18-9fc7-9af67fdb5968"}},"staticQueryHashes":[],"slicesMap":{}}